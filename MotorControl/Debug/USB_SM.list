
USB_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d660  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800d7f0  0800d7f0  0000e7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de50  0800de50  0000f2f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800de50  0800de50  0000ee50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de58  0800de58  0000f2f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de58  0800de58  0000ee58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de5c  0800de5c  0000ee5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  0800de60  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2f0  2**0
                  CONTENTS
 10 .bss          00001ee8  200002f0  200002f0  0000f2f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200021d8  200021d8  0000f2f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120cc  00000000  00000000  0000f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310c  00000000  00000000  000213ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000244f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba1  00000000  00000000  00025450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024945  00000000  00000000  00025ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166e3  00000000  00000000  0004a936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cccbd  00000000  00000000  00061019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012dcd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000542c  00000000  00000000  0012dd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00133148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7d8 	.word	0x0800d7d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	0800d7d8 	.word	0x0800d7d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <KalmanFilter_Init>:
    double x;  // Value
    double p;  // Estimation error covariance
    double k;  // Kalman gain
} KalmanFilter;

void KalmanFilter_Init(KalmanFilter* filter, double q, double r, double initial_value) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	61f8      	str	r0, [r7, #28]
 8000ea0:	ed87 0b04 	vstr	d0, [r7, #16]
 8000ea4:	ed87 1b02 	vstr	d1, [r7, #8]
 8000ea8:	ed87 2b00 	vstr	d2, [r7]
    filter->q = q;
 8000eac:	69f9      	ldr	r1, [r7, #28]
 8000eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000eb2:	e9c1 2300 	strd	r2, r3, [r1]
    filter->r = r;
 8000eb6:	69f9      	ldr	r1, [r7, #28]
 8000eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ebc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    filter->x = initial_value;
 8000ec0:	69f9      	ldr	r1, [r7, #28]
 8000ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ec6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    filter->p = 1.0;
 8000eca:	69f9      	ldr	r1, [r7, #28]
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <KalmanFilter_Init+0x58>)
 8000ed2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    filter->k = 0.0;
 8000ed6:	69f9      	ldr	r1, [r7, #28]
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000ee4:	bf00      	nop
 8000ee6:	3724      	adds	r7, #36	@ 0x24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	3ff00000 	.word	0x3ff00000

08000ef4 <KalmanFilter_Update>:

double KalmanFilter_Update(KalmanFilter* filter, double measurement) {
 8000ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	ed87 0b00 	vstr	d0, [r7]
    // Prediction update
    filter->p += filter->q;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff f9bd 	bl	800028c <__adddf3>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	68f9      	ldr	r1, [r7, #12]
 8000f18:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Measurement update
    filter->k = filter->p / (filter->p + filter->r);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f2e:	f7ff f9ad 	bl	800028c <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4620      	mov	r0, r4
 8000f38:	4629      	mov	r1, r5
 8000f3a:	f7ff fc87 	bl	800084c <__aeabi_ddiv>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	68f9      	ldr	r1, [r7, #12]
 8000f44:	e9c1 2308 	strd	r2, r3, [r1, #32]
    filter->x += filter->k * (measurement - filter->x);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f5e:	f7ff f993 	bl	8000288 <__aeabi_dsub>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4640      	mov	r0, r8
 8000f68:	4649      	mov	r1, r9
 8000f6a:	f7ff fb45 	bl	80005f8 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4620      	mov	r0, r4
 8000f74:	4629      	mov	r1, r5
 8000f76:	f7ff f989 	bl	800028c <__adddf3>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	e9c1 2304 	strd	r2, r3, [r1, #16]
    filter->p *= (1 - filter->k);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f90:	f04f 0000 	mov.w	r0, #0
 8000f94:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <KalmanFilter_Update+0xd8>)
 8000f96:	f7ff f977 	bl	8000288 <__aeabi_dsub>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff fb29 	bl	80005f8 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	68f9      	ldr	r1, [r7, #12]
 8000fac:	e9c1 2306 	strd	r2, r3, [r1, #24]

    return filter->x;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000fb6:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fba:	eeb0 0a47 	vmov.f32	s0, s14
 8000fbe:	eef0 0a67 	vmov.f32	s1, s15
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fca:	bf00      	nop
 8000fcc:	3ff00000 	.word	0x3ff00000

08000fd0 <convertAccelToMg>:

// Sensitivity values for accelerometer and gyroscope based on full-scale range
double accelSensitivity = 0.488;  // mg/LSB for FS = ±2g
double gyroSensitivity = 4.375;    // mdps/LSB for FS = ±250 dps

double convertAccelToMg(int16_t rawValue) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
    return rawValue * accelSensitivity;
 8000fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff faa0 	bl	8000524 <__aeabi_i2d>
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <convertAccelToMg+0x34>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fb05 	bl	80005f8 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ffa:	eef0 0a67 	vmov.f32	s1, s15
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000008 	.word	0x20000008

08001008 <convertGyroToDps>:

double convertGyroToDps(int16_t rawValue) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
    return rawValue * gyroSensitivity / 10.0;
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa84 	bl	8000524 <__aeabi_i2d>
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <convertGyroToDps+0x48>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fae9 	bl	80005f8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <convertGyroToDps+0x4c>)
 8001034:	f7ff fc0a 	bl	800084c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000010 	.word	0x20000010
 8001054:	40240000 	.word	0x40240000

08001058 <calibrate>:

void calibrate() {
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	b0b3      	sub	sp, #204	@ 0xcc
 800105c:	af06      	add	r7, sp, #24
    int x;
    long xSumGyro = 0, ySumGyro = 0, zSumGyro = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    long xSumAccel = 0, ySumAccel = 0, zSumAccel = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int num = 500;
 8001082:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    int16_t accel_data[3] = {0};
 800108a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	809a      	strh	r2, [r3, #4]
    int16_t gyro_data[3] = {0};
 8001094:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	809a      	strh	r2, [r3, #4]

    for (x = 0; x < num; x++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80010a4:	e041      	b.n	800112a <calibrate+0xd2>
        // Read gyroscope data
        ISM330DLC_ReadGyroscope(gyro_data);
 80010a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fd44 	bl	8001b38 <ISM330DLC_ReadGyroscope>
        xSumGyro += gyro_data[0];
 80010b0:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 80010b4:	461a      	mov	r2, r3
 80010b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010ba:	4413      	add	r3, r2
 80010bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        ySumGyro += gyro_data[1];
 80010c0:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80010c4:	461a      	mov	r2, r3
 80010c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010ca:	4413      	add	r3, r2
 80010cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        zSumGyro += gyro_data[2];
 80010d0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 80010d4:	461a      	mov	r2, r3
 80010d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010da:	4413      	add	r3, r2
 80010dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

        // Read accelerometer data
        ISM330DLC_ReadAccelerometer(accel_data);
 80010e0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fcef 	bl	8001ac8 <ISM330DLC_ReadAccelerometer>
        xSumAccel += accel_data[0];
 80010ea:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 80010ee:	461a      	mov	r2, r3
 80010f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010f4:	4413      	add	r3, r2
 80010f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        ySumAccel += accel_data[1];
 80010fa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	@ 0x8a
 80010fe:	461a      	mov	r2, r3
 8001100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001104:	4413      	add	r3, r2
 8001106:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        zSumAccel += accel_data[2];
 800110a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 800110e:	461a      	mov	r2, r3
 8001110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001114:	4413      	add	r3, r2
 8001116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        HAL_Delay(5);  // Small delay between readings
 800111a:	2005      	movs	r0, #5
 800111c:	f001 f8c2 	bl	80022a4 <HAL_Delay>
    for (x = 0; x < num; x++) {
 8001120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001124:	3301      	adds	r3, #1
 8001126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800112a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800112e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001132:	429a      	cmp	r2, r3
 8001134:	dbb7      	blt.n	80010a6 <calibrate+0x4e>
    }

    // Calculate offsets by averaging readings
    gyroXOffset = xSumGyro / num;
 8001136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800113a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800113e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <calibrate+0x1a0>)
 8001146:	801a      	strh	r2, [r3, #0]
    gyroYOffset = ySumGyro / num;
 8001148:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800114c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001150:	fb92 f3f3 	sdiv	r3, r2, r3
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <calibrate+0x1a4>)
 8001158:	801a      	strh	r2, [r3, #0]
    gyroZOffset = zSumGyro / num;
 800115a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800115e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001162:	fb92 f3f3 	sdiv	r3, r2, r3
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <calibrate+0x1a8>)
 800116a:	801a      	strh	r2, [r3, #0]

    accelXOffset = xSumAccel / num;
 800116c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001170:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001174:	fb92 f3f3 	sdiv	r3, r2, r3
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <calibrate+0x1ac>)
 800117c:	801a      	strh	r2, [r3, #0]
    accelYOffset = ySumAccel / num;
 800117e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001182:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001186:	fb92 f3f3 	sdiv	r3, r2, r3
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <calibrate+0x1b0>)
 800118e:	801a      	strh	r2, [r3, #0]
    accelZOffset = zSumAccel / num;
 8001190:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001194:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001198:	fb92 f3f3 	sdiv	r3, r2, r3
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <calibrate+0x1b4>)
 80011a0:	801a      	strh	r2, [r3, #0]

    // Optional: Print calibration results
    char calibMsg[128];
    snprintf(calibMsg, sizeof(calibMsg),
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <calibrate+0x1a0>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	461e      	mov	r6, r3
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <calibrate+0x1a4>)
 80011ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <calibrate+0x1a8>)
 80011b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <calibrate+0x1ac>)
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	461c      	mov	r4, r3
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <calibrate+0x1b0>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	461d      	mov	r5, r3
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <calibrate+0x1b4>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	4638      	mov	r0, r7
 80011d2:	9304      	str	r3, [sp, #16]
 80011d4:	9503      	str	r5, [sp, #12]
 80011d6:	9402      	str	r4, [sp, #8]
 80011d8:	9101      	str	r1, [sp, #4]
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	4633      	mov	r3, r6
 80011de:	4a0c      	ldr	r2, [pc, #48]	@ (8001210 <calibrate+0x1b8>)
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	f008 ffb7 	bl	800a154 <sniprintf>
             "Calibration complete: Gyro Offsets (X: %d, Y: %d, Z: %d), Accel Offsets (X: %d, Y: %d, Z: %d)\n",
             gyroXOffset, gyroYOffset, gyroZOffset, accelXOffset, accelYOffset, accelZOffset);
    CDC_Transmit_Data(calibMsg);
 80011e6:	463b      	mov	r3, r7
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fd6b 	bl	8001cc4 <CDC_Transmit_Data>
}
 80011ee:	bf00      	nop
 80011f0:	37b4      	adds	r7, #180	@ 0xb4
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200003a4 	.word	0x200003a4
 80011fc:	200003a6 	.word	0x200003a6
 8001200:	200003a8 	.word	0x200003a8
 8001204:	200003aa 	.word	0x200003aa
 8001208:	200003ac 	.word	0x200003ac
 800120c:	200003ae 	.word	0x200003ae
 8001210:	0800d7f0 	.word	0x0800d7f0
 8001214:	00000000 	.word	0x00000000

08001218 <main>:

int main(void) {
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b0fa      	sub	sp, #488	@ 0x1e8
 800121c:	af0c      	add	r7, sp, #48	@ 0x30
    // Step 1: Initialize HAL and System
    HAL_Init();
 800121e:	f000 ffcf 	bl	80021c0 <HAL_Init>
    SystemClock_Config();
 8001222:	f000 fdb3 	bl	8001d8c <SystemClock_Config>
    GPIO_Init();
 8001226:	f000 fd61 	bl	8001cec <GPIO_Init>
    I2C1_Init();
 800122a:	f000 fbe5 	bl	80019f8 <I2C1_Init>
    MX_USB_DEVICE_Init(); // Initialize USB device first
 800122e:	f007 fd39 	bl	8008ca4 <MX_USB_DEVICE_Init>
    ISM330DLC_Init();
 8001232:	f000 fc23 	bl	8001a7c <ISM330DLC_Init>

    // Perform sensor calibration
    calibrate();
 8001236:	f7ff ff0f 	bl	8001058 <calibrate>

    // Initialize Kalman filters for accelerometer and gyroscope
    KalmanFilter_Init(&kalmanAccelX, 0.01, 0.05, 0);
 800123a:	ed9f 2bcf 	vldr	d2, [pc, #828]	@ 8001578 <main+0x360>
 800123e:	ed9f 1bd0 	vldr	d1, [pc, #832]	@ 8001580 <main+0x368>
 8001242:	ed9f 0bd1 	vldr	d0, [pc, #836]	@ 8001588 <main+0x370>
 8001246:	48d6      	ldr	r0, [pc, #856]	@ (80015a0 <main+0x388>)
 8001248:	f7ff fe26 	bl	8000e98 <KalmanFilter_Init>
    KalmanFilter_Init(&kalmanAccelY, 0.01, 0.05, 0);
 800124c:	ed9f 2bca 	vldr	d2, [pc, #808]	@ 8001578 <main+0x360>
 8001250:	ed9f 1bcb 	vldr	d1, [pc, #812]	@ 8001580 <main+0x368>
 8001254:	ed9f 0bcc 	vldr	d0, [pc, #816]	@ 8001588 <main+0x370>
 8001258:	48d2      	ldr	r0, [pc, #840]	@ (80015a4 <main+0x38c>)
 800125a:	f7ff fe1d 	bl	8000e98 <KalmanFilter_Init>
    KalmanFilter_Init(&kalmanAccelZ, 0.01, 0.05, 0);
 800125e:	ed9f 2bc6 	vldr	d2, [pc, #792]	@ 8001578 <main+0x360>
 8001262:	ed9f 1bc7 	vldr	d1, [pc, #796]	@ 8001580 <main+0x368>
 8001266:	ed9f 0bc8 	vldr	d0, [pc, #800]	@ 8001588 <main+0x370>
 800126a:	48cf      	ldr	r0, [pc, #828]	@ (80015a8 <main+0x390>)
 800126c:	f7ff fe14 	bl	8000e98 <KalmanFilter_Init>
    KalmanFilter_Init(&kalmanGyroX, 0.01, 0.05, 0);
 8001270:	ed9f 2bc1 	vldr	d2, [pc, #772]	@ 8001578 <main+0x360>
 8001274:	ed9f 1bc2 	vldr	d1, [pc, #776]	@ 8001580 <main+0x368>
 8001278:	ed9f 0bc3 	vldr	d0, [pc, #780]	@ 8001588 <main+0x370>
 800127c:	48cb      	ldr	r0, [pc, #812]	@ (80015ac <main+0x394>)
 800127e:	f7ff fe0b 	bl	8000e98 <KalmanFilter_Init>
    KalmanFilter_Init(&kalmanGyroY, 0.01, 0.05, 0);
 8001282:	ed9f 2bbd 	vldr	d2, [pc, #756]	@ 8001578 <main+0x360>
 8001286:	ed9f 1bbe 	vldr	d1, [pc, #760]	@ 8001580 <main+0x368>
 800128a:	ed9f 0bbf 	vldr	d0, [pc, #764]	@ 8001588 <main+0x370>
 800128e:	48c8      	ldr	r0, [pc, #800]	@ (80015b0 <main+0x398>)
 8001290:	f7ff fe02 	bl	8000e98 <KalmanFilter_Init>
    KalmanFilter_Init(&kalmanGyroZ, 0.01, 0.05, 0);
 8001294:	ed9f 2bb8 	vldr	d2, [pc, #736]	@ 8001578 <main+0x360>
 8001298:	ed9f 1bb9 	vldr	d1, [pc, #740]	@ 8001580 <main+0x368>
 800129c:	ed9f 0bba 	vldr	d0, [pc, #744]	@ 8001588 <main+0x370>
 80012a0:	48c4      	ldr	r0, [pc, #784]	@ (80015b4 <main+0x39c>)
 80012a2:	f7ff fdf9 	bl	8000e98 <KalmanFilter_Init>

    // Send initial message to indicate USB is ready
    char* initMsg = "USB Initialized. Motor Control Ready\n";
 80012a6:	4bc4      	ldr	r3, [pc, #784]	@ (80015b8 <main+0x3a0>)
 80012a8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    CDC_Transmit_Data(initMsg);
 80012ac:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80012b0:	f000 fd08 	bl	8001cc4 <CDC_Transmit_Data>

    int16_t accel_data[3] = {0};
 80012b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	809a      	strh	r2, [r3, #4]
    int16_t gyro_data[3] = {0};
 80012be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	809a      	strh	r2, [r3, #4]
    double ax = 0, ay = 0, gx = 0.0, gy = 0.0, gz = 0.0;
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    uint16_t lastMotorUpdate = 0;   // Timestamp for motor updates
 8001304:	2300      	movs	r3, #0
 8001306:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
    uint16_t lastSensorUpdate = 0;  // Timestamp for sensor updates
 800130a:	2300      	movs	r3, #0
 800130c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
    uint16_t motorInterval = 1;     // Motor update interval in milliseconds
 8001310:	2301      	movs	r3, #1
 8001312:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
    uint16_t sensorInterval = 500;  // Sensor update interval in milliseconds
 8001316:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800131a:	f8a7 3184 	strh.w	r3, [r7, #388]	@ 0x184

    while (1) {
        // Check if a new command has been received over USB
        if (strlen((char*)buffer) > 0) {
 800131e:	4ba7      	ldr	r3, [pc, #668]	@ (80015bc <main+0x3a4>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00d      	beq.n	8001342 <main+0x12a>
            // Process the received command
            Process_USB_Command(buffer, strlen((char*)buffer));
 8001326:	48a5      	ldr	r0, [pc, #660]	@ (80015bc <main+0x3a4>)
 8001328:	f7fe ffa2 	bl	8000270 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	b29b      	uxth	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	48a2      	ldr	r0, [pc, #648]	@ (80015bc <main+0x3a4>)
 8001334:	f000 fc76 	bl	8001c24 <Process_USB_Command>

            // Clear the buffer after processing
            memset(buffer, 0, sizeof(buffer));
 8001338:	2240      	movs	r2, #64	@ 0x40
 800133a:	2100      	movs	r1, #0
 800133c:	489f      	ldr	r0, [pc, #636]	@ (80015bc <main+0x3a4>)
 800133e:	f008 ff80 	bl	800a242 <memset>
        }

        // Run the motor based on the current state at a higher frequency
        if (HAL_GetTick() - lastMotorUpdate >= motorInterval) {
 8001342:	f000 ffa3 	bl	800228c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	f8b7 319e 	ldrh.w	r3, [r7, #414]	@ 0x19e
 800134c:	1ad2      	subs	r2, r2, r3
 800134e:	f8b7 3186 	ldrh.w	r3, [r7, #390]	@ 0x186
 8001352:	429a      	cmp	r2, r3
 8001354:	d309      	bcc.n	800136a <main+0x152>
            Motor_Control(motorState);
 8001356:	4b9a      	ldr	r3, [pc, #616]	@ (80015c0 <main+0x3a8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fc24 	bl	8001ba8 <Motor_Control>
            lastMotorUpdate = HAL_GetTick(); // Update timestamp
 8001360:	f000 ff94 	bl	800228c <HAL_GetTick>
 8001364:	4603      	mov	r3, r0
 8001366:	f8a7 319e 	strh.w	r3, [r7, #414]	@ 0x19e
        }

        // Read sensors and print IMU data to USB at a slower frequency
        if (HAL_GetTick() - lastSensorUpdate >= sensorInterval) {
 800136a:	f000 ff8f 	bl	800228c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001374:	1ad2      	subs	r2, r2, r3
 8001376:	f8b7 3184 	ldrh.w	r3, [r7, #388]	@ 0x184
 800137a:	429a      	cmp	r2, r3
 800137c:	d3cf      	bcc.n	800131e <main+0x106>
            ISM330DLC_ReadAccelerometer(accel_data);
 800137e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fba0 	bl	8001ac8 <ISM330DLC_ReadAccelerometer>
            ISM330DLC_ReadGyroscope(gyro_data);
 8001388:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fbd3 	bl	8001b38 <ISM330DLC_ReadGyroscope>

            // Apply calibration offsets to the gyroscope data
            gyro_data[0] -= gyroXOffset;
 8001392:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b8a      	ldr	r3, [pc, #552]	@ (80015c4 <main+0x3ac>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
            gyro_data[1] -= gyroYOffset;
 80013aa:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	@ 0x102
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b85      	ldr	r3, [pc, #532]	@ (80015c8 <main+0x3b0>)
 80013b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b21b      	sxth	r3, r3
 80013be:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
            gyro_data[2] -= gyroZOffset;
 80013c2:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	@ 0x104
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b80      	ldr	r3, [pc, #512]	@ (80015cc <main+0x3b4>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104

            // Apply calibration offsets to the accelerometer data
            accel_data[0] -= accelXOffset;
 80013da:	f9b7 3108 	ldrsh.w	r3, [r7, #264]	@ 0x108
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b7b      	ldr	r3, [pc, #492]	@ (80015d0 <main+0x3b8>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
            accel_data[1] -= accelYOffset;
 80013f2:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b76      	ldr	r3, [pc, #472]	@ (80015d4 <main+0x3bc>)
 80013fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21b      	sxth	r3, r3
 8001406:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
            accel_data[2] -= accelZOffset;
 800140a:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	@ 0x10c
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b71      	ldr	r3, [pc, #452]	@ (80015d8 <main+0x3c0>)
 8001412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001416:	b29b      	uxth	r3, r3
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	b21b      	sxth	r3, r3
 800141e:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

            // Convert raw data to meaningful units
            double accel_x_mg = convertAccelToMg(accel_data[0]);
 8001422:	f9b7 3108 	ldrsh.w	r3, [r7, #264]	@ 0x108
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fdd2 	bl	8000fd0 <convertAccelToMg>
 800142c:	ed87 0b5e 	vstr	d0, [r7, #376]	@ 0x178
            double accel_y_mg = convertAccelToMg(accel_data[1]);
 8001430:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	@ 0x10a
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fdcb 	bl	8000fd0 <convertAccelToMg>
 800143a:	ed87 0b5c 	vstr	d0, [r7, #368]	@ 0x170
            double accel_z_mg = convertAccelToMg(accel_data[2]);
 800143e:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	@ 0x10c
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fdc4 	bl	8000fd0 <convertAccelToMg>
 8001448:	ed87 0b5a 	vstr	d0, [r7, #360]	@ 0x168

            double gyro_x_dps = convertGyroToDps(gyro_data[0]);
 800144c:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fdd9 	bl	8001008 <convertGyroToDps>
 8001456:	ed87 0b58 	vstr	d0, [r7, #352]	@ 0x160
            double gyro_y_dps = convertGyroToDps(gyro_data[1]);
 800145a:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	@ 0x102
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fdd2 	bl	8001008 <convertGyroToDps>
 8001464:	ed87 0b56 	vstr	d0, [r7, #344]	@ 0x158
            double gyro_z_dps = convertGyroToDps(gyro_data[2]);
 8001468:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	@ 0x104
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fdcb 	bl	8001008 <convertGyroToDps>
 8001472:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150

            // Apply Kalman filter to accelerometer data
            double filtered_ax = KalmanFilter_Update(&kalmanAccelX, accel_x_mg);
 8001476:	ed97 0b5e 	vldr	d0, [r7, #376]	@ 0x178
 800147a:	4849      	ldr	r0, [pc, #292]	@ (80015a0 <main+0x388>)
 800147c:	f7ff fd3a 	bl	8000ef4 <KalmanFilter_Update>
 8001480:	ed87 0b52 	vstr	d0, [r7, #328]	@ 0x148
            double filtered_ay = KalmanFilter_Update(&kalmanAccelY, accel_y_mg);
 8001484:	ed97 0b5c 	vldr	d0, [r7, #368]	@ 0x170
 8001488:	4846      	ldr	r0, [pc, #280]	@ (80015a4 <main+0x38c>)
 800148a:	f7ff fd33 	bl	8000ef4 <KalmanFilter_Update>
 800148e:	ed87 0b50 	vstr	d0, [r7, #320]	@ 0x140
            double filtered_az = KalmanFilter_Update(&kalmanAccelZ, accel_z_mg);
 8001492:	ed97 0b5a 	vldr	d0, [r7, #360]	@ 0x168
 8001496:	4844      	ldr	r0, [pc, #272]	@ (80015a8 <main+0x390>)
 8001498:	f7ff fd2c 	bl	8000ef4 <KalmanFilter_Update>
 800149c:	ed87 0b4e 	vstr	d0, [r7, #312]	@ 0x138

            // Apply Kalman filter to gyroscope data
            double filtered_gx = KalmanFilter_Update(&kalmanGyroX, gyro_x_dps);
 80014a0:	ed97 0b58 	vldr	d0, [r7, #352]	@ 0x160
 80014a4:	4841      	ldr	r0, [pc, #260]	@ (80015ac <main+0x394>)
 80014a6:	f7ff fd25 	bl	8000ef4 <KalmanFilter_Update>
 80014aa:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
            double filtered_gy = KalmanFilter_Update(&kalmanGyroY, gyro_y_dps);
 80014ae:	ed97 0b56 	vldr	d0, [r7, #344]	@ 0x158
 80014b2:	483f      	ldr	r0, [pc, #252]	@ (80015b0 <main+0x398>)
 80014b4:	f7ff fd1e 	bl	8000ef4 <KalmanFilter_Update>
 80014b8:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128
            double filtered_gz = KalmanFilter_Update(&kalmanGyroZ, gyro_z_dps);
 80014bc:	ed97 0b54 	vldr	d0, [r7, #336]	@ 0x150
 80014c0:	483c      	ldr	r0, [pc, #240]	@ (80015b4 <main+0x39c>)
 80014c2:	f7ff fd17 	bl	8000ef4 <KalmanFilter_Update>
 80014c6:	ed87 0b48 	vstr	d0, [r7, #288]	@ 0x120

            // Calculate angles based on accelerometer with proper type casting
            ay = atan2(filtered_ax, sqrt(pow(filtered_ay, 2) + pow(filtered_az, 2))) * 180 / M_PI;
 80014ca:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 8001590 <main+0x378>
 80014ce:	ed97 0b50 	vldr	d0, [r7, #320]	@ 0x140
 80014d2:	f00a ff95 	bl	800c400 <pow>
 80014d6:	ec55 4b10 	vmov	r4, r5, d0
 80014da:	ed9f 1b2d 	vldr	d1, [pc, #180]	@ 8001590 <main+0x378>
 80014de:	ed97 0b4e 	vldr	d0, [r7, #312]	@ 0x138
 80014e2:	f00a ff8d 	bl	800c400 <pow>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7fe fecd 	bl	800028c <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	ec43 2b17 	vmov	d7, r2, r3
 80014fa:	eeb0 0a47 	vmov.f32	s0, s14
 80014fe:	eef0 0a67 	vmov.f32	s1, s15
 8001502:	f00a ffed 	bl	800c4e0 <sqrt>
 8001506:	eeb0 7a40 	vmov.f32	s14, s0
 800150a:	eef0 7a60 	vmov.f32	s15, s1
 800150e:	eeb0 1a47 	vmov.f32	s2, s14
 8001512:	eef0 1a67 	vmov.f32	s3, s15
 8001516:	ed97 0b52 	vldr	d0, [r7, #328]	@ 0x148
 800151a:	f00a ff6f 	bl	800c3fc <atan2>
 800151e:	ec51 0b10 	vmov	r0, r1, d0
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <main+0x3c4>)
 8001528:	f7ff f866 	bl	80005f8 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	a318      	add	r3, pc, #96	@ (adr r3, 8001598 <main+0x380>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff f987 	bl	800084c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
            ax = atan2(filtered_ay, sqrt(pow(filtered_ax, 2) + pow(filtered_az, 2))) * 180 / M_PI;
 8001546:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001590 <main+0x378>
 800154a:	ed97 0b52 	vldr	d0, [r7, #328]	@ 0x148
 800154e:	f00a ff57 	bl	800c400 <pow>
 8001552:	ec55 4b10 	vmov	r4, r5, d0
 8001556:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 8001590 <main+0x378>
 800155a:	ed97 0b4e 	vldr	d0, [r7, #312]	@ 0x138
 800155e:	f00a ff4f 	bl	800c400 <pow>
 8001562:	ec53 2b10 	vmov	r2, r3, d0
 8001566:	4620      	mov	r0, r4
 8001568:	4629      	mov	r1, r5
 800156a:	f7fe fe8f 	bl	800028c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	ec43 2b17 	vmov	d7, r2, r3
 8001576:	e033      	b.n	80015e0 <main+0x3c8>
	...
 8001580:	9999999a 	.word	0x9999999a
 8001584:	3fa99999 	.word	0x3fa99999
 8001588:	47ae147b 	.word	0x47ae147b
 800158c:	3f847ae1 	.word	0x3f847ae1
 8001590:	00000000 	.word	0x00000000
 8001594:	40000000 	.word	0x40000000
 8001598:	54442d18 	.word	0x54442d18
 800159c:	400921fb 	.word	0x400921fb
 80015a0:	200003b0 	.word	0x200003b0
 80015a4:	200003d8 	.word	0x200003d8
 80015a8:	20000400 	.word	0x20000400
 80015ac:	20000428 	.word	0x20000428
 80015b0:	20000450 	.word	0x20000450
 80015b4:	20000478 	.word	0x20000478
 80015b8:	0800d850 	.word	0x0800d850
 80015bc:	20000364 	.word	0x20000364
 80015c0:	20000360 	.word	0x20000360
 80015c4:	200003a4 	.word	0x200003a4
 80015c8:	200003a6 	.word	0x200003a6
 80015cc:	200003a8 	.word	0x200003a8
 80015d0:	200003aa 	.word	0x200003aa
 80015d4:	200003ac 	.word	0x200003ac
 80015d8:	200003ae 	.word	0x200003ae
 80015dc:	40668000 	.word	0x40668000
 80015e0:	eeb0 0a47 	vmov.f32	s0, s14
 80015e4:	eef0 0a67 	vmov.f32	s1, s15
 80015e8:	f00a ff7a 	bl	800c4e0 <sqrt>
 80015ec:	eeb0 7a40 	vmov.f32	s14, s0
 80015f0:	eef0 7a60 	vmov.f32	s15, s1
 80015f4:	eeb0 1a47 	vmov.f32	s2, s14
 80015f8:	eef0 1a67 	vmov.f32	s3, s15
 80015fc:	ed97 0b50 	vldr	d0, [r7, #320]	@ 0x140
 8001600:	f00a fefc 	bl	800c3fc <atan2>
 8001604:	ec51 0b10 	vmov	r0, r1, d0
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4bb2      	ldr	r3, [pc, #712]	@ (80018d8 <main+0x6c0>)
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80018b8 <main+0x6a0>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f914 	bl	800084c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

            // Integrate gyro data to get angles (assuming FREQ is your sampling frequency)
            gx += (filtered_gx / FREQ);
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4baa      	ldr	r3, [pc, #680]	@ (80018dc <main+0x6c4>)
 8001632:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8001636:	f7ff f909 	bl	800084c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8001642:	f7fe fe23 	bl	800028c <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
            gy += (filtered_gy / FREQ);
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4ba2      	ldr	r3, [pc, #648]	@ (80018dc <main+0x6c4>)
 8001654:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001658:	f7ff f8f8 	bl	800084c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001664:	f7fe fe12 	bl	800028c <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
            gz += (filtered_gz / FREQ);
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b99      	ldr	r3, [pc, #612]	@ (80018dc <main+0x6c4>)
 8001676:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800167a:	f7ff f8e7 	bl	800084c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001686:	f7fe fe01 	bl	800028c <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0

            // Wrap gyro angles to maintain 0-360 range
            if (gx >= 360) gx -= 360;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b92      	ldr	r3, [pc, #584]	@ (80018e0 <main+0x6c8>)
 8001698:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800169c:	f7ff fa32 	bl	8000b04 <__aeabi_dcmpge>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00a      	beq.n	80016bc <main+0x4a4>
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b8d      	ldr	r3, [pc, #564]	@ (80018e0 <main+0x6c8>)
 80016ac:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 80016b0:	f7fe fdea 	bl	8000288 <__aeabi_dsub>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
            if (gx < 0) gx += 360;
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 80016c8:	f7ff fa08 	bl	8000adc <__aeabi_dcmplt>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <main+0x4d0>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b82      	ldr	r3, [pc, #520]	@ (80018e0 <main+0x6c8>)
 80016d8:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 80016dc:	f7fe fdd6 	bl	800028c <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
            if (gy >= 360) gy -= 360;
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b7c      	ldr	r3, [pc, #496]	@ (80018e0 <main+0x6c8>)
 80016ee:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80016f2:	f7ff fa07 	bl	8000b04 <__aeabi_dcmpge>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00a      	beq.n	8001712 <main+0x4fa>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b77      	ldr	r3, [pc, #476]	@ (80018e0 <main+0x6c8>)
 8001702:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001706:	f7fe fdbf 	bl	8000288 <__aeabi_dsub>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
            if (gy < 0) gy += 360;
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800171e:	f7ff f9dd 	bl	8000adc <__aeabi_dcmplt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00a      	beq.n	800173e <main+0x526>
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b6c      	ldr	r3, [pc, #432]	@ (80018e0 <main+0x6c8>)
 800172e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001732:	f7fe fdab 	bl	800028c <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
            if (gz >= 360) gz -= 360;
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b67      	ldr	r3, [pc, #412]	@ (80018e0 <main+0x6c8>)
 8001744:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001748:	f7ff f9dc 	bl	8000b04 <__aeabi_dcmpge>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00a      	beq.n	8001768 <main+0x550>
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	4b62      	ldr	r3, [pc, #392]	@ (80018e0 <main+0x6c8>)
 8001758:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800175c:	f7fe fd94 	bl	8000288 <__aeabi_dsub>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
            if (gz < 0) gz += 360;
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001774:	f7ff f9b2 	bl	8000adc <__aeabi_dcmplt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00a      	beq.n	8001794 <main+0x57c>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b57      	ldr	r3, [pc, #348]	@ (80018e0 <main+0x6c8>)
 8001784:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8001788:	f7fe fd80 	bl	800028c <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0

            // Apply complementary filter
            gx = gx * 0.98 + ax * 0.02;
 8001794:	a34a      	add	r3, pc, #296	@ (adr r3, 80018c0 <main+0x6a8>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800179e:	f7fe ff2b 	bl	80005f8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4614      	mov	r4, r2
 80017a8:	461d      	mov	r5, r3
 80017aa:	a347      	add	r3, pc, #284	@ (adr r3, 80018c8 <main+0x6b0>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80017b4:	f7fe ff20 	bl	80005f8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4620      	mov	r0, r4
 80017be:	4629      	mov	r1, r5
 80017c0:	f7fe fd64 	bl	800028c <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
            gy = gy * 0.98 + ay * 0.02;
 80017cc:	a33c      	add	r3, pc, #240	@ (adr r3, 80018c0 <main+0x6a8>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80017d6:	f7fe ff0f 	bl	80005f8 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4614      	mov	r4, r2
 80017e0:	461d      	mov	r5, r3
 80017e2:	a339      	add	r3, pc, #228	@ (adr r3, 80018c8 <main+0x6b0>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80017ec:	f7fe ff04 	bl	80005f8 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe fd48 	bl	800028c <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

            // Apply temperature compensation for gyroscope (example implementation)
            double temperatureFactor = 1.0 + 0.015 * (temperature - 25.0);  // Compensate based on temperature drift
 8001804:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <main+0x6cc>)
 8001806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <main+0x6d0>)
 8001810:	f7fe fd3a 	bl	8000288 <__aeabi_dsub>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	a32c      	add	r3, pc, #176	@ (adr r3, 80018d0 <main+0x6b8>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe fee9 	bl	80005f8 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <main+0x6d4>)
 8001834:	f7fe fd2a 	bl	800028c <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            filtered_gx *= temperatureFactor;
 8001840:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001844:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8001848:	f7fe fed6 	bl	80005f8 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
            filtered_gy *= temperatureFactor;
 8001854:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001858:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800185c:	f7fe fecc 	bl	80005f8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
            filtered_gz *= temperatureFactor;
 8001868:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800186c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001870:	f7fe fec2 	bl	80005f8 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

            // Print accelerometer and gyroscope values to USB
            char imuData[128];
            int ret = snprintf(imuData, sizeof(imuData),
 800187c:	4638      	mov	r0, r7
 800187e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001882:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001886:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800188a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800188e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001892:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001896:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800189a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800189e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018a6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80018aa:	e9cd 2300 	strd	r2, r3, [sp]
 80018ae:	4a10      	ldr	r2, [pc, #64]	@ (80018f0 <main+0x6d8>)
 80018b0:	2180      	movs	r1, #128	@ 0x80
 80018b2:	f008 fc4f 	bl	800a154 <sniprintf>
 80018b6:	e01d      	b.n	80018f4 <main+0x6dc>
 80018b8:	54442d18 	.word	0x54442d18
 80018bc:	400921fb 	.word	0x400921fb
 80018c0:	f5c28f5c 	.word	0xf5c28f5c
 80018c4:	3fef5c28 	.word	0x3fef5c28
 80018c8:	47ae147b 	.word	0x47ae147b
 80018cc:	3f947ae1 	.word	0x3f947ae1
 80018d0:	eb851eb8 	.word	0xeb851eb8
 80018d4:	3f8eb851 	.word	0x3f8eb851
 80018d8:	40668000 	.word	0x40668000
 80018dc:	40590000 	.word	0x40590000
 80018e0:	40768000 	.word	0x40768000
 80018e4:	20000000 	.word	0x20000000
 80018e8:	40390000 	.word	0x40390000
 80018ec:	3ff00000 	.word	0x3ff00000
 80018f0:	0800d878 	.word	0x0800d878
 80018f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                               "Gyro X: %.2f, Y: %.2f, Z: %.2f, Accel X: %.2f, Y: %.2f, Z: %.2f\n",
                               filtered_gx, filtered_gy, filtered_gz,
                               filtered_ax, filtered_ay, filtered_az);

            // Check if the output was truncated
            if (ret >= 0 && ret < sizeof(imuData)) {
 80018f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db08      	blt.n	8001912 <main+0x6fa>
 8001900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001904:	2b7f      	cmp	r3, #127	@ 0x7f
 8001906:	d804      	bhi.n	8001912 <main+0x6fa>
                CDC_Transmit_Data(imuData);
 8001908:	463b      	mov	r3, r7
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f9da 	bl	8001cc4 <CDC_Transmit_Data>
 8001910:	e002      	b.n	8001918 <main+0x700>
            } else {
                CDC_Transmit_Data("Error: IMU data output truncated\n");
 8001912:	4835      	ldr	r0, [pc, #212]	@ (80019e8 <main+0x7d0>)
 8001914:	f000 f9d6 	bl	8001cc4 <CDC_Transmit_Data>
            }

            // Add delay to ensure data is properly transmitted before sending more
            HAL_Delay(10);  // 10 ms delay to ensure USB buffer readiness
 8001918:	200a      	movs	r0, #10
 800191a:	f000 fcc3 	bl	80022a4 <HAL_Delay>

            // Print calculated angle data if valid
            if (!isnan(ax) && !isnan(ay) && !isnan(gx) && !isnan(gy) && !isnan(gz)) {
 800191e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001922:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001926:	f7ff f901 	bl	8000b2c <__aeabi_dcmpun>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d151      	bne.n	80019d4 <main+0x7bc>
 8001930:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001934:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8001938:	f7ff f8f8 	bl	8000b2c <__aeabi_dcmpun>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d148      	bne.n	80019d4 <main+0x7bc>
 8001942:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001946:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800194a:	f7ff f8ef 	bl	8000b2c <__aeabi_dcmpun>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d13f      	bne.n	80019d4 <main+0x7bc>
 8001954:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001958:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800195c:	f7ff f8e6 	bl	8000b2c <__aeabi_dcmpun>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d136      	bne.n	80019d4 <main+0x7bc>
 8001966:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 800196a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800196e:	f7ff f8dd 	bl	8000b2c <__aeabi_dcmpun>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d12d      	bne.n	80019d4 <main+0x7bc>
                char angleData[128];
                int ret2 = snprintf(angleData, sizeof(angleData),
 8001978:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800197c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8001980:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001984:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8001988:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800198c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8001990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001994:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800199c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80019a0:	e9cd 2300 	strd	r2, r3, [sp]
 80019a4:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <main+0x7d4>)
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	f008 fbd4 	bl	800a154 <sniprintf>
 80019ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                                    "Angle ax: %.2f, ay: %.2f, gx: %.2f, gy: %.2f, gz: %.2f\n",
                                    ax, ay, gx, gy, gz);

                // Check if the output was truncated
                if (ret2 >= 0 && ret2 < sizeof(angleData)) {
 80019b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db09      	blt.n	80019cc <main+0x7b4>
 80019b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80019be:	d805      	bhi.n	80019cc <main+0x7b4>
                    CDC_Transmit_Data(angleData);
 80019c0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f97d 	bl	8001cc4 <CDC_Transmit_Data>
            if (!isnan(ax) && !isnan(ay) && !isnan(gx) && !isnan(gy) && !isnan(gz)) {
 80019ca:	e006      	b.n	80019da <main+0x7c2>
                } else {
                    CDC_Transmit_Data("Error: Angle data output truncated\n");
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <main+0x7d8>)
 80019ce:	f000 f979 	bl	8001cc4 <CDC_Transmit_Data>
            if (!isnan(ax) && !isnan(ay) && !isnan(gx) && !isnan(gy) && !isnan(gz)) {
 80019d2:	e002      	b.n	80019da <main+0x7c2>
                }
            } else {
                CDC_Transmit_Data("Error: Calculated angles are NaN\n");
 80019d4:	4807      	ldr	r0, [pc, #28]	@ (80019f4 <main+0x7dc>)
 80019d6:	f000 f975 	bl	8001cc4 <CDC_Transmit_Data>
            }

            lastSensorUpdate = HAL_GetTick(); // Update timestamp
 80019da:	f000 fc57 	bl	800228c <HAL_GetTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
        if (strlen((char*)buffer) > 0) {
 80019e4:	e49b      	b.n	800131e <main+0x106>
 80019e6:	bf00      	nop
 80019e8:	0800d8bc 	.word	0x0800d8bc
 80019ec:	0800d8e0 	.word	0x0800d8e0
 80019f0:	0800d918 	.word	0x0800d918
 80019f4:	0800d93c 	.word	0x0800d93c

080019f8 <I2C1_Init>:
        }
    }
}

void I2C1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
    __HAL_RCC_I2C1_CLK_ENABLE();  // Enable I2C1 clock
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <I2C1_Init+0x74>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <I2C1_Init+0x74>)
 8001a08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <I2C1_Init+0x74>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

    hi2c1.Instance = I2C1;
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <I2C1_Init+0x78>)
 8001a1c:	4a15      	ldr	r2, [pc, #84]	@ (8001a74 <I2C1_Init+0x7c>)
 8001a1e:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <I2C1_Init+0x78>)
 8001a22:	4a15      	ldr	r2, [pc, #84]	@ (8001a78 <I2C1_Init+0x80>)
 8001a24:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <I2C1_Init+0x78>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <I2C1_Init+0x78>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <I2C1_Init+0x78>)
 8001a34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a38:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <I2C1_Init+0x78>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <I2C1_Init+0x78>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <I2C1_Init+0x78>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <I2C1_Init+0x78>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a52:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <I2C1_Init+0x78>)
 8001a54:	f000 ff12 	bl	800287c <HAL_I2C_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <I2C1_Init+0x6a>
        // Initialization Error
        Error_Handler();
 8001a5e:	f000 f9ff 	bl	8001e60 <Error_Handler>
    }
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	2000030c 	.word	0x2000030c
 8001a74:	40005400 	.word	0x40005400
 8001a78:	000186a0 	.word	0x000186a0

08001a7c <ISM330DLC_Init>:

void ISM330DLC_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af04      	add	r7, sp, #16
    uint8_t config_data[] = {0x40, 0x40};  // Configure accelerometer for ±2g and gyroscope for ±250 dps
 8001a82:	f244 0340 	movw	r3, #16448	@ 0x4040
 8001a86:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, ISM330DLC_I2C_ADDRESS, CTRL1_XL, 1, &config_data[0], 1, 100);
 8001a88:	2364      	movs	r3, #100	@ 0x64
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	2210      	movs	r2, #16
 8001a98:	21d4      	movs	r1, #212	@ 0xd4
 8001a9a:	480a      	ldr	r0, [pc, #40]	@ (8001ac4 <ISM330DLC_Init+0x48>)
 8001a9c:	f001 f832 	bl	8002b04 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, ISM330DLC_I2C_ADDRESS, CTRL2_G, 1, &config_data[1], 1, 100);
 8001aa0:	2364      	movs	r3, #100	@ 0x64
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	3301      	adds	r3, #1
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2211      	movs	r2, #17
 8001ab2:	21d4      	movs	r1, #212	@ 0xd4
 8001ab4:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <ISM330DLC_Init+0x48>)
 8001ab6:	f001 f825 	bl	8002b04 <HAL_I2C_Mem_Write>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000030c 	.word	0x2000030c

08001ac8 <ISM330DLC_ReadAccelerometer>:

// Function to read accelerometer data
void ISM330DLC_ReadAccelerometer(int16_t *accel_data)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	6078      	str	r0, [r7, #4]
    uint8_t accel_buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c1, ISM330DLC_I2C_ADDRESS, OUTX_L_XL, 1, accel_buffer, 6, 100) == HAL_OK) {
 8001ad0:	2364      	movs	r3, #100	@ 0x64
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	2228      	movs	r2, #40	@ 0x28
 8001ae2:	21d4      	movs	r1, #212	@ 0xd4
 8001ae4:	4813      	ldr	r0, [pc, #76]	@ (8001b34 <ISM330DLC_ReadAccelerometer+0x6c>)
 8001ae6:	f001 f907 	bl	8002cf8 <HAL_I2C_Mem_Read>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d11c      	bne.n	8001b2a <ISM330DLC_ReadAccelerometer+0x62>
        accel_data[0] = (int16_t)(accel_buffer[1] << 8 | accel_buffer[0]);
 8001af0:	7a7b      	ldrb	r3, [r7, #9]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	7a3b      	ldrb	r3, [r7, #8]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	801a      	strh	r2, [r3, #0]
        accel_data[1] = (int16_t)(accel_buffer[3] << 8 | accel_buffer[2]);
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b219      	sxth	r1, r3
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	430a      	orrs	r2, r1
 8001b12:	b212      	sxth	r2, r2
 8001b14:	801a      	strh	r2, [r3, #0]
        accel_data[2] = (int16_t)(accel_buffer[5] << 8 | accel_buffer[4]);
 8001b16:	7b7b      	ldrb	r3, [r7, #13]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b219      	sxth	r1, r3
 8001b1c:	7b3b      	ldrb	r3, [r7, #12]
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3304      	adds	r3, #4
 8001b24:	430a      	orrs	r2, r1
 8001b26:	b212      	sxth	r2, r2
 8001b28:	801a      	strh	r2, [r3, #0]
    }
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000030c 	.word	0x2000030c

08001b38 <ISM330DLC_ReadGyroscope>:

// Function to read gyroscope data
void ISM330DLC_ReadGyroscope(int16_t *gyro_data)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	6078      	str	r0, [r7, #4]
    uint8_t gyro_buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c1, ISM330DLC_I2C_ADDRESS, OUTX_L_G, 1, gyro_buffer, 6, 100) == HAL_OK) {
 8001b40:	2364      	movs	r3, #100	@ 0x64
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	2306      	movs	r3, #6
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2222      	movs	r2, #34	@ 0x22
 8001b52:	21d4      	movs	r1, #212	@ 0xd4
 8001b54:	4813      	ldr	r0, [pc, #76]	@ (8001ba4 <ISM330DLC_ReadGyroscope+0x6c>)
 8001b56:	f001 f8cf 	bl	8002cf8 <HAL_I2C_Mem_Read>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11c      	bne.n	8001b9a <ISM330DLC_ReadGyroscope+0x62>
        gyro_data[0] = (int16_t)(gyro_buffer[1] << 8 | gyro_buffer[0]);
 8001b60:	7a7b      	ldrb	r3, [r7, #9]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	7a3b      	ldrb	r3, [r7, #8]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	801a      	strh	r2, [r3, #0]
        gyro_data[1] = (int16_t)(gyro_buffer[3] << 8 | gyro_buffer[2]);
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b219      	sxth	r1, r3
 8001b78:	7abb      	ldrb	r3, [r7, #10]
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	430a      	orrs	r2, r1
 8001b82:	b212      	sxth	r2, r2
 8001b84:	801a      	strh	r2, [r3, #0]
        gyro_data[2] = (int16_t)(gyro_buffer[5] << 8 | gyro_buffer[4]);
 8001b86:	7b7b      	ldrb	r3, [r7, #13]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b219      	sxth	r1, r3
 8001b8c:	7b3b      	ldrb	r3, [r7, #12]
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	430a      	orrs	r2, r1
 8001b96:	b212      	sxth	r2, r2
 8001b98:	801a      	strh	r2, [r3, #0]
    }
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000030c 	.word	0x2000030c

08001ba8 <Motor_Control>:
// Function to control motor based on its state
void Motor_Control(MotorState state) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d002      	beq.n	8001bbe <Motor_Control+0x16>
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d013      	beq.n	8001be4 <Motor_Control+0x3c>
 8001bbc:	e025      	b.n	8001c0a <Motor_Control+0x62>
        case MOTOR_CW:
            // Set DIR+ high for clockwise direction
            HAL_GPIO_WritePin(MOTOR_PORT, DIR_PIN, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	4817      	ldr	r0, [pc, #92]	@ (8001c20 <Motor_Control+0x78>)
 8001bc4:	f000 fe40 	bl	8002848 <HAL_GPIO_WritePin>

            // Generate a pulse on PUL+
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2104      	movs	r1, #4
 8001bcc:	4814      	ldr	r0, [pc, #80]	@ (8001c20 <Motor_Control+0x78>)
 8001bce:	f000 fe3b 	bl	8002848 <HAL_GPIO_WritePin>
            HAL_Delay(.1);  // Short pulse
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 fb66 	bl	80022a4 <HAL_Delay>
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2104      	movs	r1, #4
 8001bdc:	4810      	ldr	r0, [pc, #64]	@ (8001c20 <Motor_Control+0x78>)
 8001bde:	f000 fe33 	bl	8002848 <HAL_GPIO_WritePin>
            break;
 8001be2:	e018      	b.n	8001c16 <Motor_Control+0x6e>

        case MOTOR_CCW:
            // Set DIR+ low for counterclockwise direction
            HAL_GPIO_WritePin(MOTOR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2108      	movs	r1, #8
 8001be8:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <Motor_Control+0x78>)
 8001bea:	f000 fe2d 	bl	8002848 <HAL_GPIO_WritePin>

            // Generate a pulse on PUL+
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <Motor_Control+0x78>)
 8001bf4:	f000 fe28 	bl	8002848 <HAL_GPIO_WritePin>
            HAL_Delay(.1);  // Short pulse
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 fb53 	bl	80022a4 <HAL_Delay>
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2104      	movs	r1, #4
 8001c02:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <Motor_Control+0x78>)
 8001c04:	f000 fe20 	bl	8002848 <HAL_GPIO_WritePin>
            break;
 8001c08:	e005      	b.n	8001c16 <Motor_Control+0x6e>

        case MOTOR_STOP:
        default:
            // Stop motor (no pulses generated)
            HAL_GPIO_WritePin(MOTOR_PORT, PUL_PIN, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4804      	ldr	r0, [pc, #16]	@ (8001c20 <Motor_Control+0x78>)
 8001c10:	f000 fe1a 	bl	8002848 <HAL_GPIO_WritePin>
            break;
 8001c14:	bf00      	nop
    }
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020000 	.word	0x40020000

08001c24 <Process_USB_Command>:

// Function to process USB commands received from PuTTY
void Process_USB_Command(uint8_t* Buf, uint16_t Len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
    // Null-terminate the received buffer to avoid trailing characters
    Buf[Len] = '\0';
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]

    if (strncmp((char*)Buf, "start_cw", strlen("start_cw")) == 0) {
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	4919      	ldr	r1, [pc, #100]	@ (8001ca4 <Process_USB_Command+0x80>)
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f008 fb07 	bl	800a252 <strncmp>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <Process_USB_Command+0x34>
        motorState = MOTOR_CW;
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <Process_USB_Command+0x84>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_Data("Motor started clockwise\n");
 8001c50:	4816      	ldr	r0, [pc, #88]	@ (8001cac <Process_USB_Command+0x88>)
 8001c52:	f000 f837 	bl	8001cc4 <CDC_Transmit_Data>
        CDC_Transmit_Data("Motor stopped\n");
    }
    else {
        CDC_Transmit_Data("Invalid command\n");
    }
}
 8001c56:	e020      	b.n	8001c9a <Process_USB_Command+0x76>
    else if (strncmp((char*)Buf, "start_ccw", strlen("start_ccw")) == 0) {
 8001c58:	2209      	movs	r2, #9
 8001c5a:	4915      	ldr	r1, [pc, #84]	@ (8001cb0 <Process_USB_Command+0x8c>)
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f008 faf8 	bl	800a252 <strncmp>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d106      	bne.n	8001c76 <Process_USB_Command+0x52>
        motorState = MOTOR_CCW;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <Process_USB_Command+0x84>)
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_Data("Motor started counterclockwise\n");
 8001c6e:	4811      	ldr	r0, [pc, #68]	@ (8001cb4 <Process_USB_Command+0x90>)
 8001c70:	f000 f828 	bl	8001cc4 <CDC_Transmit_Data>
}
 8001c74:	e011      	b.n	8001c9a <Process_USB_Command+0x76>
    else if (strncmp((char*)Buf, "stop", strlen("stop")) == 0) {
 8001c76:	2204      	movs	r2, #4
 8001c78:	490f      	ldr	r1, [pc, #60]	@ (8001cb8 <Process_USB_Command+0x94>)
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f008 fae9 	bl	800a252 <strncmp>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <Process_USB_Command+0x70>
        motorState = MOTOR_STOP;
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <Process_USB_Command+0x84>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_Data("Motor stopped\n");
 8001c8c:	480b      	ldr	r0, [pc, #44]	@ (8001cbc <Process_USB_Command+0x98>)
 8001c8e:	f000 f819 	bl	8001cc4 <CDC_Transmit_Data>
}
 8001c92:	e002      	b.n	8001c9a <Process_USB_Command+0x76>
        CDC_Transmit_Data("Invalid command\n");
 8001c94:	480a      	ldr	r0, [pc, #40]	@ (8001cc0 <Process_USB_Command+0x9c>)
 8001c96:	f000 f815 	bl	8001cc4 <CDC_Transmit_Data>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	0800d960 	.word	0x0800d960
 8001ca8:	20000360 	.word	0x20000360
 8001cac:	0800d96c 	.word	0x0800d96c
 8001cb0:	0800d988 	.word	0x0800d988
 8001cb4:	0800d994 	.word	0x0800d994
 8001cb8:	0800d9b4 	.word	0x0800d9b4
 8001cbc:	0800d9bc 	.word	0x0800d9bc
 8001cc0:	0800d9cc 	.word	0x0800d9cc

08001cc4 <CDC_Transmit_Data>:


// Function to transmit data via USB CDC to PuTTY
void CDC_Transmit_Data(char* data)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7fe facf 	bl	8000270 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f007 f8b7 	bl	8008e4c <CDC_Transmit_FS>
    HAL_Delay(.1);  // Delay to ensure data transmission
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 fae0 	bl	80022a4 <HAL_Delay>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <GPIO_Init>:

// GPIO initialization function
void GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable GPIOA clock
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <GPIO_Init+0x68>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <GPIO_Init+0x68>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <GPIO_Init+0x68>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

    // Configure PUL+ and DIR+ as output
    GPIO_InitStruct.Pin = PUL_PIN | DIR_PIN;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <GPIO_Init+0x6c>)
 8001d32:	f000 fbed 	bl	8002510 <HAL_GPIO_Init>

    // Configure B1 button as input (PA0)
    GPIO_InitStruct.Pin = BUTTON_PIN;
 8001d36:	2301      	movs	r3, #1
 8001d38:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <GPIO_Init+0x6c>)
 8001d48:	f000 fbe2 	bl	8002510 <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000

08001d5c <__io_putchar>:
int __io_putchar(int ch) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    uint8_t data = ch;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	73fb      	strb	r3, [r7, #15]
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data, 1);
 8001d6a:	f107 030f 	add.w	r3, r7, #15
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4619      	mov	r1, r3
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <__io_putchar+0x2c>)
 8001d74:	f005 fbde 	bl	8007534 <USBD_CDC_SetTxBuffer>
    USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001d78:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <__io_putchar+0x2c>)
 8001d7a:	f005 fc1b 	bl	80075b4 <USBD_CDC_TransmitPacket>
    return ch;
 8001d7e:	687b      	ldr	r3, [r7, #4]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200004ac 	.word	0x200004ac

08001d8c <SystemClock_Config>:
void SystemClock_Config(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b094      	sub	sp, #80	@ 0x50
 8001d90:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2230      	movs	r2, #48	@ 0x30
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 fa51 	bl	800a242 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <SystemClock_Config+0xcc>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <SystemClock_Config+0xcc>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc0:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <SystemClock_Config+0xcc>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <SystemClock_Config+0xd0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a21      	ldr	r2, [pc, #132]	@ (8001e5c <SystemClock_Config+0xd0>)
 8001dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <SystemClock_Config+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]

    // Initializes the RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df0:	2310      	movs	r3, #16
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df4:	2302      	movs	r3, #2
 8001df6:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001e00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e04:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 ffa8 	bl	8004d68 <HAL_RCC_OscConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0x96>
    {
        // Initialization Error
        while(1);
 8001e1e:	bf00      	nop
 8001e20:	e7fd      	b.n	8001e1e <SystemClock_Config+0x92>
    }

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e22:	230f      	movs	r3, #15
 8001e24:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	2302      	movs	r3, #2
 8001e28:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e32:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa0a 	bl	8005258 <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0xc2>
    {
        // Initialization Error
        while(1);
 8001e4a:	bf00      	nop
 8001e4c:	e7fd      	b.n	8001e4a <SystemClock_Config+0xbe>
    }
}
 8001e4e:	bf00      	nop
 8001e50:	3750      	adds	r7, #80	@ 0x50
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000

08001e60 <Error_Handler>:
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
    // Error handling code (infinite loop or system reset)
    while(1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <Error_Handler+0x4>

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <HAL_MspInit+0x4c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb4 <HAL_MspInit+0x4c>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_MspInit+0x4c>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_MspInit+0x4c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a08      	ldr	r2, [pc, #32]	@ (8001eb4 <HAL_MspInit+0x4c>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_MspInit+0x4c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ea6:	2007      	movs	r0, #7
 8001ea8:	f000 faf0 	bl	800248c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <HAL_I2C_MspInit+0x84>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d12c      	bne.n	8001f34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <HAL_I2C_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <HAL_I2C_MspInit+0x88>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_I2C_MspInit+0x88>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001ef6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efc:	2312      	movs	r3, #18
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <HAL_I2C_MspInit+0x8c>)
 8001f14:	f000 fafc 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_I2C_MspInit+0x88>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <HAL_I2C_MspInit+0x88>)
 8001f22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_I2C_MspInit+0x88>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	@ 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020400 	.word	0x40020400

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <NMI_Handler+0x4>

08001f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <MemManage_Handler+0x4>

08001f60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9e:	f000 f961 	bl	8002264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <OTG_FS_IRQHandler+0x10>)
 8001fae:	f001 fdcd 	bl	8003b4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20001988 	.word	0x20001988

08001fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_kill>:

int _kill(int pid, int sig)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fd6:	f008 f999 	bl	800a30c <__errno>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2216      	movs	r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
  return -1;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_exit>:

void _exit (int status)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ffe7 	bl	8001fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ffe:	bf00      	nop
 8002000:	e7fd      	b.n	8001ffe <_exit+0x12>

08002002 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e00a      	b.n	800202a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002014:	f3af 8000 	nop.w
 8002018:	4601      	mov	r1, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	b2ca      	uxtb	r2, r1
 8002022:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbf0      	blt.n	8002014 <_read+0x12>
  }

  return len;
 8002032:	687b      	ldr	r3, [r7, #4]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e009      	b.n	8002062 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	60ba      	str	r2, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fe80 	bl	8001d5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbf1      	blt.n	800204e <_write+0x12>
  }
  return len;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_close>:

int _close(int file)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800209c:	605a      	str	r2, [r3, #4]
  return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_isatty>:

int _isatty(int file)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f008 f8fe 	bl	800a30c <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20020000 	.word	0x20020000
 800213c:	00000400 	.word	0x00000400
 8002140:	200004a0 	.word	0x200004a0
 8002144:	200021d8 	.word	0x200021d8

08002148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800216c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002170:	f7ff ffea 	bl	8002148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002176:	490d      	ldr	r1, [pc, #52]	@ (80021ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800218c:	4c0a      	ldr	r4, [pc, #40]	@ (80021b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219a:	f008 f8bd 	bl	800a318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219e:	f7ff f83b 	bl	8001218 <main>
  bx  lr    
 80021a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 80021b0:	0800de60 	.word	0x0800de60
  ldr r2, =_sbss
 80021b4:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 80021b8:	200021d8 	.word	0x200021d8

080021bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_Init+0x40>)
 80021ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_Init+0x40>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a07      	ldr	r2, [pc, #28]	@ (8002200 <HAL_Init+0x40>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f000 f94f 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f000 f808 	bl	8002204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f4:	f7ff fe38 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_InitTick+0x54>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_InitTick+0x58>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800221a:	fbb3 f3f1 	udiv	r3, r3, r1
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f967 	bl	80024f6 <HAL_SYSTICK_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00e      	b.n	8002250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b0f      	cmp	r3, #15
 8002236:	d80a      	bhi.n	800224e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002238:	2200      	movs	r2, #0
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f000 f92f 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002244:	4a06      	ldr	r2, [pc, #24]	@ (8002260 <HAL_InitTick+0x5c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000018 	.word	0x20000018
 800225c:	20000020 	.word	0x20000020
 8002260:	2000001c 	.word	0x2000001c

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000020 	.word	0x20000020
 8002288:	200004a4 	.word	0x200004a4

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200004a4 	.word	0x200004a4

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000020 	.word	0x20000020

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	@ (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	@ (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	@ (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff29 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff3e 	bl	8002334 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff31 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa2 	bl	8002448 <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e16b      	b.n	8002804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 815a 	bne.w	80027fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80b4 	beq.w	80027fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b60      	ldr	r3, [pc, #384]	@ (800281c <HAL_GPIO_Init+0x30c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a5f      	ldr	r2, [pc, #380]	@ (800281c <HAL_GPIO_Init+0x30c>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b5d      	ldr	r3, [pc, #372]	@ (800281c <HAL_GPIO_Init+0x30c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002820 <HAL_GPIO_Init+0x310>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a52      	ldr	r2, [pc, #328]	@ (8002824 <HAL_GPIO_Init+0x314>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_GPIO_Init+0x226>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a51      	ldr	r2, [pc, #324]	@ (8002828 <HAL_GPIO_Init+0x318>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x222>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a50      	ldr	r2, [pc, #320]	@ (800282c <HAL_GPIO_Init+0x31c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x21e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002830 <HAL_GPIO_Init+0x320>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x21a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002834 <HAL_GPIO_Init+0x324>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x216>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4d      	ldr	r2, [pc, #308]	@ (8002838 <HAL_GPIO_Init+0x328>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x212>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4c      	ldr	r2, [pc, #304]	@ (800283c <HAL_GPIO_Init+0x32c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4b      	ldr	r2, [pc, #300]	@ (8002840 <HAL_GPIO_Init+0x330>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x20a>
 8002716:	2307      	movs	r3, #7
 8002718:	e00e      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800271a:	2308      	movs	r3, #8
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800271e:	2306      	movs	r3, #6
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x228>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x228>
 8002736:	2300      	movs	r3, #0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002748:	4935      	ldr	r1, [pc, #212]	@ (8002820 <HAL_GPIO_Init+0x310>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002756:	4b3b      	ldr	r3, [pc, #236]	@ (8002844 <HAL_GPIO_Init+0x334>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277a:	4a32      	ldr	r2, [pc, #200]	@ (8002844 <HAL_GPIO_Init+0x334>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002780:	4b30      	ldr	r3, [pc, #192]	@ (8002844 <HAL_GPIO_Init+0x334>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a4:	4a27      	ldr	r2, [pc, #156]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027aa:	4b26      	ldr	r3, [pc, #152]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f8:	4a12      	ldr	r2, [pc, #72]	@ (8002844 <HAL_GPIO_Init+0x334>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	f67f ae90 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	@ 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40021400 	.word	0x40021400
 800283c:	40021800 	.word	0x40021800
 8002840:	40021c00 	.word	0x40021c00
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e12b      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fb08 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	@ 0x24
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e0:	f002 feb2 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a81      	ldr	r2, [pc, #516]	@ (8002af0 <HAL_I2C_Init+0x274>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d807      	bhi.n	8002900 <HAL_I2C_Init+0x84>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a80      	ldr	r2, [pc, #512]	@ (8002af4 <HAL_I2C_Init+0x278>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e006      	b.n	800290e <HAL_I2C_Init+0x92>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a7d      	ldr	r2, [pc, #500]	@ (8002af8 <HAL_I2C_Init+0x27c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0e7      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a78      	ldr	r2, [pc, #480]	@ (8002afc <HAL_I2C_Init+0x280>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a6a      	ldr	r2, [pc, #424]	@ (8002af0 <HAL_I2C_Init+0x274>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d802      	bhi.n	8002950 <HAL_I2C_Init+0xd4>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	e009      	b.n	8002964 <HAL_I2C_Init+0xe8>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a69      	ldr	r2, [pc, #420]	@ (8002b00 <HAL_I2C_Init+0x284>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	3301      	adds	r3, #1
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002976:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	495c      	ldr	r1, [pc, #368]	@ (8002af0 <HAL_I2C_Init+0x274>)
 8002980:	428b      	cmp	r3, r1
 8002982:	d819      	bhi.n	80029b8 <HAL_I2C_Init+0x13c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e59      	subs	r1, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002998:	400b      	ands	r3, r1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_I2C_Init+0x138>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e59      	subs	r1, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b2:	e051      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e04f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <HAL_I2C_Init+0x168>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e012      	b.n	8002a0a <HAL_I2C_Init+0x18e>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x196>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e022      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10e      	bne.n	8002a38 <HAL_I2C_Init+0x1bc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1e58      	subs	r0, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	440b      	add	r3, r1
 8002a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a36:	e00f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	6809      	ldr	r1, [r1, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6911      	ldr	r1, [r2, #16]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	000186a0 	.word	0x000186a0
 8002af4:	001e847f 	.word	0x001e847f
 8002af8:	003d08ff 	.word	0x003d08ff
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b1e:	f7ff fbb5 	bl	800228c <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	f040 80d9 	bne.w	8002ce4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2319      	movs	r3, #25
 8002b38:	2201      	movs	r2, #1
 8002b3a:	496d      	ldr	r1, [pc, #436]	@ (8002cf0 <HAL_I2C_Mem_Write+0x1ec>)
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fc8b 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2C_Mem_Write+0x56>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0c5      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d007      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2221      	movs	r2, #33	@ 0x21
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf4 <HAL_I2C_Mem_Write+0x1f0>)
 8002bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bc2:	88f8      	ldrh	r0, [r7, #6]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fac2 	bl	800315c <I2C_RequestMemoryWrite>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d052      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e081      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fd50 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d107      	bne.n	8002c0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06b      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d11b      	bne.n	8002c84 <HAL_I2C_Mem_Write+0x180>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d017      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1aa      	bne.n	8002be2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fd43 	bl	800371c <I2C_WaitOnBTFFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d107      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e016      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e000      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
  }
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	00100002 	.word	0x00100002
 8002cf4:	ffff0000 	.word	0xffff0000

08002cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	@ 0x30
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d12:	f7ff fabb 	bl	800228c <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	f040 8214 	bne.w	800314e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2319      	movs	r3, #25
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	497b      	ldr	r1, [pc, #492]	@ (8002f1c <HAL_I2C_Mem_Read+0x224>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fb91 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e207      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Mem_Read+0x56>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e200      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d007      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2222      	movs	r2, #34	@ 0x22
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2240      	movs	r2, #64	@ 0x40
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f20 <HAL_I2C_Mem_Read+0x228>)
 8002db4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db6:	88f8      	ldrh	r0, [r7, #6]
 8002db8:	893a      	ldrh	r2, [r7, #8]
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa5e 	bl	8003288 <I2C_RequestMemoryRead>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1bc      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d113      	bne.n	8002e06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e190      	b.n	8003128 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d11b      	bne.n	8002e46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e170      	b.n	8003128 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d11b      	bne.n	8002e86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	e150      	b.n	8003128 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e9c:	e144      	b.n	8003128 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	f200 80f1 	bhi.w	800308a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d123      	bne.n	8002ef8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fc79 	bl	80037ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e145      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ef6:	e117      	b.n	8003128 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d14e      	bne.n	8002f9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f06:	2200      	movs	r2, #0
 8002f08:	4906      	ldr	r1, [pc, #24]	@ (8002f24 <HAL_I2C_Mem_Read+0x22c>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 faa4 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e11a      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
 8002f1a:	bf00      	nop
 8002f1c:	00100002 	.word	0x00100002
 8002f20:	ffff0000 	.word	0xffff0000
 8002f24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f9c:	e0c4      	b.n	8003128 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	496c      	ldr	r1, [pc, #432]	@ (8003158 <HAL_I2C_Mem_Read+0x460>)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fa55 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0cb      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	2200      	movs	r2, #0
 8003002:	4955      	ldr	r1, [pc, #340]	@ (8003158 <HAL_I2C_Mem_Read+0x460>)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fa27 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e09d      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003088:	e04e      	b.n	8003128 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fb8c 	bl	80037ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e058      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d124      	bne.n	8003128 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f aeb6 	bne.w	8002e9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	@ 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	00010004 	.word	0x00010004

0800315c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2200      	movs	r2, #0
 800318e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f960 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ac:	d103      	bne.n	80031b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e05f      	b.n	800327a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ba:	897b      	ldrh	r3, [r7, #10]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	492d      	ldr	r1, [pc, #180]	@ (8003284 <I2C_RequestMemoryWrite+0x128>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f9bb 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e04c      	b.n	800327a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f8:	6a39      	ldr	r1, [r7, #32]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fa46 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b04      	cmp	r3, #4
 800320c:	d107      	bne.n	800321e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e02b      	b.n	800327a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003228:	893b      	ldrh	r3, [r7, #8]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	611a      	str	r2, [r3, #16]
 8003232:	e021      	b.n	8003278 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b29b      	uxth	r3, r3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003244:	6a39      	ldr	r1, [r7, #32]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fa20 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	2b04      	cmp	r3, #4
 8003258:	d107      	bne.n	800326a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003268:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e005      	b.n	800327a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800326e:	893b      	ldrh	r3, [r7, #8]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	00010002 	.word	0x00010002

08003288 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	460b      	mov	r3, r1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f8c2 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e8:	d103      	bne.n	80032f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0aa      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f6:	897b      	ldrh	r3, [r7, #10]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003304:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	4952      	ldr	r1, [pc, #328]	@ (8003454 <I2C_RequestMemoryRead+0x1cc>)
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f91d 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e097      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003334:	6a39      	ldr	r1, [r7, #32]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f9a8 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	2b04      	cmp	r3, #4
 8003348:	d107      	bne.n	800335a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003358:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e076      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003364:	893b      	ldrh	r3, [r7, #8]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	e021      	b.n	80033b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b29b      	uxth	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003380:	6a39      	ldr	r1, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f982 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	2b04      	cmp	r3, #4
 8003394:	d107      	bne.n	80033a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e050      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f967 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d107      	bne.n	80033dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e035      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f82b 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003416:	d103      	bne.n	8003420 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e013      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003424:	897b      	ldrh	r3, [r7, #10]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	4906      	ldr	r1, [pc, #24]	@ (8003454 <I2C_RequestMemoryRead+0x1cc>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f886 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	00010002 	.word	0x00010002

08003458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	e048      	b.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d044      	beq.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe ff0b 	bl	800228c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d139      	bne.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10d      	bne.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	43da      	mvns	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	e00c      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d116      	bne.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e023      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10d      	bne.n	8003522 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	e00c      	b.n	800353c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	429a      	cmp	r2, r3
 8003540:	d093      	beq.n	800346a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355a:	e071      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356a:	d123      	bne.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e067      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d041      	beq.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe fe66 	bl	800228c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d136      	bne.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10c      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e00b      	b.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e021      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10c      	bne.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e00b      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f af6d 	bne.w	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003698:	e034      	b.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f8e3 	bl	8003866 <I2C_IsAcknowledgeFailed>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e034      	b.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d028      	beq.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe fdeb 	bl	800228c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11d      	bne.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b80      	cmp	r3, #128	@ 0x80
 80036d4:	d016      	beq.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e007      	b.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d1c3      	bne.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003728:	e034      	b.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f89b 	bl	8003866 <I2C_IsAcknowledgeFailed>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e034      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d028      	beq.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe fda3 	bl	800228c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d11d      	bne.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d016      	beq.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e007      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d1c3      	bne.n	800372a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b8:	e049      	b.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d119      	bne.n	80037fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0210 	mvn.w	r2, #16
 80037d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e030      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fe fd46 	bl	800228c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d11d      	bne.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d016      	beq.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e007      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b40      	cmp	r3, #64	@ 0x40
 800385a:	d1ae      	bne.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387c:	d11b      	bne.n	80038b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003886:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e101      	b.n	8003ada <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f005 fbf3 	bl	80090dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003904:	d102      	bne.n	800390c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f001 ffc4 	bl	800589e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7c1a      	ldrb	r2, [r3, #16]
 800391e:	f88d 2000 	strb.w	r2, [sp]
 8003922:	3304      	adds	r3, #4
 8003924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003926:	f001 fea3 	bl	8005670 <USB_CoreInit>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0ce      	b.n	8003ada <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 ffbc 	bl	80058c0 <USB_SetCurrentMode>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0bf      	b.n	8003ada <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e04a      	b.n	80039f6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	3315      	adds	r3, #21
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3314      	adds	r3, #20
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	b298      	uxth	r0, r3
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	332e      	adds	r3, #46	@ 0x2e
 800399c:	4602      	mov	r2, r0
 800399e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3318      	adds	r3, #24
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	331c      	adds	r3, #28
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3320      	adds	r3, #32
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039dc:	7bfa      	ldrb	r2, [r7, #15]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	3324      	adds	r3, #36	@ 0x24
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	3301      	adds	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	791b      	ldrb	r3, [r3, #4]
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3af      	bcc.n	8003960 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e044      	b.n	8003a90 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	791b      	ldrb	r3, [r3, #4]
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3b5      	bcc.n	8003a06 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	7c1a      	ldrb	r2, [r3, #16]
 8003aa2:	f88d 2000 	strb.w	r2, [sp]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aaa:	f001 ff55 	bl	8005958 <USB_DevInit>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e00c      	b.n	8003ada <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f002 ff9f 	bl	8006a16 <USB_DevDisconnect>

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_PCD_Start+0x1c>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e022      	b.n	8003b44 <HAL_PCD_Start+0x62>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d105      	bne.n	8003b26 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 fea6 	bl	800587c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f002 ff4d 	bl	80069d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b08d      	sub	sp, #52	@ 0x34
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f003 f80b 	bl	8006b7e <USB_GetMode>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 848c 	bne.w	8004488 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 ff6f 	bl	8006a58 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8482 	beq.w	8004486 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 ff5c 	bl	8006a58 <USB_ReadInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d107      	bne.n	8003bba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f002 0202 	and.w	r2, r2, #2
 8003bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f002 ff4a 	bl	8006a58 <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d161      	bne.n	8003c92 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0210 	bic.w	r2, r2, #16
 8003bdc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	0c5b      	lsrs	r3, r3, #17
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d124      	bne.n	8003c54 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d035      	beq.n	8003c82 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	6a38      	ldr	r0, [r7, #32]
 8003c2a:	f002 fd81 	bl	8006730 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c3a:	441a      	add	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c4c:	441a      	add	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	615a      	str	r2, [r3, #20]
 8003c52:	e016      	b.n	8003c82 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	0c5b      	lsrs	r3, r3, #17
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d110      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c66:	2208      	movs	r2, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6a38      	ldr	r0, [r7, #32]
 8003c6c:	f002 fd60 	bl	8006730 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c7c:	441a      	add	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0210 	orr.w	r2, r2, #16
 8003c90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f002 fede 	bl	8006a58 <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ca2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ca6:	f040 80a7 	bne.w	8003df8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 fee3 	bl	8006a7e <USB_ReadDevAllOutEpInterrupt>
 8003cb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003cba:	e099      	b.n	8003df0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 808e 	beq.w	8003de4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 ff07 	bl	8006ae6 <USB_ReadDevOutEPInterrupt>
 8003cd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00c      	beq.n	8003cfe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cf6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fea3 	bl	8004a44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00c      	beq.n	8003d22 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	2308      	movs	r3, #8
 8003d18:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 ff79 	bl	8004c14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d030      	beq.n	8003daa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d50:	2b80      	cmp	r3, #128	@ 0x80
 8003d52:	d109      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d66:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	78db      	ldrb	r3, [r3, #3]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f005 fab6 	bl	8009304 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da4:	461a      	mov	r2, r3
 8003da6:	2302      	movs	r3, #2
 8003da8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003de2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	3301      	adds	r3, #1
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f47f af62 	bne.w	8003cbc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f002 fe2b 	bl	8006a58 <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e0c:	f040 80db 	bne.w	8003fc6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f002 fe4c 	bl	8006ab2 <USB_ReadDevAllInEpInterrupt>
 8003e1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003e20:	e0cd      	b.n	8003fbe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80c2 	beq.w	8003fb2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 fe72 	bl	8006b22 <USB_ReadDevInEPInterrupt>
 8003e3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d057      	beq.n	8003efa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69f9      	ldr	r1, [r7, #28]
 8003e66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	799b      	ldrb	r3, [r3, #6]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d132      	bne.n	8003eee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	3320      	adds	r3, #32
 8003e98:	6819      	ldr	r1, [r3, #0]
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4403      	add	r3, r0
 8003ea8:	331c      	adds	r3, #28
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4419      	add	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4403      	add	r3, r0
 8003ebc:	3320      	adds	r3, #32
 8003ebe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <HAL_PCD_IRQHandler+0x3a2>
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eca:	4613      	mov	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3324      	adds	r3, #36	@ 0x24
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2101      	movs	r1, #1
 8003eea:	f002 fe79 	bl	8006be0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f005 f980 	bl	80091fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f10:	461a      	mov	r2, r3
 8003f12:	2308      	movs	r3, #8
 8003f14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2310      	movs	r3, #16
 8003f30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2340      	movs	r3, #64	@ 0x40
 8003f4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d023      	beq.n	8003fa0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f5a:	6a38      	ldr	r0, [r7, #32]
 8003f5c:	f001 fe60 	bl	8005c20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	3304      	adds	r3, #4
 8003f72:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	78db      	ldrb	r3, [r3, #3]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d108      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f005 f9cd 	bl	8009328 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003faa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fcbd 	bl	800492c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f af2e 	bne.w	8003e22 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f002 fd44 	bl	8006a58 <USB_ReadInterrupts>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fda:	d122      	bne.n	8004022 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d108      	bne.n	800400c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004002:	2100      	movs	r1, #0
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fea3 	bl	8004d50 <HAL_PCDEx_LPM_Callback>
 800400a:	e002      	b.n	8004012 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f005 f96b 	bl	80092e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f002 fd16 	bl	8006a58 <USB_ReadInterrupts>
 800402c:	4603      	mov	r3, r0
 800402e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004036:	d112      	bne.n	800405e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d102      	bne.n	800404e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f005 f927 	bl	800929c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800405c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f002 fcf8 	bl	8006a58 <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004072:	f040 80b7 	bne.w	80041e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2110      	movs	r1, #16
 8004090:	4618      	mov	r0, r3
 8004092:	f001 fdc5 	bl	8005c20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004096:	2300      	movs	r3, #0
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409a:	e046      	b.n	800412a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a8:	461a      	mov	r2, r3
 80040aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040dc:	461a      	mov	r2, r3
 80040de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004102:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800411e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004122:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004126:	3301      	adds	r3, #1
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	791b      	ldrb	r3, [r3, #4]
 800412e:	461a      	mov	r2, r3
 8004130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004132:	4293      	cmp	r3, r2
 8004134:	d3b2      	bcc.n	800409c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004144:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004148:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7bdb      	ldrb	r3, [r3, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004162:	f043 030b 	orr.w	r3, r3, #11
 8004166:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004178:	f043 030b 	orr.w	r3, r3, #11
 800417c:	6453      	str	r3, [r2, #68]	@ 0x44
 800417e:	e015      	b.n	80041ac <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800418e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004192:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004196:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041a6:	f043 030b 	orr.w	r3, r3, #11
 80041aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041ce:	461a      	mov	r2, r3
 80041d0:	f002 fd06 	bl	8006be0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80041e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f002 fc35 	bl	8006a58 <USB_ReadInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f8:	d123      	bne.n	8004242 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 fccb 	bl	8006b9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f001 fd82 	bl	8005d12 <USB_GetDevSpeed>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681c      	ldr	r4, [r3, #0]
 800421a:	f001 fa09 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 800421e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004224:	461a      	mov	r2, r3
 8004226:	4620      	mov	r0, r4
 8004228:	f001 fa86 	bl	8005738 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f005 f80c 	bl	800924a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004240:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f002 fc06 	bl	8006a58 <USB_ReadInterrupts>
 800424c:	4603      	mov	r3, r0
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d10a      	bne.n	800426c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f004 ffe9 	bl	800922e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f002 0208 	and.w	r2, r2, #8
 800426a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f002 fbf1 	bl	8006a58 <USB_ReadInterrupts>
 8004276:	4603      	mov	r3, r0
 8004278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427c:	2b80      	cmp	r3, #128	@ 0x80
 800427e:	d123      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800428c:	2301      	movs	r3, #1
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004290:	e014      	b.n	80042bc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fb0a 	bl	80048ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	3301      	adds	r3, #1
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	791b      	ldrb	r3, [r3, #4]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d3e4      	bcc.n	8004292 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 fbc3 	bl	8006a58 <USB_ReadInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042dc:	d13c      	bne.n	8004358 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042de:	2301      	movs	r3, #1
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e2:	e02b      	b.n	800433c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f8:	4613      	mov	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	3318      	adds	r3, #24
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d115      	bne.n	8004336 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800430a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800430c:	2b00      	cmp	r3, #0
 800430e:	da12      	bge.n	8004336 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3317      	adds	r3, #23
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800432c:	b2db      	uxtb	r3, r3
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 faca 	bl	80048ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	3301      	adds	r3, #1
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	791b      	ldrb	r3, [r3, #4]
 8004340:	461a      	mov	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	4293      	cmp	r3, r2
 8004346:	d3cd      	bcc.n	80042e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f002 fb7b 	bl	8006a58 <USB_ReadInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004368:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800436c:	d156      	bne.n	800441c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800436e:	2301      	movs	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
 8004372:	e045      	b.n	8004400 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d12e      	bne.n	80043fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800439c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da2b      	bge.n	80043fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80043ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d121      	bne.n	80043fa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043f6:	6053      	str	r3, [r2, #4]
            break;
 80043f8:	e008      	b.n	800440c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	3301      	adds	r3, #1
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	791b      	ldrb	r3, [r3, #4]
 8004404:	461a      	mov	r2, r3
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	4293      	cmp	r3, r2
 800440a:	d3b3      	bcc.n	8004374 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800441a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f002 fb19 	bl	8006a58 <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004430:	d10a      	bne.n	8004448 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f004 ff8a 	bl	800934c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f002 fb03 	bl	8006a58 <USB_ReadInterrupts>
 8004452:	4603      	mov	r3, r0
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b04      	cmp	r3, #4
 800445a:	d115      	bne.n	8004488 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f004 ff7a 	bl	8009368 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6859      	ldr	r1, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	e000      	b.n	8004488 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004486:	bf00      	nop
    }
  }
}
 8004488:	3734      	adds	r7, #52	@ 0x34
 800448a:	46bd      	mov	sp, r7
 800448c:	bd90      	pop	{r4, r7, pc}

0800448e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_PCD_SetAddress+0x1a>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e012      	b.n	80044ce <HAL_PCD_SetAddress+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 fa62 	bl	8006988 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	4608      	mov	r0, r1
 80044e0:	4611      	mov	r1, r2
 80044e2:	461a      	mov	r2, r3
 80044e4:	4603      	mov	r3, r0
 80044e6:	70fb      	strb	r3, [r7, #3]
 80044e8:	460b      	mov	r3, r1
 80044ea:	803b      	strh	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da0f      	bge.n	800451c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	3310      	adds	r3, #16
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	705a      	strb	r2, [r3, #1]
 800451a:	e00f      	b.n	800453c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	3304      	adds	r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004548:	883b      	ldrh	r3, [r7, #0]
 800454a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	78ba      	ldrb	r2, [r7, #2]
 8004556:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800456a:	78bb      	ldrb	r3, [r7, #2]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d102      	bne.n	8004576 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_PCD_EP_Open+0xae>
 8004580:	2302      	movs	r3, #2
 8004582:	e00e      	b.n	80045a2 <HAL_PCD_EP_Open+0xcc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68f9      	ldr	r1, [r7, #12]
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fbe2 	bl	8005d5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80045a0:	7afb      	ldrb	r3, [r7, #11]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da0f      	bge.n	80045de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	3310      	adds	r3, #16
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	3304      	adds	r3, #4
 80045d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	705a      	strb	r2, [r3, #1]
 80045dc:	e00f      	b.n	80045fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	3304      	adds	r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_PCD_EP_Close+0x6e>
 8004614:	2302      	movs	r3, #2
 8004616:	e00e      	b.n	8004636 <HAL_PCD_EP_Close+0x8c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	4618      	mov	r0, r3
 8004628:	f001 fc20 	bl	8005e6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	460b      	mov	r3, r1
 800464c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	3304      	adds	r3, #4
 8004666:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004680:	7afb      	ldrb	r3, [r7, #11]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	b2da      	uxtb	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	799b      	ldrb	r3, [r3, #6]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d102      	bne.n	800469a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	799b      	ldrb	r3, [r3, #6]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6979      	ldr	r1, [r7, #20]
 80046a6:	f001 fcbd 	bl	8006024 <USB_EPStartXfer>

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 020f 	and.w	r2, r3, #15
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	460b      	mov	r3, r1
 80046f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f4:	7afb      	ldrb	r3, [r7, #11]
 80046f6:	f003 020f 	and.w	r2, r3, #15
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	3310      	adds	r3, #16
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2200      	movs	r2, #0
 800471c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2201      	movs	r2, #1
 8004722:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004724:	7afb      	ldrb	r3, [r7, #11]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	b2da      	uxtb	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	799b      	ldrb	r3, [r3, #6]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	799b      	ldrb	r3, [r3, #6]
 8004746:	461a      	mov	r2, r3
 8004748:	6979      	ldr	r1, [r7, #20]
 800474a:	f001 fc6b 	bl	8006024 <USB_EPStartXfer>

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	7912      	ldrb	r2, [r2, #4]
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e04f      	b.n	8004816 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da0f      	bge.n	800479e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	f003 020f 	and.w	r2, r3, #15
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	3310      	adds	r3, #16
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	3304      	adds	r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	705a      	strb	r2, [r3, #1]
 800479c:	e00d      	b.n	80047ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	3304      	adds	r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_PCD_EP_SetStall+0x82>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e01d      	b.n	8004816 <HAL_PCD_EP_SetStall+0xbe>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68f9      	ldr	r1, [r7, #12]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fff9 	bl	80067e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7999      	ldrb	r1, [r3, #6]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004806:	461a      	mov	r2, r3
 8004808:	f002 f9ea 	bl	8006be0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	460b      	mov	r3, r1
 8004828:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	7912      	ldrb	r2, [r2, #4]
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e042      	b.n	80048c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800483c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004840:	2b00      	cmp	r3, #0
 8004842:	da0f      	bge.n	8004864 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 020f 	and.w	r2, r3, #15
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	3310      	adds	r3, #16
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	3304      	adds	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	705a      	strb	r2, [r3, #1]
 8004862:	e00f      	b.n	8004884 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	3304      	adds	r3, #4
 800487c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_PCD_EP_ClrStall+0x86>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e00e      	b.n	80048c2 <HAL_PCD_EP_ClrStall+0xa4>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f002 f802 	bl	80068bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da0c      	bge.n	80048f8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	f003 020f 	and.w	r2, r3, #15
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	3310      	adds	r3, #16
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	3304      	adds	r3, #4
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e00c      	b.n	8004912 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	3304      	adds	r3, #4
 8004910:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fe21 	bl	8006560 <USB_EPStopXfer>
 800491e:	4603      	mov	r3, r0
 8004920:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004922:	7afb      	ldrb	r3, [r7, #11]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	@ 0x28
 8004930:	af02      	add	r7, sp, #8
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	4613      	mov	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	3310      	adds	r3, #16
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	3304      	adds	r3, #4
 8004952:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d901      	bls.n	8004964 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e06b      	b.n	8004a3c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	429a      	cmp	r2, r3
 8004978:	d902      	bls.n	8004980 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3303      	adds	r3, #3
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004988:	e02a      	b.n	80049e0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	429a      	cmp	r2, r3
 800499e:	d902      	bls.n	80049a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	3303      	adds	r3, #3
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68d9      	ldr	r1, [r3, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	4603      	mov	r3, r0
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f001 fe76 	bl	80066b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	441a      	add	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	441a      	add	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d809      	bhi.n	8004a0a <PCD_WriteEmptyTxFifo+0xde>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d203      	bcs.n	8004a0a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1bf      	bne.n	800498a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d811      	bhi.n	8004a3a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	6939      	ldr	r1, [r7, #16]
 8004a32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a36:	4013      	ands	r3, r2
 8004a38:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	333c      	adds	r3, #60	@ 0x3c
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	799b      	ldrb	r3, [r3, #6]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d17b      	bne.n	8004b72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4a61      	ldr	r2, [pc, #388]	@ (8004c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	f240 80b9 	bls.w	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80b3 	beq.w	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aac:	6093      	str	r3, [r2, #8]
 8004aae:	e0a7      	b.n	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2320      	movs	r3, #32
 8004aca:	6093      	str	r3, [r2, #8]
 8004acc:	e098      	b.n	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 8093 	bne.w	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4a4b      	ldr	r2, [pc, #300]	@ (8004c0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d90f      	bls.n	8004b02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af8:	461a      	mov	r2, r3
 8004afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004afe:	6093      	str	r3, [r2, #8]
 8004b00:	e07e      	b.n	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	3304      	adds	r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1a      	ldr	r2, [r3, #32]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	0159      	lsls	r1, r3, #5
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	440b      	add	r3, r1
 8004b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d114      	bne.n	8004b64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2101      	movs	r1, #1
 8004b50:	f002 f846 	bl	8006be0 <USB_EP0_OutStart>
 8004b54:	e006      	b.n	8004b64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	441a      	add	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f004 fb2a 	bl	80091c4 <HAL_PCD_DataOutStageCallback>
 8004b70:	e046      	b.n	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4a26      	ldr	r2, [pc, #152]	@ (8004c10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d124      	bne.n	8004bc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b96:	6093      	str	r3, [r2, #8]
 8004b98:	e032      	b.n	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f004 fb01 	bl	80091c4 <HAL_PCD_DataOutStageCallback>
 8004bc2:	e01d      	b.n	8004c00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d114      	bne.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d108      	bne.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bec:	461a      	mov	r2, r3
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f001 fff6 	bl	8006be0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f004 fae2 	bl	80091c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	4f54300a 	.word	0x4f54300a
 8004c10:	4f54310a 	.word	0x4f54310a

08004c14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	333c      	adds	r3, #60	@ 0x3c
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a15      	ldr	r2, [pc, #84]	@ (8004c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d90e      	bls.n	8004c68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c60:	461a      	mov	r2, r3
 8004c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f004 fa99 	bl	80091a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d90c      	bls.n	8004c90 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	799b      	ldrb	r3, [r3, #6]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d108      	bne.n	8004c90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	f001 ffa8 	bl	8006be0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	4f54300a 	.word	0x4f54300a

08004ca0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
 8004cac:	4613      	mov	r3, r2
 8004cae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d107      	bne.n	8004cce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cbe:	883b      	ldrh	r3, [r7, #0]
 8004cc0:	0419      	lsls	r1, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ccc:	e028      	b.n	8004d20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4413      	add	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	73fb      	strb	r3, [r7, #15]
 8004ce0:	e00d      	b.n	8004cfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	3340      	adds	r3, #64	@ 0x40
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
 8004cfe:	7bfa      	ldrb	r2, [r7, #15]
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d3ec      	bcc.n	8004ce2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d08:	883b      	ldrh	r3, [r7, #0]
 8004d0a:	0418      	lsls	r0, r3, #16
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	4302      	orrs	r2, r0
 8004d18:	3340      	adds	r3, #64	@ 0x40
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	887a      	ldrh	r2, [r7, #2]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e267      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d075      	beq.n	8004e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d86:	4b88      	ldr	r3, [pc, #544]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00c      	beq.n	8004dac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b85      	ldr	r3, [pc, #532]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b82      	ldr	r3, [pc, #520]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x108>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d157      	bne.n	8004e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e242      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x74>
 8004dce:	4b76      	ldr	r3, [pc, #472]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a75      	ldr	r2, [pc, #468]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x98>
 8004de6:	4b70      	ldr	r3, [pc, #448]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b6d      	ldr	r3, [pc, #436]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004e00:	4b69      	ldr	r3, [pc, #420]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a68      	ldr	r2, [pc, #416]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b66      	ldr	r3, [pc, #408]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a65      	ldr	r2, [pc, #404]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fd fa34 	bl	800228c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fd fa30 	bl	800228c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	@ 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e207      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xc0>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fd fa20 	bl	800228c <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fd fa1c 	bl	800228c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	@ 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1f3      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	4b51      	ldr	r3, [pc, #324]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0xe8>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d063      	beq.n	8004f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b47      	ldr	r3, [pc, #284]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d11c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e96:	4b44      	ldr	r3, [pc, #272]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d116      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	4b41      	ldr	r3, [pc, #260]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e1c7      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eba:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	4937      	ldr	r1, [pc, #220]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	e03a      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed8:	4b34      	ldr	r3, [pc, #208]	@ (8004fac <HAL_RCC_OscConfig+0x244>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fd f9d5 	bl	800228c <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee6:	f7fd f9d1 	bl	800228c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e1a8      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f04:	4b28      	ldr	r3, [pc, #160]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4925      	ldr	r1, [pc, #148]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1a:	4b24      	ldr	r3, [pc, #144]	@ (8004fac <HAL_RCC_OscConfig+0x244>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd f9b4 	bl	800228c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f28:	f7fd f9b0 	bl	800228c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e187      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d036      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5a:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <HAL_RCC_OscConfig+0x248>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fd f994 	bl	800228c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f68:	f7fd f990 	bl	800228c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e167      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x200>
 8004f86:	e01b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <HAL_RCC_OscConfig+0x248>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8e:	f7fd f97d 	bl	800228c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	e00e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f96:	f7fd f979 	bl	800228c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d907      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e150      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	42470000 	.word	0x42470000
 8004fb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	4b88      	ldr	r3, [pc, #544]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ea      	bne.n	8004f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8097 	beq.w	80050fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd2:	4b81      	ldr	r3, [pc, #516]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fee:	4b7a      	ldr	r3, [pc, #488]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffe:	4b77      	ldr	r3, [pc, #476]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d118      	bne.n	800503c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800500a:	4b74      	ldr	r3, [pc, #464]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a73      	ldr	r2, [pc, #460]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005016:	f7fd f939 	bl	800228c <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7fd f935 	bl	800228c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e10c      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005030:	4b6a      	ldr	r3, [pc, #424]	@ (80051dc <HAL_RCC_OscConfig+0x474>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d106      	bne.n	8005052 <HAL_RCC_OscConfig+0x2ea>
 8005044:	4b64      	ldr	r3, [pc, #400]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	4a63      	ldr	r2, [pc, #396]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005050:	e01c      	b.n	800508c <HAL_RCC_OscConfig+0x324>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b05      	cmp	r3, #5
 8005058:	d10c      	bne.n	8005074 <HAL_RCC_OscConfig+0x30c>
 800505a:	4b5f      	ldr	r3, [pc, #380]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	4a5e      	ldr	r2, [pc, #376]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	6713      	str	r3, [r2, #112]	@ 0x70
 8005066:	4b5c      	ldr	r3, [pc, #368]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	4a5b      	ldr	r2, [pc, #364]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6713      	str	r3, [r2, #112]	@ 0x70
 8005072:	e00b      	b.n	800508c <HAL_RCC_OscConfig+0x324>
 8005074:	4b58      	ldr	r3, [pc, #352]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a57      	ldr	r2, [pc, #348]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005080:	4b55      	ldr	r3, [pc, #340]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	4a54      	ldr	r2, [pc, #336]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005086:	f023 0304 	bic.w	r3, r3, #4
 800508a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fd f8fa 	bl	800228c <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fd f8f6 	bl	800228c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0cb      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b2:	4b49      	ldr	r3, [pc, #292]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0ee      	beq.n	800509c <HAL_RCC_OscConfig+0x334>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c0:	f7fd f8e4 	bl	800228c <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c8:	f7fd f8e0 	bl	800228c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e0b5      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050de:	4b3e      	ldr	r3, [pc, #248]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ee      	bne.n	80050c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f0:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	4a38      	ldr	r2, [pc, #224]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80a1 	beq.w	8005248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005106:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b08      	cmp	r3, #8
 8005110:	d05c      	beq.n	80051cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d141      	bne.n	800519e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fd f8b4 	bl	800228c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005128:	f7fd f8b0 	bl	800228c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e087      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513a:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	3b01      	subs	r3, #1
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	491b      	ldr	r1, [pc, #108]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005170:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fd f889 	bl	800228c <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517e:	f7fd f885 	bl	800228c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e05c      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005190:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x416>
 800519c:	e054      	b.n	8005248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519e:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <HAL_RCC_OscConfig+0x478>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fd f872 	bl	800228c <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fd f86e 	bl	800228c <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e045      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051be:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x444>
 80051ca:	e03d      	b.n	8005248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e038      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
 80051d8:	40023800 	.word	0x40023800
 80051dc:	40007000 	.word	0x40007000
 80051e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x4ec>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d028      	beq.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d121      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11a      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800521a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d107      	bne.n	8005244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0cc      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b68      	ldr	r3, [pc, #416]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d90c      	bls.n	8005294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b65      	ldr	r3, [pc, #404]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b63      	ldr	r3, [pc, #396]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0b8      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d020      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052ac:	4b59      	ldr	r3, [pc, #356]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a58      	ldr	r2, [pc, #352]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c4:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a52      	ldr	r2, [pc, #328]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b50      	ldr	r3, [pc, #320]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	494d      	ldr	r1, [pc, #308]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d044      	beq.n	8005378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	4b47      	ldr	r3, [pc, #284]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d119      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e07f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d003      	beq.n	8005316 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005312:	2b03      	cmp	r3, #3
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005316:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e06f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e067      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005336:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f023 0203 	bic.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4934      	ldr	r1, [pc, #208]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005348:	f7fc ffa0 	bl	800228c <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fc ff9c 	bl	800228c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e04f      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 020c 	and.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d1eb      	bne.n	8005350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005378:	4b25      	ldr	r3, [pc, #148]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d20c      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b22      	ldr	r3, [pc, #136]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b20      	ldr	r3, [pc, #128]	@ (8005410 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e032      	b.n	8005406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4916      	ldr	r1, [pc, #88]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ca:	4b12      	ldr	r3, [pc, #72]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	490e      	ldr	r1, [pc, #56]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053de:	f000 f821 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80053e2:	4602      	mov	r2, r0
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	490a      	ldr	r1, [pc, #40]	@ (8005418 <HAL_RCC_ClockConfig+0x1c0>)
 80053f0:	5ccb      	ldrb	r3, [r1, r3]
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	4a09      	ldr	r2, [pc, #36]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053fa:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fc ff00 	bl	8002204 <HAL_InitTick>

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40023c00 	.word	0x40023c00
 8005414:	40023800 	.word	0x40023800
 8005418:	0800da24 	.word	0x0800da24
 800541c:	20000018 	.word	0x20000018
 8005420:	2000001c 	.word	0x2000001c

08005424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005428:	b094      	sub	sp, #80	@ 0x50
 800542a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800543c:	4b79      	ldr	r3, [pc, #484]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d00d      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x40>
 8005448:	2b08      	cmp	r3, #8
 800544a:	f200 80e1 	bhi.w	8005610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x34>
 8005452:	2b04      	cmp	r3, #4
 8005454:	d003      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0x3a>
 8005456:	e0db      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005458:	4b73      	ldr	r3, [pc, #460]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x204>)
 800545a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800545c:	e0db      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800545e:	4b73      	ldr	r3, [pc, #460]	@ (800562c <HAL_RCC_GetSysClockFreq+0x208>)
 8005460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005462:	e0d8      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005464:	4b6f      	ldr	r3, [pc, #444]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800546c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800546e:	4b6d      	ldr	r3, [pc, #436]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d063      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547a:	4b6a      	ldr	r3, [pc, #424]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	099b      	lsrs	r3, r3, #6
 8005480:	2200      	movs	r2, #0
 8005482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	633b      	str	r3, [r7, #48]	@ 0x30
 800548e:	2300      	movs	r3, #0
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
 8005492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005496:	4622      	mov	r2, r4
 8005498:	462b      	mov	r3, r5
 800549a:	f04f 0000 	mov.w	r0, #0
 800549e:	f04f 0100 	mov.w	r1, #0
 80054a2:	0159      	lsls	r1, r3, #5
 80054a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054a8:	0150      	lsls	r0, r2, #5
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4621      	mov	r1, r4
 80054b0:	1a51      	subs	r1, r2, r1
 80054b2:	6139      	str	r1, [r7, #16]
 80054b4:	4629      	mov	r1, r5
 80054b6:	eb63 0301 	sbc.w	r3, r3, r1
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c8:	4659      	mov	r1, fp
 80054ca:	018b      	lsls	r3, r1, #6
 80054cc:	4651      	mov	r1, sl
 80054ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054d2:	4651      	mov	r1, sl
 80054d4:	018a      	lsls	r2, r1, #6
 80054d6:	4651      	mov	r1, sl
 80054d8:	ebb2 0801 	subs.w	r8, r2, r1
 80054dc:	4659      	mov	r1, fp
 80054de:	eb63 0901 	sbc.w	r9, r3, r1
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054f6:	4690      	mov	r8, r2
 80054f8:	4699      	mov	r9, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	eb18 0303 	adds.w	r3, r8, r3
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	462b      	mov	r3, r5
 8005504:	eb49 0303 	adc.w	r3, r9, r3
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005516:	4629      	mov	r1, r5
 8005518:	024b      	lsls	r3, r1, #9
 800551a:	4621      	mov	r1, r4
 800551c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005520:	4621      	mov	r1, r4
 8005522:	024a      	lsls	r2, r1, #9
 8005524:	4610      	mov	r0, r2
 8005526:	4619      	mov	r1, r3
 8005528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552a:	2200      	movs	r2, #0
 800552c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800552e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005534:	f7fb fb38 	bl	8000ba8 <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4613      	mov	r3, r2
 800553e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005540:	e058      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005542:	4b38      	ldr	r3, [pc, #224]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	2200      	movs	r2, #0
 800554a:	4618      	mov	r0, r3
 800554c:	4611      	mov	r1, r2
 800554e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
 8005558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	f04f 0000 	mov.w	r0, #0
 8005564:	f04f 0100 	mov.w	r1, #0
 8005568:	0159      	lsls	r1, r3, #5
 800556a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800556e:	0150      	lsls	r0, r2, #5
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4641      	mov	r1, r8
 8005576:	ebb2 0a01 	subs.w	sl, r2, r1
 800557a:	4649      	mov	r1, r9
 800557c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800558c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005594:	ebb2 040a 	subs.w	r4, r2, sl
 8005598:	eb63 050b 	sbc.w	r5, r3, fp
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	00eb      	lsls	r3, r5, #3
 80055a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055aa:	00e2      	lsls	r2, r4, #3
 80055ac:	4614      	mov	r4, r2
 80055ae:	461d      	mov	r5, r3
 80055b0:	4643      	mov	r3, r8
 80055b2:	18e3      	adds	r3, r4, r3
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	464b      	mov	r3, r9
 80055b8:	eb45 0303 	adc.w	r3, r5, r3
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ca:	4629      	mov	r1, r5
 80055cc:	028b      	lsls	r3, r1, #10
 80055ce:	4621      	mov	r1, r4
 80055d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055d4:	4621      	mov	r1, r4
 80055d6:	028a      	lsls	r2, r1, #10
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055de:	2200      	movs	r2, #0
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	61fa      	str	r2, [r7, #28]
 80055e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e8:	f7fb fade 	bl	8000ba8 <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4613      	mov	r3, r2
 80055f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	3301      	adds	r3, #1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800560e:	e002      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x204>)
 8005612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005618:	4618      	mov	r0, r3
 800561a:	3750      	adds	r7, #80	@ 0x50
 800561c:	46bd      	mov	sp, r7
 800561e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005622:	bf00      	nop
 8005624:	40023800 	.word	0x40023800
 8005628:	00f42400 	.word	0x00f42400
 800562c:	007a1200 	.word	0x007a1200

08005630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005634:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <HAL_RCC_GetHCLKFreq+0x14>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000018 	.word	0x20000018

08005648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800564c:	f7ff fff0 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0a9b      	lsrs	r3, r3, #10
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	@ (800566c <HAL_RCC_GetPCLK1Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	0800da34 	.word	0x0800da34

08005670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005670:	b084      	sub	sp, #16
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	f107 001c 	add.w	r0, r7, #28
 800567e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005682:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005686:	2b01      	cmp	r3, #1
 8005688:	d123      	bne.n	80056d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800569e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d105      	bne.n	80056c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 fae8 	bl	8006c9c <USB_CoreReset>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]
 80056d0:	e01b      	b.n	800570a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f001 fadc 	bl	8006c9c <USB_CoreReset>
 80056e4:	4603      	mov	r3, r0
 80056e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80056fc:	e005      	b.n	800570a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800570a:	7fbb      	ldrb	r3, [r7, #30]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d10b      	bne.n	8005728 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f043 0206 	orr.w	r2, r3, #6
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005734:	b004      	add	sp, #16
 8005736:	4770      	bx	lr

08005738 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d165      	bne.n	8005818 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4a41      	ldr	r2, [pc, #260]	@ (8005854 <USB_SetTurnaroundTime+0x11c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d906      	bls.n	8005762 <USB_SetTurnaroundTime+0x2a>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4a40      	ldr	r2, [pc, #256]	@ (8005858 <USB_SetTurnaroundTime+0x120>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d202      	bcs.n	8005762 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800575c:	230f      	movs	r3, #15
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e062      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4a3c      	ldr	r2, [pc, #240]	@ (8005858 <USB_SetTurnaroundTime+0x120>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d306      	bcc.n	8005778 <USB_SetTurnaroundTime+0x40>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4a3b      	ldr	r2, [pc, #236]	@ (800585c <USB_SetTurnaroundTime+0x124>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d202      	bcs.n	8005778 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005772:	230e      	movs	r3, #14
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e057      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4a38      	ldr	r2, [pc, #224]	@ (800585c <USB_SetTurnaroundTime+0x124>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d306      	bcc.n	800578e <USB_SetTurnaroundTime+0x56>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4a37      	ldr	r2, [pc, #220]	@ (8005860 <USB_SetTurnaroundTime+0x128>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d202      	bcs.n	800578e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005788:	230d      	movs	r3, #13
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e04c      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4a33      	ldr	r2, [pc, #204]	@ (8005860 <USB_SetTurnaroundTime+0x128>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d306      	bcc.n	80057a4 <USB_SetTurnaroundTime+0x6c>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4a32      	ldr	r2, [pc, #200]	@ (8005864 <USB_SetTurnaroundTime+0x12c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d802      	bhi.n	80057a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800579e:	230c      	movs	r3, #12
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e041      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005864 <USB_SetTurnaroundTime+0x12c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d906      	bls.n	80057ba <USB_SetTurnaroundTime+0x82>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005868 <USB_SetTurnaroundTime+0x130>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d802      	bhi.n	80057ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057b4:	230b      	movs	r3, #11
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e036      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005868 <USB_SetTurnaroundTime+0x130>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d906      	bls.n	80057d0 <USB_SetTurnaroundTime+0x98>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4a29      	ldr	r2, [pc, #164]	@ (800586c <USB_SetTurnaroundTime+0x134>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d802      	bhi.n	80057d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057ca:	230a      	movs	r3, #10
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e02b      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a26      	ldr	r2, [pc, #152]	@ (800586c <USB_SetTurnaroundTime+0x134>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d906      	bls.n	80057e6 <USB_SetTurnaroundTime+0xae>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a25      	ldr	r2, [pc, #148]	@ (8005870 <USB_SetTurnaroundTime+0x138>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d202      	bcs.n	80057e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057e0:	2309      	movs	r3, #9
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e020      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a21      	ldr	r2, [pc, #132]	@ (8005870 <USB_SetTurnaroundTime+0x138>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d306      	bcc.n	80057fc <USB_SetTurnaroundTime+0xc4>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a20      	ldr	r2, [pc, #128]	@ (8005874 <USB_SetTurnaroundTime+0x13c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d802      	bhi.n	80057fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057f6:	2308      	movs	r3, #8
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e015      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005874 <USB_SetTurnaroundTime+0x13c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d906      	bls.n	8005812 <USB_SetTurnaroundTime+0xda>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <USB_SetTurnaroundTime+0x140>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d202      	bcs.n	8005812 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800580c:	2307      	movs	r3, #7
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e00a      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005812:	2306      	movs	r3, #6
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e007      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800581e:	2309      	movs	r3, #9
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e001      	b.n	8005828 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005824:	2309      	movs	r3, #9
 8005826:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	00d8acbf 	.word	0x00d8acbf
 8005858:	00e4e1c0 	.word	0x00e4e1c0
 800585c:	00f42400 	.word	0x00f42400
 8005860:	01067380 	.word	0x01067380
 8005864:	011a499f 	.word	0x011a499f
 8005868:	01312cff 	.word	0x01312cff
 800586c:	014ca43f 	.word	0x014ca43f
 8005870:	016e3600 	.word	0x016e3600
 8005874:	01a6ab1f 	.word	0x01a6ab1f
 8005878:	01e84800 	.word	0x01e84800

0800587c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f043 0201 	orr.w	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d115      	bne.n	800590e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058ee:	200a      	movs	r0, #10
 80058f0:	f7fc fcd8 	bl	80022a4 <HAL_Delay>
      ms += 10U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	330a      	adds	r3, #10
 80058f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 f93f 	bl	8006b7e <USB_GetMode>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d01e      	beq.n	8005944 <USB_SetCurrentMode+0x84>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2bc7      	cmp	r3, #199	@ 0xc7
 800590a:	d9f0      	bls.n	80058ee <USB_SetCurrentMode+0x2e>
 800590c:	e01a      	b.n	8005944 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d115      	bne.n	8005940 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005920:	200a      	movs	r0, #10
 8005922:	f7fc fcbf 	bl	80022a4 <HAL_Delay>
      ms += 10U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	330a      	adds	r3, #10
 800592a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 f926 	bl	8006b7e <USB_GetMode>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <USB_SetCurrentMode+0x84>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2bc7      	cmp	r3, #199	@ 0xc7
 800593c:	d9f0      	bls.n	8005920 <USB_SetCurrentMode+0x60>
 800593e:	e001      	b.n	8005944 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e005      	b.n	8005950 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2bc8      	cmp	r3, #200	@ 0xc8
 8005948:	d101      	bne.n	800594e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005958:	b084      	sub	sp, #16
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e009      	b.n	800598c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3340      	adds	r3, #64	@ 0x40
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	2200      	movs	r2, #0
 8005984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3301      	adds	r3, #1
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b0e      	cmp	r3, #14
 8005990:	d9f2      	bls.n	8005978 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005992:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11c      	bne.n	80059d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a8:	f043 0302 	orr.w	r3, r3, #2
 80059ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80059d2:	e00b      	b.n	80059ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10d      	bne.n	8005a1c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f968 	bl	8005ce0 <USB_SetDevSpeed>
 8005a10:	e008      	b.n	8005a24 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a12:	2101      	movs	r1, #1
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f963 	bl	8005ce0 <USB_SetDevSpeed>
 8005a1a:	e003      	b.n	8005a24 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a1c:	2103      	movs	r1, #3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f95e 	bl	8005ce0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a24:	2110      	movs	r1, #16
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f8fa 	bl	8005c20 <USB_FlushTxFifo>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f924 	bl	8005c84 <USB_FlushRxFifo>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	e043      	b.n	8005af8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a86:	d118      	bne.n	8005aba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e013      	b.n	8005acc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	e008      	b.n	8005acc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2300      	movs	r3, #0
 8005adc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aea:	461a      	mov	r2, r3
 8005aec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005af0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3301      	adds	r3, #1
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005afc:	461a      	mov	r2, r3
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d3b5      	bcc.n	8005a70 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	e043      	b.n	8005b92 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b20:	d118      	bne.n	8005b54 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e013      	b.n	8005b66 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e008      	b.n	8005b66 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b60:	461a      	mov	r2, r3
 8005b62:	2300      	movs	r3, #0
 8005b64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b72:	461a      	mov	r2, r3
 8005b74:	2300      	movs	r3, #0
 8005b76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b84:	461a      	mov	r2, r3
 8005b86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b96:	461a      	mov	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d3b5      	bcc.n	8005b0a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005bbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d105      	bne.n	8005bd4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f043 0210 	orr.w	r2, r3, #16
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	4b10      	ldr	r3, [pc, #64]	@ (8005c1c <USB_DevInit+0x2c4>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005be0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f043 0208 	orr.w	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bf4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d107      	bne.n	8005c0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c04:	f043 0304 	orr.w	r3, r3, #4
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c18:	b004      	add	sp, #16
 8005c1a:	4770      	bx	lr
 8005c1c:	803c3800 	.word	0x803c3800

08005c20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c3a:	d901      	bls.n	8005c40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e01b      	b.n	8005c78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	daf2      	bge.n	8005c2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	019b      	lsls	r3, r3, #6
 8005c50:	f043 0220 	orr.w	r2, r3, #32
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c64:	d901      	bls.n	8005c6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e006      	b.n	8005c78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d0f0      	beq.n	8005c58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c9c:	d901      	bls.n	8005ca2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e018      	b.n	8005cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	daf2      	bge.n	8005c90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cc0:	d901      	bls.n	8005cc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e006      	b.n	8005cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d0f0      	beq.n	8005cb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d00:	4313      	orrs	r3, r2
 8005d02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b087      	sub	sp, #28
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0306 	and.w	r3, r3, #6
 8005d2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]
 8005d36:	e00a      	b.n	8005d4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d002      	beq.n	8005d44 <USB_GetDevSpeed+0x32>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d102      	bne.n	8005d4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d44:	2302      	movs	r3, #2
 8005d46:	75fb      	strb	r3, [r7, #23]
 8005d48:	e001      	b.n	8005d4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d4a:	230f      	movs	r3, #15
 8005d4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d13a      	bne.n	8005dee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	2101      	movs	r1, #1
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	68f9      	ldr	r1, [r7, #12]
 8005d92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d155      	bne.n	8005e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	791b      	ldrb	r3, [r3, #4]
 8005dca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e036      	b.n	8005e5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	2101      	movs	r1, #1
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	041b      	lsls	r3, r3, #16
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d11a      	bne.n	8005e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e42:	430b      	orrs	r3, r1
 8005e44:	4313      	orrs	r3, r2
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d161      	bne.n	8005f4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e9e:	d11f      	bne.n	8005ee0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ebe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f00:	4013      	ands	r3, r2
 8005f02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	2101      	movs	r1, #1
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f24:	4013      	ands	r3, r2
 8005f26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	0159      	lsls	r1, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	440b      	add	r3, r1
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f42:	4619      	mov	r1, r3
 8005f44:	4b35      	ldr	r3, [pc, #212]	@ (800601c <USB_DeactivateEndpoint+0x1b0>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]
 8005f4a:	e060      	b.n	800600e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f62:	d11f      	bne.n	8005fa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	2101      	movs	r1, #1
 8005fda:	fa01 f303 	lsl.w	r3, r1, r3
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	68f9      	ldr	r1, [r7, #12]
 8005fe4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fe8:	4013      	ands	r3, r2
 8005fea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	0159      	lsls	r1, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	440b      	add	r3, r1
 8006002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006006:	4619      	mov	r1, r3
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <USB_DeactivateEndpoint+0x1b4>)
 800600a:	4013      	ands	r3, r2
 800600c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	ec337800 	.word	0xec337800
 8006020:	eff37800 	.word	0xeff37800

08006024 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	@ 0x28
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 817f 	bne.w	8006344 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d132      	bne.n	80060b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006068:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800606c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800608c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ac:	0cdb      	lsrs	r3, r3, #19
 80060ae:	04db      	lsls	r3, r3, #19
 80060b0:	6113      	str	r3, [r2, #16]
 80060b2:	e097      	b.n	80061e4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ce:	0cdb      	lsrs	r3, r3, #19
 80060d0:	04db      	lsls	r3, r3, #19
 80060d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11a      	bne.n	8006134 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d903      	bls.n	8006112 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800612c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006130:	6113      	str	r3, [r2, #16]
 8006132:	e044      	b.n	80061be <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4413      	add	r3, r2
 800613e:	1e5a      	subs	r2, r3, #1
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	8afb      	ldrh	r3, [r7, #22]
 800615a:	04d9      	lsls	r1, r3, #19
 800615c:	4ba4      	ldr	r3, [pc, #656]	@ (80063f0 <USB_EPStartXfer+0x3cc>)
 800615e:	400b      	ands	r3, r1
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	0148      	lsls	r0, r1, #5
 8006164:	69f9      	ldr	r1, [r7, #28]
 8006166:	4401      	add	r1, r0
 8006168:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800616c:	4313      	orrs	r3, r2
 800616e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d122      	bne.n	80061be <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006192:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006196:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	8afb      	ldrh	r3, [r7, #22]
 80061a8:	075b      	lsls	r3, r3, #29
 80061aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80061ae:	69b9      	ldr	r1, [r7, #24]
 80061b0:	0148      	lsls	r0, r1, #5
 80061b2:	69f9      	ldr	r1, [r7, #28]
 80061b4:	4401      	add	r1, r0
 80061b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061ba:	4313      	orrs	r3, r2
 80061bc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	0148      	lsls	r0, r1, #5
 80061d8:	69f9      	ldr	r1, [r7, #28]
 80061da:	4401      	add	r1, r0
 80061dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061e0:	4313      	orrs	r3, r2
 80061e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d14b      	bne.n	8006282 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061fe:	461a      	mov	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	791b      	ldrb	r3, [r3, #4]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d128      	bne.n	8006260 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d110      	bne.n	8006240 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006238:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e00f      	b.n	8006260 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800625a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800625e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800627a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	e166      	b.n	8006550 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800629c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d015      	beq.n	80062d6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 814e 	beq.w	8006550 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	69f9      	ldr	r1, [r7, #28]
 80062cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062d0:	4313      	orrs	r3, r2
 80062d2:	634b      	str	r3, [r1, #52]	@ 0x34
 80062d4:	e13c      	b.n	8006550 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d110      	bne.n	8006308 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e00f      	b.n	8006328 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006326:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	68d9      	ldr	r1, [r3, #12]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	b298      	uxth	r0, r3
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	4603      	mov	r3, r0
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f9b9 	bl	80066b4 <USB_WritePacket>
 8006342:	e105      	b.n	8006550 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800635e:	0cdb      	lsrs	r3, r3, #19
 8006360:	04db      	lsls	r3, r3, #19
 8006362:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800637e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006382:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006386:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d132      	bne.n	80063f4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063bc:	69b9      	ldr	r1, [r7, #24]
 80063be:	0148      	lsls	r0, r1, #5
 80063c0:	69f9      	ldr	r1, [r7, #28]
 80063c2:	4401      	add	r1, r0
 80063c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063c8:	4313      	orrs	r3, r2
 80063ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063ea:	6113      	str	r3, [r2, #16]
 80063ec:	e062      	b.n	80064b4 <USB_EPStartXfer+0x490>
 80063ee:	bf00      	nop
 80063f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d123      	bne.n	8006444 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006412:	69b9      	ldr	r1, [r7, #24]
 8006414:	0148      	lsls	r0, r1, #5
 8006416:	69f9      	ldr	r1, [r7, #28]
 8006418:	4401      	add	r1, r0
 800641a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800641e:	4313      	orrs	r3, r2
 8006420:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	440a      	add	r2, r1
 8006438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800643c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006440:	6113      	str	r3, [r2, #16]
 8006442:	e037      	b.n	80064b4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4413      	add	r3, r2
 800644e:	1e5a      	subs	r2, r3, #1
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	8afa      	ldrh	r2, [r7, #22]
 8006460:	fb03 f202 	mul.w	r2, r3, r2
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	8afb      	ldrh	r3, [r7, #22]
 8006478:	04d9      	lsls	r1, r3, #19
 800647a:	4b38      	ldr	r3, [pc, #224]	@ (800655c <USB_EPStartXfer+0x538>)
 800647c:	400b      	ands	r3, r1
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	0148      	lsls	r0, r1, #5
 8006482:	69f9      	ldr	r1, [r7, #28]
 8006484:	4401      	add	r1, r0
 8006486:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800648a:	4313      	orrs	r3, r2
 800648c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	0148      	lsls	r0, r1, #5
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	4401      	add	r1, r0
 80064ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064b0:	4313      	orrs	r3, r2
 80064b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d10d      	bne.n	80064d6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	68d9      	ldr	r1, [r3, #12]
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d2:	460a      	mov	r2, r1
 80064d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	791b      	ldrb	r3, [r3, #4]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d128      	bne.n	8006530 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d110      	bne.n	8006510 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	440a      	add	r2, r1
 8006504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e00f      	b.n	8006530 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800654a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800654e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	1ff80000 	.word	0x1ff80000

08006560 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d14a      	bne.n	8006614 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006592:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006596:	f040 8086 	bne.w	80066a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	7812      	ldrb	r2, [r2, #0]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	7812      	ldrb	r2, [r2, #0]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d902      	bls.n	80065f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
          break;
 80065f6:	e056      	b.n	80066a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800660c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006610:	d0e7      	beq.n	80065e2 <USB_EPStopXfer+0x82>
 8006612:	e048      	b.n	80066a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800662c:	d13b      	bne.n	80066a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	7812      	ldrb	r2, [r2, #0]
 8006642:	0151      	lsls	r1, r2, #5
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	440a      	add	r2, r1
 8006648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800664c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006650:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006682:	4293      	cmp	r3, r2
 8006684:	d902      	bls.n	800668c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
          break;
 800668a:	e00c      	b.n	80066a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066a4:	d0e7      	beq.n	8006676 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	@ 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	4611      	mov	r1, r2
 80066c0:	461a      	mov	r2, r3
 80066c2:	460b      	mov	r3, r1
 80066c4:	71fb      	strb	r3, [r7, #7]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d123      	bne.n	8006722 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066da:	88bb      	ldrh	r3, [r7, #4]
 80066dc:	3303      	adds	r3, #3
 80066de:	089b      	lsrs	r3, r3, #2
 80066e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066e2:	2300      	movs	r3, #0
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e018      	b.n	800671a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	031a      	lsls	r2, r3, #12
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f4:	461a      	mov	r2, r3
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3301      	adds	r3, #1
 8006700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	3301      	adds	r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3301      	adds	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3301      	adds	r3, #1
 8006712:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	3301      	adds	r3, #1
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	429a      	cmp	r2, r3
 8006720:	d3e2      	bcc.n	80066e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3724      	adds	r7, #36	@ 0x24
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006730:	b480      	push	{r7}
 8006732:	b08b      	sub	sp, #44	@ 0x2c
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	089b      	lsrs	r3, r3, #2
 800674a:	b29b      	uxth	r3, r3
 800674c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006756:	2300      	movs	r3, #0
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	e014      	b.n	8006786 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	601a      	str	r2, [r3, #0]
    pDest++;
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	3301      	adds	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	3301      	adds	r3, #1
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	3301      	adds	r3, #1
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	3301      	adds	r3, #1
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	3301      	adds	r3, #1
 8006784:	623b      	str	r3, [r7, #32]
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	429a      	cmp	r2, r3
 800678c:	d3e6      	bcc.n	800675c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800678e:	8bfb      	ldrh	r3, [r7, #30]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01e      	beq.n	80067d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679e:	461a      	mov	r2, r3
 80067a0:	f107 0310 	add.w	r3, r7, #16
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	701a      	strb	r2, [r3, #0]
      i++;
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	3301      	adds	r3, #1
 80067be:	623b      	str	r3, [r7, #32]
      pDest++;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	3301      	adds	r3, #1
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80067c6:	8bfb      	ldrh	r3, [r7, #30]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067cc:	8bfb      	ldrh	r3, [r7, #30]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1ea      	bne.n	80067a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	372c      	adds	r7, #44	@ 0x2c
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d12c      	bne.n	8006856 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	db12      	blt.n	8006834 <USB_EPSetStall+0x54>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00f      	beq.n	8006834 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800682e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006832:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800684e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e02b      	b.n	80068ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	db12      	blt.n	800688e <USB_EPSetStall+0xae>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00f      	beq.n	800688e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800688c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d128      	bne.n	800692a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	791b      	ldrb	r3, [r3, #4]
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d003      	beq.n	8006908 <USB_EPClearStall+0x4c>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	791b      	ldrb	r3, [r3, #4]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d138      	bne.n	800697a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	e027      	b.n	800697a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006944:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006948:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	791b      	ldrb	r3, [r3, #4]
 800694e:	2b03      	cmp	r3, #3
 8006950:	d003      	beq.n	800695a <USB_EPClearStall+0x9e>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	791b      	ldrb	r3, [r3, #4]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d10f      	bne.n	800697a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006978:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80069aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069ee:	f023 0303 	bic.w	r3, r3, #3
 80069f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a02:	f023 0302 	bic.w	r3, r3, #2
 8006a06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a30:	f023 0303 	bic.w	r3, r3, #3
 8006a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a70:	68fb      	ldr	r3, [r7, #12]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0c1b      	lsrs	r3, r3, #16
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	b29b      	uxth	r3, r3
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	460b      	mov	r3, r1
 8006af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4013      	ands	r3, r2
 8006b12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b14:	68bb      	ldr	r3, [r7, #8]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b087      	sub	sp, #28
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b52:	01db      	lsls	r3, r3, #7
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b70:	68bb      	ldr	r3, [r7, #8]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006bb8:	f023 0307 	bic.w	r3, r3, #7
 8006bbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	460b      	mov	r3, r1
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	333c      	adds	r3, #60	@ 0x3c
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4a26      	ldr	r2, [pc, #152]	@ (8006c98 <USB_EP0_OutStart+0xb8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d90a      	bls.n	8006c1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c14:	d101      	bne.n	8006c1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e037      	b.n	8006c8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c20:	461a      	mov	r2, r3
 8006c22:	2300      	movs	r3, #0
 8006c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c48:	f043 0318 	orr.w	r3, r3, #24
 8006c4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d10f      	bne.n	8006c88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	4f54300a 	.word	0x4f54300a

08006c9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cb4:	d901      	bls.n	8006cba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e01b      	b.n	8006cf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	daf2      	bge.n	8006ca8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f043 0201 	orr.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cde:	d901      	bls.n	8006ce4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e006      	b.n	8006cf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d0f0      	beq.n	8006cd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006d10:	f002 fcc2 	bl	8009698 <USBD_static_malloc>
 8006d14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32b0      	adds	r2, #176	@ 0xb0
 8006d26:	2100      	movs	r1, #0
 8006d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e0d4      	b.n	8006eda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006d34:	2100      	movs	r1, #0
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f003 fa83 	bl	800a242 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32b0      	adds	r2, #176	@ 0xb0
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32b0      	adds	r2, #176	@ 0xb0
 8006d56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	7c1b      	ldrb	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d138      	bne.n	8006dda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d68:	4b5e      	ldr	r3, [pc, #376]	@ (8006ee4 <USBD_CDC_Init+0x1e4>)
 8006d6a:	7819      	ldrb	r1, [r3, #0]
 8006d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d70:	2202      	movs	r2, #2
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f002 fb6d 	bl	8009452 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d78:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee4 <USBD_CDC_Init+0x1e4>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3324      	adds	r3, #36	@ 0x24
 8006d8e:	2201      	movs	r2, #1
 8006d90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d92:	4b55      	ldr	r3, [pc, #340]	@ (8006ee8 <USBD_CDC_Init+0x1e8>)
 8006d94:	7819      	ldrb	r1, [r3, #0]
 8006d96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f002 fb58 	bl	8009452 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006da2:	4b51      	ldr	r3, [pc, #324]	@ (8006ee8 <USBD_CDC_Init+0x1e8>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dba:	2201      	movs	r2, #1
 8006dbc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8006eec <USBD_CDC_Init+0x1ec>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f003 020f 	and.w	r2, r3, #15
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	3326      	adds	r3, #38	@ 0x26
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	e035      	b.n	8006e46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dda:	4b42      	ldr	r3, [pc, #264]	@ (8006ee4 <USBD_CDC_Init+0x1e4>)
 8006ddc:	7819      	ldrb	r1, [r3, #0]
 8006dde:	2340      	movs	r3, #64	@ 0x40
 8006de0:	2202      	movs	r2, #2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 fb35 	bl	8009452 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006de8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee4 <USBD_CDC_Init+0x1e4>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3324      	adds	r3, #36	@ 0x24
 8006dfe:	2201      	movs	r2, #1
 8006e00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e02:	4b39      	ldr	r3, [pc, #228]	@ (8006ee8 <USBD_CDC_Init+0x1e8>)
 8006e04:	7819      	ldrb	r1, [r3, #0]
 8006e06:	2340      	movs	r3, #64	@ 0x40
 8006e08:	2202      	movs	r2, #2
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f002 fb21 	bl	8009452 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e10:	4b35      	ldr	r3, [pc, #212]	@ (8006ee8 <USBD_CDC_Init+0x1e8>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e28:	2201      	movs	r2, #1
 8006e2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8006eec <USBD_CDC_Init+0x1ec>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 020f 	and.w	r2, r3, #15
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	3326      	adds	r3, #38	@ 0x26
 8006e42:	2210      	movs	r2, #16
 8006e44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e46:	4b29      	ldr	r3, [pc, #164]	@ (8006eec <USBD_CDC_Init+0x1ec>)
 8006e48:	7819      	ldrb	r1, [r3, #0]
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f002 faff 	bl	8009452 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e54:	4b25      	ldr	r3, [pc, #148]	@ (8006eec <USBD_CDC_Init+0x1ec>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3324      	adds	r3, #36	@ 0x24
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	33b0      	adds	r3, #176	@ 0xb0
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e018      	b.n	8006eda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7c1b      	ldrb	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <USBD_CDC_Init+0x1e8>)
 8006eb2:	7819      	ldrb	r1, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 fbb6 	bl	8009630 <USBD_LL_PrepareReceive>
 8006ec4:	e008      	b.n	8006ed8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ec6:	4b08      	ldr	r3, [pc, #32]	@ (8006ee8 <USBD_CDC_Init+0x1e8>)
 8006ec8:	7819      	ldrb	r1, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ed0:	2340      	movs	r3, #64	@ 0x40
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f002 fbac 	bl	8009630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	200000ab 	.word	0x200000ab
 8006ee8:	200000ac 	.word	0x200000ac
 8006eec:	200000ad 	.word	0x200000ad

08006ef0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006efc:	4b3a      	ldr	r3, [pc, #232]	@ (8006fe8 <USBD_CDC_DeInit+0xf8>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f002 facb 	bl	800949e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f08:	4b37      	ldr	r3, [pc, #220]	@ (8006fe8 <USBD_CDC_DeInit+0xf8>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f003 020f 	and.w	r2, r3, #15
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	3324      	adds	r3, #36	@ 0x24
 8006f1e:	2200      	movs	r2, #0
 8006f20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f22:	4b32      	ldr	r3, [pc, #200]	@ (8006fec <USBD_CDC_DeInit+0xfc>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f002 fab8 	bl	800949e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8006fec <USBD_CDC_DeInit+0xfc>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	f003 020f 	and.w	r2, r3, #15
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f46:	2200      	movs	r2, #0
 8006f48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f4a:	4b29      	ldr	r3, [pc, #164]	@ (8006ff0 <USBD_CDC_DeInit+0x100>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f002 faa4 	bl	800949e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f56:	4b26      	ldr	r3, [pc, #152]	@ (8006ff0 <USBD_CDC_DeInit+0x100>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	3324      	adds	r3, #36	@ 0x24
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f70:	4b1f      	ldr	r3, [pc, #124]	@ (8006ff0 <USBD_CDC_DeInit+0x100>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	3326      	adds	r3, #38	@ 0x26
 8006f86:	2200      	movs	r2, #0
 8006f88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	32b0      	adds	r2, #176	@ 0xb0
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01f      	beq.n	8006fdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	33b0      	adds	r3, #176	@ 0xb0
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	32b0      	adds	r2, #176	@ 0xb0
 8006fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 fb78 	bl	80096b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	32b0      	adds	r2, #176	@ 0xb0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200000ab 	.word	0x200000ab
 8006fec:	200000ac 	.word	0x200000ac
 8006ff0:	200000ad 	.word	0x200000ad

08006ff4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	32b0      	adds	r2, #176	@ 0xb0
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	e0bf      	b.n	80071a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800702c:	2b00      	cmp	r3, #0
 800702e:	d050      	beq.n	80070d2 <USBD_CDC_Setup+0xde>
 8007030:	2b20      	cmp	r3, #32
 8007032:	f040 80af 	bne.w	8007194 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	88db      	ldrh	r3, [r3, #6]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d03a      	beq.n	80070b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b25b      	sxtb	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	da1b      	bge.n	8007080 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	33b0      	adds	r3, #176	@ 0xb0
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800705e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	88d2      	ldrh	r2, [r2, #6]
 8007064:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	88db      	ldrh	r3, [r3, #6]
 800706a:	2b07      	cmp	r3, #7
 800706c:	bf28      	it	cs
 800706e:	2307      	movcs	r3, #7
 8007070:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	89fa      	ldrh	r2, [r7, #14]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 fd93 	bl	8008ba4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800707e:	e090      	b.n	80071a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	785a      	ldrb	r2, [r3, #1]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	88db      	ldrh	r3, [r3, #6]
 800708e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007090:	d803      	bhi.n	800709a <USBD_CDC_Setup+0xa6>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	88db      	ldrh	r3, [r3, #6]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	e000      	b.n	800709c <USBD_CDC_Setup+0xa8>
 800709a:	2240      	movs	r2, #64	@ 0x40
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070a2:	6939      	ldr	r1, [r7, #16]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80070aa:	461a      	mov	r2, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 fda5 	bl	8008bfc <USBD_CtlPrepareRx>
      break;
 80070b2:	e076      	b.n	80071a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	33b0      	adds	r3, #176	@ 0xb0
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	7850      	ldrb	r0, [r2, #1]
 80070ca:	2200      	movs	r2, #0
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	4798      	blx	r3
      break;
 80070d0:	e067      	b.n	80071a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	2b0b      	cmp	r3, #11
 80070d8:	d851      	bhi.n	800717e <USBD_CDC_Setup+0x18a>
 80070da:	a201      	add	r2, pc, #4	@ (adr r2, 80070e0 <USBD_CDC_Setup+0xec>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	08007111 	.word	0x08007111
 80070e4:	0800718d 	.word	0x0800718d
 80070e8:	0800717f 	.word	0x0800717f
 80070ec:	0800717f 	.word	0x0800717f
 80070f0:	0800717f 	.word	0x0800717f
 80070f4:	0800717f 	.word	0x0800717f
 80070f8:	0800717f 	.word	0x0800717f
 80070fc:	0800717f 	.word	0x0800717f
 8007100:	0800717f 	.word	0x0800717f
 8007104:	0800717f 	.word	0x0800717f
 8007108:	0800713b 	.word	0x0800713b
 800710c:	08007165 	.word	0x08007165
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b03      	cmp	r3, #3
 800711a:	d107      	bne.n	800712c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800711c:	f107 030a 	add.w	r3, r7, #10
 8007120:	2202      	movs	r2, #2
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 fd3d 	bl	8008ba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800712a:	e032      	b.n	8007192 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fcbb 	bl	8008aaa <USBD_CtlError>
            ret = USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	75fb      	strb	r3, [r7, #23]
          break;
 8007138:	e02b      	b.n	8007192 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b03      	cmp	r3, #3
 8007144:	d107      	bne.n	8007156 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007146:	f107 030d 	add.w	r3, r7, #13
 800714a:	2201      	movs	r2, #1
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fd28 	bl	8008ba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007154:	e01d      	b.n	8007192 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fca6 	bl	8008aaa <USBD_CtlError>
            ret = USBD_FAIL;
 800715e:	2303      	movs	r3, #3
 8007160:	75fb      	strb	r3, [r7, #23]
          break;
 8007162:	e016      	b.n	8007192 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b03      	cmp	r3, #3
 800716e:	d00f      	beq.n	8007190 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fc99 	bl	8008aaa <USBD_CtlError>
            ret = USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800717c:	e008      	b.n	8007190 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fc92 	bl	8008aaa <USBD_CtlError>
          ret = USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	75fb      	strb	r3, [r7, #23]
          break;
 800718a:	e002      	b.n	8007192 <USBD_CDC_Setup+0x19e>
          break;
 800718c:	bf00      	nop
 800718e:	e008      	b.n	80071a2 <USBD_CDC_Setup+0x1ae>
          break;
 8007190:	bf00      	nop
      }
      break;
 8007192:	e006      	b.n	80071a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fc87 	bl	8008aaa <USBD_CtlError>
      ret = USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	75fb      	strb	r3, [r7, #23]
      break;
 80071a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	32b0      	adds	r2, #176	@ 0xb0
 80071ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e065      	b.n	80072a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32b0      	adds	r2, #176	@ 0xb0
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	f003 020f 	and.w	r2, r3, #15
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	3318      	adds	r3, #24
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d02f      	beq.n	8007260 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	f003 020f 	and.w	r2, r3, #15
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	440b      	add	r3, r1
 8007212:	3318      	adds	r3, #24
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	f003 010f 	and.w	r1, r3, #15
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	460b      	mov	r3, r1
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	440b      	add	r3, r1
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4403      	add	r3, r0
 8007228:	331c      	adds	r3, #28
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007236:	2b00      	cmp	r3, #0
 8007238:	d112      	bne.n	8007260 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	3318      	adds	r3, #24
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007252:	78f9      	ldrb	r1, [r7, #3]
 8007254:	2300      	movs	r3, #0
 8007256:	2200      	movs	r2, #0
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f002 f9c8 	bl	80095ee <USBD_LL_Transmit>
 800725e:	e01f      	b.n	80072a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	33b0      	adds	r3, #176	@ 0xb0
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d010      	beq.n	80072a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	33b0      	adds	r3, #176	@ 0xb0
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800729c:	78fa      	ldrb	r2, [r7, #3]
 800729e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	32b0      	adds	r2, #176	@ 0xb0
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	32b0      	adds	r2, #176	@ 0xb0
 80072d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072d8:	2303      	movs	r3, #3
 80072da:	e01a      	b.n	8007312 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f002 f9c6 	bl	8009672 <USBD_LL_GetRxDataSize>
 80072e6:	4602      	mov	r2, r0
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	33b0      	adds	r3, #176	@ 0xb0
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800730c:	4611      	mov	r1, r2
 800730e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	32b0      	adds	r2, #176	@ 0xb0
 800732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007330:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	e024      	b.n	8007386 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	33b0      	adds	r3, #176	@ 0xb0
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d019      	beq.n	8007384 <USBD_CDC_EP0_RxReady+0x6a>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007356:	2bff      	cmp	r3, #255	@ 0xff
 8007358:	d014      	beq.n	8007384 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	33b0      	adds	r3, #176	@ 0xb0
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007372:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800737a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	22ff      	movs	r2, #255	@ 0xff
 8007380:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007398:	2182      	movs	r1, #130	@ 0x82
 800739a:	4818      	ldr	r0, [pc, #96]	@ (80073fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800739c:	f000 fd4f 	bl	8007e3e <USBD_GetEpDesc>
 80073a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073a2:	2101      	movs	r1, #1
 80073a4:	4815      	ldr	r0, [pc, #84]	@ (80073fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073a6:	f000 fd4a 	bl	8007e3e <USBD_GetEpDesc>
 80073aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073ac:	2181      	movs	r1, #129	@ 0x81
 80073ae:	4813      	ldr	r0, [pc, #76]	@ (80073fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073b0:	f000 fd45 	bl	8007e3e <USBD_GetEpDesc>
 80073b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2210      	movs	r2, #16
 80073c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d006      	beq.n	80073d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073d0:	711a      	strb	r2, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d006      	beq.n	80073ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073e4:	711a      	strb	r2, [r3, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2243      	movs	r2, #67	@ 0x43
 80073ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073f0:	4b02      	ldr	r3, [pc, #8]	@ (80073fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000068 	.word	0x20000068

08007400 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007408:	2182      	movs	r1, #130	@ 0x82
 800740a:	4818      	ldr	r0, [pc, #96]	@ (800746c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800740c:	f000 fd17 	bl	8007e3e <USBD_GetEpDesc>
 8007410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007412:	2101      	movs	r1, #1
 8007414:	4815      	ldr	r0, [pc, #84]	@ (800746c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007416:	f000 fd12 	bl	8007e3e <USBD_GetEpDesc>
 800741a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800741c:	2181      	movs	r1, #129	@ 0x81
 800741e:	4813      	ldr	r0, [pc, #76]	@ (800746c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007420:	f000 fd0d 	bl	8007e3e <USBD_GetEpDesc>
 8007424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2210      	movs	r2, #16
 8007430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2200      	movs	r2, #0
 800743c:	711a      	strb	r2, [r3, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f042 0202 	orr.w	r2, r2, #2
 8007444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d006      	beq.n	800745a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	711a      	strb	r2, [r3, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f042 0202 	orr.w	r2, r2, #2
 8007458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2243      	movs	r2, #67	@ 0x43
 800745e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007460:	4b02      	ldr	r3, [pc, #8]	@ (800746c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000068 	.word	0x20000068

08007470 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007478:	2182      	movs	r1, #130	@ 0x82
 800747a:	4818      	ldr	r0, [pc, #96]	@ (80074dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800747c:	f000 fcdf 	bl	8007e3e <USBD_GetEpDesc>
 8007480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007482:	2101      	movs	r1, #1
 8007484:	4815      	ldr	r0, [pc, #84]	@ (80074dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007486:	f000 fcda 	bl	8007e3e <USBD_GetEpDesc>
 800748a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800748c:	2181      	movs	r1, #129	@ 0x81
 800748e:	4813      	ldr	r0, [pc, #76]	@ (80074dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007490:	f000 fcd5 	bl	8007e3e <USBD_GetEpDesc>
 8007494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2210      	movs	r2, #16
 80074a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d006      	beq.n	80074b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074b0:	711a      	strb	r2, [r3, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c4:	711a      	strb	r2, [r3, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2243      	movs	r2, #67	@ 0x43
 80074ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074d0:	4b02      	ldr	r3, [pc, #8]	@ (80074dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000068 	.word	0x20000068

080074e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	220a      	movs	r2, #10
 80074ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074ee:	4b03      	ldr	r3, [pc, #12]	@ (80074fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20000024 	.word	0x20000024

08007500 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	e009      	b.n	8007528 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	33b0      	adds	r3, #176	@ 0xb0
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	32b0      	adds	r2, #176	@ 0xb0
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007556:	2303      	movs	r3, #3
 8007558:	e008      	b.n	800756c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32b0      	adds	r2, #176	@ 0xb0
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007598:	2303      	movs	r3, #3
 800759a:	e004      	b.n	80075a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32b0      	adds	r2, #176	@ 0xb0
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80075cc:	2301      	movs	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e025      	b.n	8007626 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d11f      	bne.n	8007624 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075ec:	4b10      	ldr	r3, [pc, #64]	@ (8007630 <USBD_CDC_TransmitPacket+0x7c>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 020f 	and.w	r2, r3, #15
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4403      	add	r3, r0
 8007606:	3318      	adds	r3, #24
 8007608:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <USBD_CDC_TransmitPacket+0x7c>)
 800760c:	7819      	ldrb	r1, [r3, #0]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 ffe7 	bl	80095ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	200000ab 	.word	0x200000ab

08007634 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32b0      	adds	r2, #176	@ 0xb0
 8007646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32b0      	adds	r2, #176	@ 0xb0
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800765e:	2303      	movs	r3, #3
 8007660:	e018      	b.n	8007694 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7c1b      	ldrb	r3, [r3, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800766a:	4b0c      	ldr	r3, [pc, #48]	@ (800769c <USBD_CDC_ReceivePacket+0x68>)
 800766c:	7819      	ldrb	r1, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 ffd9 	bl	8009630 <USBD_LL_PrepareReceive>
 800767e:	e008      	b.n	8007692 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007680:	4b06      	ldr	r3, [pc, #24]	@ (800769c <USBD_CDC_ReceivePacket+0x68>)
 8007682:	7819      	ldrb	r1, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800768a:	2340      	movs	r3, #64	@ 0x40
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 ffcf 	bl	8009630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200000ac 	.word	0x200000ac

080076a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e01f      	b.n	80076f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	79fa      	ldrb	r2, [r7, #7]
 80076ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f001 fe49 	bl	8009384 <USBD_LL_Init>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	e025      	b.n	8007764 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	32ae      	adds	r2, #174	@ 0xae
 800772a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00f      	beq.n	8007754 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	@ 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	f107 020e 	add.w	r2, r7, #14
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	4602      	mov	r2, r0
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 fe51 	bl	800941c <USBD_LL_Start>
 800777a:	4603      	mov	r3, r0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800778c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	4611      	mov	r1, r2
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	78fa      	ldrb	r2, [r7, #3]
 80077ec:	4611      	mov	r1, r2
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f001 f90c 	bl	8008a36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800782c:	461a      	mov	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2b02      	cmp	r3, #2
 8007840:	d01a      	beq.n	8007878 <USBD_LL_SetupStage+0x72>
 8007842:	2b02      	cmp	r3, #2
 8007844:	d822      	bhi.n	800788c <USBD_LL_SetupStage+0x86>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <USBD_LL_SetupStage+0x4a>
 800784a:	2b01      	cmp	r3, #1
 800784c:	d00a      	beq.n	8007864 <USBD_LL_SetupStage+0x5e>
 800784e:	e01d      	b.n	800788c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fb63 	bl	8007f24 <USBD_StdDevReq>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
      break;
 8007862:	e020      	b.n	80078a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fbcb 	bl	8008008 <USBD_StdItfReq>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
      break;
 8007876:	e016      	b.n	80078a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fc2d 	bl	80080e0 <USBD_StdEPReq>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]
      break;
 800788a:	e00c      	b.n	80078a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007892:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007896:	b2db      	uxtb	r3, r3
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 fe1e 	bl	80094dc <USBD_LL_StallEP>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
      break;
 80078a4:	bf00      	nop
  }

  return ret;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	460b      	mov	r3, r1
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d16e      	bne.n	80079a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80078ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	f040 8098 	bne.w	8007a0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d913      	bls.n	8007910 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	1ad2      	subs	r2, r2, r3
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	4293      	cmp	r3, r2
 8007900:	bf28      	it	cs
 8007902:	4613      	movcs	r3, r2
 8007904:	461a      	mov	r2, r3
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f001 f994 	bl	8008c36 <USBD_CtlContinueRx>
 800790e:	e07d      	b.n	8007a0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007916:	f003 031f 	and.w	r3, r3, #31
 800791a:	2b02      	cmp	r3, #2
 800791c:	d014      	beq.n	8007948 <USBD_LL_DataOutStage+0x98>
 800791e:	2b02      	cmp	r3, #2
 8007920:	d81d      	bhi.n	800795e <USBD_LL_DataOutStage+0xae>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <USBD_LL_DataOutStage+0x7c>
 8007926:	2b01      	cmp	r3, #1
 8007928:	d003      	beq.n	8007932 <USBD_LL_DataOutStage+0x82>
 800792a:	e018      	b.n	800795e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	75bb      	strb	r3, [r7, #22]
            break;
 8007930:	e018      	b.n	8007964 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007938:	b2db      	uxtb	r3, r3
 800793a:	4619      	mov	r1, r3
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fa64 	bl	8007e0a <USBD_CoreFindIF>
 8007942:	4603      	mov	r3, r0
 8007944:	75bb      	strb	r3, [r7, #22]
            break;
 8007946:	e00d      	b.n	8007964 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800794e:	b2db      	uxtb	r3, r3
 8007950:	4619      	mov	r1, r3
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 fa66 	bl	8007e24 <USBD_CoreFindEP>
 8007958:	4603      	mov	r3, r0
 800795a:	75bb      	strb	r3, [r7, #22]
            break;
 800795c:	e002      	b.n	8007964 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	75bb      	strb	r3, [r7, #22]
            break;
 8007962:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007964:	7dbb      	ldrb	r3, [r7, #22]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d119      	bne.n	800799e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b03      	cmp	r3, #3
 8007974:	d113      	bne.n	800799e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007976:	7dba      	ldrb	r2, [r7, #22]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	32ae      	adds	r2, #174	@ 0xae
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00b      	beq.n	800799e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007986:	7dba      	ldrb	r2, [r7, #22]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800798e:	7dba      	ldrb	r2, [r7, #22]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	32ae      	adds	r2, #174	@ 0xae
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f001 f95a 	bl	8008c58 <USBD_CtlSendStatus>
 80079a4:	e032      	b.n	8007a0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	4619      	mov	r1, r3
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 fa37 	bl	8007e24 <USBD_CoreFindEP>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ba:	7dbb      	ldrb	r3, [r7, #22]
 80079bc:	2bff      	cmp	r3, #255	@ 0xff
 80079be:	d025      	beq.n	8007a0c <USBD_LL_DataOutStage+0x15c>
 80079c0:	7dbb      	ldrb	r3, [r7, #22]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d122      	bne.n	8007a0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d117      	bne.n	8007a02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80079d2:	7dba      	ldrb	r2, [r7, #22]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	32ae      	adds	r2, #174	@ 0xae
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00f      	beq.n	8007a02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80079e2:	7dba      	ldrb	r2, [r7, #22]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079ea:	7dba      	ldrb	r2, [r7, #22]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	32ae      	adds	r2, #174	@ 0xae
 80079f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	7afa      	ldrb	r2, [r7, #11]
 80079f8:	4611      	mov	r1, r2
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	4798      	blx	r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	e000      	b.n	8007a0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d16f      	bne.n	8007b0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d15a      	bne.n	8007af0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d914      	bls.n	8007a70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f001 f8bc 	bl	8008bda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a62:	2300      	movs	r3, #0
 8007a64:	2200      	movs	r2, #0
 8007a66:	2100      	movs	r1, #0
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f001 fde1 	bl	8009630 <USBD_LL_PrepareReceive>
 8007a6e:	e03f      	b.n	8007af0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d11c      	bne.n	8007ab6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d316      	bcc.n	8007ab6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d20f      	bcs.n	8007ab6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f001 f89d 	bl	8008bda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2100      	movs	r1, #0
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f001 fdbe 	bl	8009630 <USBD_LL_PrepareReceive>
 8007ab4:	e01c      	b.n	8007af0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d10f      	bne.n	8007ae2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ae2:	2180      	movs	r1, #128	@ 0x80
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f001 fcf9 	bl	80094dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f001 f8c7 	bl	8008c7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d03a      	beq.n	8007b70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff fe42 	bl	8007784 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b08:	e032      	b.n	8007b70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b0a:	7afb      	ldrb	r3, [r7, #11]
 8007b0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f985 	bl	8007e24 <USBD_CoreFindEP>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2bff      	cmp	r3, #255	@ 0xff
 8007b22:	d025      	beq.n	8007b70 <USBD_LL_DataInStage+0x15a>
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d122      	bne.n	8007b70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d11c      	bne.n	8007b70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b36:	7dfa      	ldrb	r2, [r7, #23]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	32ae      	adds	r2, #174	@ 0xae
 8007b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d014      	beq.n	8007b70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b46:	7dfa      	ldrb	r2, [r7, #23]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b4e:	7dfa      	ldrb	r2, [r7, #23]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	32ae      	adds	r2, #174	@ 0xae
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	7afa      	ldrb	r2, [r7, #11]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b66:	7dbb      	ldrb	r3, [r7, #22]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b6c:	7dbb      	ldrb	r3, [r7, #22]
 8007b6e:	e000      	b.n	8007b72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d014      	beq.n	8007be0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00e      	beq.n	8007be0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6852      	ldr	r2, [r2, #4]
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007be0:	2340      	movs	r3, #64	@ 0x40
 8007be2:	2200      	movs	r2, #0
 8007be4:	2100      	movs	r1, #0
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 fc33 	bl	8009452 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2240      	movs	r2, #64	@ 0x40
 8007bf8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bfc:	2340      	movs	r3, #64	@ 0x40
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2180      	movs	r1, #128	@ 0x80
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 fc25 	bl	8009452 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2240      	movs	r2, #64	@ 0x40
 8007c12:	621a      	str	r2, [r3, #32]

  return ret;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	460b      	mov	r3, r1
 8007c28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d006      	beq.n	8007c60 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2204      	movs	r2, #4
 8007c64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d106      	bne.n	8007c98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d110      	bne.n	8007cdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	32ae      	adds	r2, #174	@ 0xae
 8007cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e01c      	b.n	8007d42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d115      	bne.n	8007d40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	32ae      	adds	r2, #174	@ 0xae
 8007d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	32ae      	adds	r2, #174	@ 0xae
 8007d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32ae      	adds	r2, #174	@ 0xae
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e01c      	b.n	8007da6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d115      	bne.n	8007da4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	32ae      	adds	r2, #174	@ 0xae
 8007d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32ae      	adds	r2, #174	@ 0xae
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	4611      	mov	r1, r2
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00e      	beq.n	8007e00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6852      	ldr	r2, [r2, #4]
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	4611      	mov	r1, r2
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	885b      	ldrh	r3, [r3, #2]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	7812      	ldrb	r2, [r2, #0]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d91f      	bls.n	8007ea4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e6a:	e013      	b.n	8007e94 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e6c:	f107 030a 	add.w	r3, r7, #10
 8007e70:	4619      	mov	r1, r3
 8007e72:	6978      	ldr	r0, [r7, #20]
 8007e74:	f000 f81b 	bl	8007eae <USBD_GetNextDesc>
 8007e78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	d108      	bne.n	8007e94 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	789b      	ldrb	r3, [r3, #2]
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d008      	beq.n	8007ea2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	885b      	ldrh	r3, [r3, #2]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	897b      	ldrh	r3, [r7, #10]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d8e5      	bhi.n	8007e6c <USBD_GetEpDesc+0x2e>
 8007ea0:	e000      	b.n	8007ea4 <USBD_GetEpDesc+0x66>
          break;
 8007ea2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ea4:	693b      	ldr	r3, [r7, #16]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	7812      	ldrb	r2, [r2, #0]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b087      	sub	sp, #28
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	3301      	adds	r3, #1
 8007efc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f04:	8a3b      	ldrh	r3, [r7, #16]
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	b21a      	sxth	r2, r3
 8007f0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	b21b      	sxth	r3, r3
 8007f12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f14:	89fb      	ldrh	r3, [r7, #14]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f3a:	2b40      	cmp	r3, #64	@ 0x40
 8007f3c:	d005      	beq.n	8007f4a <USBD_StdDevReq+0x26>
 8007f3e:	2b40      	cmp	r3, #64	@ 0x40
 8007f40:	d857      	bhi.n	8007ff2 <USBD_StdDevReq+0xce>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <USBD_StdDevReq+0x42>
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d153      	bne.n	8007ff2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	32ae      	adds	r2, #174	@ 0xae
 8007f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
      break;
 8007f64:	e04a      	b.n	8007ffc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d83b      	bhi.n	8007fe6 <USBD_StdDevReq+0xc2>
 8007f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <USBD_StdDevReq+0x50>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007fc9 	.word	0x08007fc9
 8007f78:	08007fdd 	.word	0x08007fdd
 8007f7c:	08007fe7 	.word	0x08007fe7
 8007f80:	08007fd3 	.word	0x08007fd3
 8007f84:	08007fe7 	.word	0x08007fe7
 8007f88:	08007fa7 	.word	0x08007fa7
 8007f8c:	08007f9d 	.word	0x08007f9d
 8007f90:	08007fe7 	.word	0x08007fe7
 8007f94:	08007fbf 	.word	0x08007fbf
 8007f98:	08007fb1 	.word	0x08007fb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa3c 	bl	800841c <USBD_GetDescriptor>
          break;
 8007fa4:	e024      	b.n	8007ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fba1 	bl	80086f0 <USBD_SetAddress>
          break;
 8007fae:	e01f      	b.n	8007ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fbe0 	bl	8008778 <USBD_SetConfig>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
          break;
 8007fbc:	e018      	b.n	8007ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fc83 	bl	80088cc <USBD_GetConfig>
          break;
 8007fc6:	e013      	b.n	8007ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fcb4 	bl	8008938 <USBD_GetStatus>
          break;
 8007fd0:	e00e      	b.n	8007ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fce3 	bl	80089a0 <USBD_SetFeature>
          break;
 8007fda:	e009      	b.n	8007ff0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fd07 	bl	80089f2 <USBD_ClrFeature>
          break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fd5e 	bl	8008aaa <USBD_CtlError>
          break;
 8007fee:	bf00      	nop
      }
      break;
 8007ff0:	e004      	b.n	8007ffc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fd58 	bl	8008aaa <USBD_CtlError>
      break;
 8007ffa:	bf00      	nop
  }

  return ret;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop

08008008 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800801e:	2b40      	cmp	r3, #64	@ 0x40
 8008020:	d005      	beq.n	800802e <USBD_StdItfReq+0x26>
 8008022:	2b40      	cmp	r3, #64	@ 0x40
 8008024:	d852      	bhi.n	80080cc <USBD_StdItfReq+0xc4>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <USBD_StdItfReq+0x26>
 800802a:	2b20      	cmp	r3, #32
 800802c:	d14e      	bne.n	80080cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	2b02      	cmp	r3, #2
 800803a:	d840      	bhi.n	80080be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	889b      	ldrh	r3, [r3, #4]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	d836      	bhi.n	80080b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	889b      	ldrh	r3, [r3, #4]
 800804a:	b2db      	uxtb	r3, r3
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff fedb 	bl	8007e0a <USBD_CoreFindIF>
 8008054:	4603      	mov	r3, r0
 8008056:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2bff      	cmp	r3, #255	@ 0xff
 800805c:	d01d      	beq.n	800809a <USBD_StdItfReq+0x92>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d11a      	bne.n	800809a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008064:	7bba      	ldrb	r2, [r7, #14]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	32ae      	adds	r2, #174	@ 0xae
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00f      	beq.n	8008094 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008074:	7bba      	ldrb	r2, [r7, #14]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800807c:	7bba      	ldrb	r2, [r7, #14]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	32ae      	adds	r2, #174	@ 0xae
 8008082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008092:	e004      	b.n	800809e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008094:	2303      	movs	r3, #3
 8008096:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008098:	e001      	b.n	800809e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800809a:	2303      	movs	r3, #3
 800809c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	88db      	ldrh	r3, [r3, #6]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d110      	bne.n	80080c8 <USBD_StdItfReq+0xc0>
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10d      	bne.n	80080c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fdd3 	bl	8008c58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080b2:	e009      	b.n	80080c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fcf7 	bl	8008aaa <USBD_CtlError>
          break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fcf2 	bl	8008aaa <USBD_CtlError>
          break;
 80080c6:	e000      	b.n	80080ca <USBD_StdItfReq+0xc2>
          break;
 80080c8:	bf00      	nop
      }
      break;
 80080ca:	e004      	b.n	80080d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fceb 	bl	8008aaa <USBD_CtlError>
      break;
 80080d4:	bf00      	nop
  }

  return ret;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	889b      	ldrh	r3, [r3, #4]
 80080f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080fc:	2b40      	cmp	r3, #64	@ 0x40
 80080fe:	d007      	beq.n	8008110 <USBD_StdEPReq+0x30>
 8008100:	2b40      	cmp	r3, #64	@ 0x40
 8008102:	f200 817f 	bhi.w	8008404 <USBD_StdEPReq+0x324>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d02a      	beq.n	8008160 <USBD_StdEPReq+0x80>
 800810a:	2b20      	cmp	r3, #32
 800810c:	f040 817a 	bne.w	8008404 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff fe85 	bl	8007e24 <USBD_CoreFindEP>
 800811a:	4603      	mov	r3, r0
 800811c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800811e:	7b7b      	ldrb	r3, [r7, #13]
 8008120:	2bff      	cmp	r3, #255	@ 0xff
 8008122:	f000 8174 	beq.w	800840e <USBD_StdEPReq+0x32e>
 8008126:	7b7b      	ldrb	r3, [r7, #13]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f040 8170 	bne.w	800840e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800812e:	7b7a      	ldrb	r2, [r7, #13]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008136:	7b7a      	ldrb	r2, [r7, #13]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32ae      	adds	r2, #174	@ 0xae
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 8163 	beq.w	800840e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008148:	7b7a      	ldrb	r2, [r7, #13]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	32ae      	adds	r2, #174	@ 0xae
 800814e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800815e:	e156      	b.n	800840e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	2b03      	cmp	r3, #3
 8008166:	d008      	beq.n	800817a <USBD_StdEPReq+0x9a>
 8008168:	2b03      	cmp	r3, #3
 800816a:	f300 8145 	bgt.w	80083f8 <USBD_StdEPReq+0x318>
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 809b 	beq.w	80082aa <USBD_StdEPReq+0x1ca>
 8008174:	2b01      	cmp	r3, #1
 8008176:	d03c      	beq.n	80081f2 <USBD_StdEPReq+0x112>
 8008178:	e13e      	b.n	80083f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d002      	beq.n	800818c <USBD_StdEPReq+0xac>
 8008186:	2b03      	cmp	r3, #3
 8008188:	d016      	beq.n	80081b8 <USBD_StdEPReq+0xd8>
 800818a:	e02c      	b.n	80081e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <USBD_StdEPReq+0xce>
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b80      	cmp	r3, #128	@ 0x80
 8008196:	d00a      	beq.n	80081ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 f99d 	bl	80094dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081a2:	2180      	movs	r1, #128	@ 0x80
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f999 	bl	80094dc <USBD_LL_StallEP>
 80081aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081ac:	e020      	b.n	80081f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fc7a 	bl	8008aaa <USBD_CtlError>
              break;
 80081b6:	e01b      	b.n	80081f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10e      	bne.n	80081de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <USBD_StdEPReq+0xfe>
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b80      	cmp	r3, #128	@ 0x80
 80081ca:	d008      	beq.n	80081de <USBD_StdEPReq+0xfe>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	88db      	ldrh	r3, [r3, #6]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 f97f 	bl	80094dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fd3a 	bl	8008c58 <USBD_CtlSendStatus>

              break;
 80081e4:	e004      	b.n	80081f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fc5e 	bl	8008aaa <USBD_CtlError>
              break;
 80081ee:	bf00      	nop
          }
          break;
 80081f0:	e107      	b.n	8008402 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d002      	beq.n	8008204 <USBD_StdEPReq+0x124>
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d016      	beq.n	8008230 <USBD_StdEPReq+0x150>
 8008202:	e04b      	b.n	800829c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00d      	beq.n	8008226 <USBD_StdEPReq+0x146>
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b80      	cmp	r3, #128	@ 0x80
 800820e:	d00a      	beq.n	8008226 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f961 	bl	80094dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800821a:	2180      	movs	r1, #128	@ 0x80
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f95d 	bl	80094dc <USBD_LL_StallEP>
 8008222:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008224:	e040      	b.n	80082a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fc3e 	bl	8008aaa <USBD_CtlError>
              break;
 800822e:	e03b      	b.n	80082a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	885b      	ldrh	r3, [r3, #2]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d136      	bne.n	80082a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 f967 	bl	800951a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fd03 	bl	8008c58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff fde4 	bl	8007e24 <USBD_CoreFindEP>
 800825c:	4603      	mov	r3, r0
 800825e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008260:	7b7b      	ldrb	r3, [r7, #13]
 8008262:	2bff      	cmp	r3, #255	@ 0xff
 8008264:	d01f      	beq.n	80082a6 <USBD_StdEPReq+0x1c6>
 8008266:	7b7b      	ldrb	r3, [r7, #13]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d11c      	bne.n	80082a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800826c:	7b7a      	ldrb	r2, [r7, #13]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008274:	7b7a      	ldrb	r2, [r7, #13]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32ae      	adds	r2, #174	@ 0xae
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d010      	beq.n	80082a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008284:	7b7a      	ldrb	r2, [r7, #13]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32ae      	adds	r2, #174	@ 0xae
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800829a:	e004      	b.n	80082a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fc03 	bl	8008aaa <USBD_CtlError>
              break;
 80082a4:	e000      	b.n	80082a8 <USBD_StdEPReq+0x1c8>
              break;
 80082a6:	bf00      	nop
          }
          break;
 80082a8:	e0ab      	b.n	8008402 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d002      	beq.n	80082bc <USBD_StdEPReq+0x1dc>
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d032      	beq.n	8008320 <USBD_StdEPReq+0x240>
 80082ba:	e097      	b.n	80083ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <USBD_StdEPReq+0x1f2>
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b80      	cmp	r3, #128	@ 0x80
 80082c6:	d004      	beq.n	80082d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fbed 	bl	8008aaa <USBD_CtlError>
                break;
 80082d0:	e091      	b.n	80083f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da0b      	bge.n	80082f2 <USBD_StdEPReq+0x212>
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	3310      	adds	r3, #16
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	3304      	adds	r3, #4
 80082f0:	e00b      	b.n	800830a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	4413      	add	r3, r2
 8008308:	3304      	adds	r3, #4
 800830a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2202      	movs	r2, #2
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fc43 	bl	8008ba4 <USBD_CtlSendData>
              break;
 800831e:	e06a      	b.n	80083f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	da11      	bge.n	800834c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	f003 020f 	and.w	r2, r3, #15
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	3324      	adds	r3, #36	@ 0x24
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d117      	bne.n	8008372 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fbb0 	bl	8008aaa <USBD_CtlError>
                  break;
 800834a:	e054      	b.n	80083f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	f003 020f 	and.w	r2, r3, #15
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb9d 	bl	8008aaa <USBD_CtlError>
                  break;
 8008370:	e041      	b.n	80083f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008376:	2b00      	cmp	r3, #0
 8008378:	da0b      	bge.n	8008392 <USBD_StdEPReq+0x2b2>
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	3310      	adds	r3, #16
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	3304      	adds	r3, #4
 8008390:	e00b      	b.n	80083aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	4413      	add	r3, r2
 80083a8:	3304      	adds	r3, #4
 80083aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <USBD_StdEPReq+0x2d8>
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b80      	cmp	r3, #128	@ 0x80
 80083b6:	d103      	bne.n	80083c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e00e      	b.n	80083de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f8c7 	bl	8009558 <USBD_LL_IsStallEP>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2201      	movs	r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	e002      	b.n	80083de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2202      	movs	r2, #2
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fbdd 	bl	8008ba4 <USBD_CtlSendData>
              break;
 80083ea:	e004      	b.n	80083f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fb5b 	bl	8008aaa <USBD_CtlError>
              break;
 80083f4:	bf00      	nop
          }
          break;
 80083f6:	e004      	b.n	8008402 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fb55 	bl	8008aaa <USBD_CtlError>
          break;
 8008400:	bf00      	nop
      }
      break;
 8008402:	e005      	b.n	8008410 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fb4f 	bl	8008aaa <USBD_CtlError>
      break;
 800840c:	e000      	b.n	8008410 <USBD_StdEPReq+0x330>
      break;
 800840e:	bf00      	nop
  }

  return ret;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	885b      	ldrh	r3, [r3, #2]
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	2b06      	cmp	r3, #6
 800843e:	f200 8128 	bhi.w	8008692 <USBD_GetDescriptor+0x276>
 8008442:	a201      	add	r2, pc, #4	@ (adr r2, 8008448 <USBD_GetDescriptor+0x2c>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	08008465 	.word	0x08008465
 800844c:	0800847d 	.word	0x0800847d
 8008450:	080084bd 	.word	0x080084bd
 8008454:	08008693 	.word	0x08008693
 8008458:	08008693 	.word	0x08008693
 800845c:	08008633 	.word	0x08008633
 8008460:	0800865f 	.word	0x0800865f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	7c12      	ldrb	r2, [r2, #16]
 8008470:	f107 0108 	add.w	r1, r7, #8
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	60f8      	str	r0, [r7, #12]
      break;
 800847a:	e112      	b.n	80086a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7c1b      	ldrb	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10d      	bne.n	80084a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848c:	f107 0208 	add.w	r2, r7, #8
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	2202      	movs	r2, #2
 800849c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800849e:	e100      	b.n	80086a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a8:	f107 0208 	add.w	r2, r7, #8
 80084ac:	4610      	mov	r0, r2
 80084ae:	4798      	blx	r3
 80084b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3301      	adds	r3, #1
 80084b6:	2202      	movs	r2, #2
 80084b8:	701a      	strb	r2, [r3, #0]
      break;
 80084ba:	e0f2      	b.n	80086a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	885b      	ldrh	r3, [r3, #2]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	f200 80ac 	bhi.w	8008620 <USBD_GetDescriptor+0x204>
 80084c8:	a201      	add	r2, pc, #4	@ (adr r2, 80084d0 <USBD_GetDescriptor+0xb4>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	080084e9 	.word	0x080084e9
 80084d4:	0800851d 	.word	0x0800851d
 80084d8:	08008551 	.word	0x08008551
 80084dc:	08008585 	.word	0x08008585
 80084e0:	080085b9 	.word	0x080085b9
 80084e4:	080085ed 	.word	0x080085ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	7c12      	ldrb	r2, [r2, #16]
 8008500:	f107 0108 	add.w	r1, r7, #8
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800850a:	e091      	b.n	8008630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 facb 	bl	8008aaa <USBD_CtlError>
            err++;
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	3301      	adds	r3, #1
 8008518:	72fb      	strb	r3, [r7, #11]
          break;
 800851a:	e089      	b.n	8008630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	7c12      	ldrb	r2, [r2, #16]
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800853e:	e077      	b.n	8008630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fab1 	bl	8008aaa <USBD_CtlError>
            err++;
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	3301      	adds	r3, #1
 800854c:	72fb      	strb	r3, [r7, #11]
          break;
 800854e:	e06f      	b.n	8008630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	7c12      	ldrb	r2, [r2, #16]
 8008568:	f107 0108 	add.w	r1, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008572:	e05d      	b.n	8008630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa97 	bl	8008aaa <USBD_CtlError>
            err++;
 800857c:	7afb      	ldrb	r3, [r7, #11]
 800857e:	3301      	adds	r3, #1
 8008580:	72fb      	strb	r3, [r7, #11]
          break;
 8008582:	e055      	b.n	8008630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e043      	b.n	8008630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa7d 	bl	8008aaa <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e03b      	b.n	8008630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e029      	b.n	8008630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa63 	bl	8008aaa <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e021      	b.n	8008630 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e00f      	b.n	8008630 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa49 	bl	8008aaa <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e007      	b.n	8008630 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa41 	bl	8008aaa <USBD_CtlError>
          err++;
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	3301      	adds	r3, #1
 800862c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800862e:	bf00      	nop
      }
      break;
 8008630:	e037      	b.n	80086a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	7c1b      	ldrb	r3, [r3, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d109      	bne.n	800864e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008642:	f107 0208 	add.w	r2, r7, #8
 8008646:	4610      	mov	r0, r2
 8008648:	4798      	blx	r3
 800864a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800864c:	e029      	b.n	80086a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa2a 	bl	8008aaa <USBD_CtlError>
        err++;
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	3301      	adds	r3, #1
 800865a:	72fb      	strb	r3, [r7, #11]
      break;
 800865c:	e021      	b.n	80086a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7c1b      	ldrb	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10d      	bne.n	8008682 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866e:	f107 0208 	add.w	r2, r7, #8
 8008672:	4610      	mov	r0, r2
 8008674:	4798      	blx	r3
 8008676:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3301      	adds	r3, #1
 800867c:	2207      	movs	r2, #7
 800867e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008680:	e00f      	b.n	80086a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fa10 	bl	8008aaa <USBD_CtlError>
        err++;
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	3301      	adds	r3, #1
 800868e:	72fb      	strb	r3, [r7, #11]
      break;
 8008690:	e007      	b.n	80086a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fa08 	bl	8008aaa <USBD_CtlError>
      err++;
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	3301      	adds	r3, #1
 800869e:	72fb      	strb	r3, [r7, #11]
      break;
 80086a0:	bf00      	nop
  }

  if (err != 0U)
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11e      	bne.n	80086e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	88db      	ldrh	r3, [r3, #6]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d016      	beq.n	80086de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80086b0:	893b      	ldrh	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00e      	beq.n	80086d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	88da      	ldrh	r2, [r3, #6]
 80086ba:	893b      	ldrh	r3, [r7, #8]
 80086bc:	4293      	cmp	r3, r2
 80086be:	bf28      	it	cs
 80086c0:	4613      	movcs	r3, r2
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086c6:	893b      	ldrh	r3, [r7, #8]
 80086c8:	461a      	mov	r2, r3
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fa69 	bl	8008ba4 <USBD_CtlSendData>
 80086d2:	e009      	b.n	80086e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f9e7 	bl	8008aaa <USBD_CtlError>
 80086dc:	e004      	b.n	80086e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 faba 	bl	8008c58 <USBD_CtlSendStatus>
 80086e4:	e000      	b.n	80086e8 <USBD_GetDescriptor+0x2cc>
    return;
 80086e6:	bf00      	nop
  }
}
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop

080086f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	889b      	ldrh	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d131      	bne.n	8008766 <USBD_SetAddress+0x76>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	88db      	ldrh	r3, [r3, #6]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d12d      	bne.n	8008766 <USBD_SetAddress+0x76>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	885b      	ldrh	r3, [r3, #2]
 800870e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008710:	d829      	bhi.n	8008766 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	885b      	ldrh	r3, [r3, #2]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800871c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b03      	cmp	r3, #3
 8008728:	d104      	bne.n	8008734 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f9bc 	bl	8008aaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008732:	e01d      	b.n	8008770 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	7bfa      	ldrb	r2, [r7, #15]
 8008738:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 ff35 	bl	80095b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa86 	bl	8008c58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875a:	e009      	b.n	8008770 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008764:	e004      	b.n	8008770 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f99e 	bl	8008aaa <USBD_CtlError>
  }
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	885b      	ldrh	r3, [r3, #2]
 800878a:	b2da      	uxtb	r2, r3
 800878c:	4b4e      	ldr	r3, [pc, #312]	@ (80088c8 <USBD_SetConfig+0x150>)
 800878e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008790:	4b4d      	ldr	r3, [pc, #308]	@ (80088c8 <USBD_SetConfig+0x150>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d905      	bls.n	80087a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f985 	bl	8008aaa <USBD_CtlError>
    return USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e08c      	b.n	80088be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d002      	beq.n	80087b6 <USBD_SetConfig+0x3e>
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d029      	beq.n	8008808 <USBD_SetConfig+0x90>
 80087b4:	e075      	b.n	80088a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087b6:	4b44      	ldr	r3, [pc, #272]	@ (80088c8 <USBD_SetConfig+0x150>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d020      	beq.n	8008800 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80087be:	4b42      	ldr	r3, [pc, #264]	@ (80088c8 <USBD_SetConfig+0x150>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087c8:	4b3f      	ldr	r3, [pc, #252]	@ (80088c8 <USBD_SetConfig+0x150>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fe ffe3 	bl	800779a <USBD_SetClassConfig>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d008      	beq.n	80087f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f962 	bl	8008aaa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2202      	movs	r2, #2
 80087ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087ee:	e065      	b.n	80088bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa31 	bl	8008c58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2203      	movs	r2, #3
 80087fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087fe:	e05d      	b.n	80088bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fa29 	bl	8008c58 <USBD_CtlSendStatus>
      break;
 8008806:	e059      	b.n	80088bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008808:	4b2f      	ldr	r3, [pc, #188]	@ (80088c8 <USBD_SetConfig+0x150>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d112      	bne.n	8008836 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008818:	4b2b      	ldr	r3, [pc, #172]	@ (80088c8 <USBD_SetConfig+0x150>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008822:	4b29      	ldr	r3, [pc, #164]	@ (80088c8 <USBD_SetConfig+0x150>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7fe ffd2 	bl	80077d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fa12 	bl	8008c58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008834:	e042      	b.n	80088bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008836:	4b24      	ldr	r3, [pc, #144]	@ (80088c8 <USBD_SetConfig+0x150>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d02a      	beq.n	800889a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	b2db      	uxtb	r3, r3
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7fe ffc0 	bl	80077d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008852:	4b1d      	ldr	r3, [pc, #116]	@ (80088c8 <USBD_SetConfig+0x150>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800885c:	4b1a      	ldr	r3, [pc, #104]	@ (80088c8 <USBD_SetConfig+0x150>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fe ff99 	bl	800779a <USBD_SetClassConfig>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00f      	beq.n	8008892 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f918 	bl	8008aaa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fe ffa5 	bl	80077d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008890:	e014      	b.n	80088bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f9e0 	bl	8008c58 <USBD_CtlSendStatus>
      break;
 8008898:	e010      	b.n	80088bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f9dc 	bl	8008c58 <USBD_CtlSendStatus>
      break;
 80088a0:	e00c      	b.n	80088bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f900 	bl	8008aaa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088aa:	4b07      	ldr	r3, [pc, #28]	@ (80088c8 <USBD_SetConfig+0x150>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7fe ff8e 	bl	80077d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088b6:	2303      	movs	r3, #3
 80088b8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ba:	bf00      	nop
  }

  return ret;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	200004a8 	.word	0x200004a8

080088cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	88db      	ldrh	r3, [r3, #6]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d004      	beq.n	80088e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f8e2 	bl	8008aaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088e6:	e023      	b.n	8008930 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	dc02      	bgt.n	80088fa <USBD_GetConfig+0x2e>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dc03      	bgt.n	8008900 <USBD_GetConfig+0x34>
 80088f8:	e015      	b.n	8008926 <USBD_GetConfig+0x5a>
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d00b      	beq.n	8008916 <USBD_GetConfig+0x4a>
 80088fe:	e012      	b.n	8008926 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3308      	adds	r3, #8
 800890a:	2201      	movs	r2, #1
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f948 	bl	8008ba4 <USBD_CtlSendData>
        break;
 8008914:	e00c      	b.n	8008930 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3304      	adds	r3, #4
 800891a:	2201      	movs	r2, #1
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f940 	bl	8008ba4 <USBD_CtlSendData>
        break;
 8008924:	e004      	b.n	8008930 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f8be 	bl	8008aaa <USBD_CtlError>
        break;
 800892e:	bf00      	nop
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008948:	b2db      	uxtb	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	2b02      	cmp	r3, #2
 800894e:	d81e      	bhi.n	800898e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	88db      	ldrh	r3, [r3, #6]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d004      	beq.n	8008962 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f8a5 	bl	8008aaa <USBD_CtlError>
        break;
 8008960:	e01a      	b.n	8008998 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f043 0202 	orr.w	r2, r3, #2
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	330c      	adds	r3, #12
 8008982:	2202      	movs	r2, #2
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f90c 	bl	8008ba4 <USBD_CtlSendData>
      break;
 800898c:	e004      	b.n	8008998 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f88a 	bl	8008aaa <USBD_CtlError>
      break;
 8008996:	bf00      	nop
  }
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d107      	bne.n	80089c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f94c 	bl	8008c58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80089c0:	e013      	b.n	80089ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d10b      	bne.n	80089e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	889b      	ldrh	r3, [r3, #4]
 80089ce:	0a1b      	lsrs	r3, r3, #8
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f93c 	bl	8008c58 <USBD_CtlSendStatus>
}
 80089e0:	e003      	b.n	80089ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f860 	bl	8008aaa <USBD_CtlError>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	3b01      	subs	r3, #1
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d80b      	bhi.n	8008a22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	885b      	ldrh	r3, [r3, #2]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d10c      	bne.n	8008a2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f91c 	bl	8008c58 <USBD_CtlSendStatus>
      }
      break;
 8008a20:	e004      	b.n	8008a2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f840 	bl	8008aaa <USBD_CtlError>
      break;
 8008a2a:	e000      	b.n	8008a2e <USBD_ClrFeature+0x3c>
      break;
 8008a2c:	bf00      	nop
  }
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	781a      	ldrb	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff fa40 	bl	8007ee6 <SWAPBYTE>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3301      	adds	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff fa33 	bl	8007ee6 <SWAPBYTE>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff fa26 	bl	8007ee6 <SWAPBYTE>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	80da      	strh	r2, [r3, #6]
}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ab4:	2180      	movs	r1, #128	@ 0x80
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fd10 	bl	80094dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fd0c 	bl	80094dc <USBD_LL_StallEP>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d042      	beq.n	8008b68 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008ae6:	6938      	ldr	r0, [r7, #16]
 8008ae8:	f000 f842 	bl	8008b70 <USBD_GetLen>
 8008aec:	4603      	mov	r3, r0
 8008aee:	3301      	adds	r3, #1
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af6:	d808      	bhi.n	8008b0a <USBD_GetString+0x3e>
 8008af8:	6938      	ldr	r0, [r7, #16]
 8008afa:	f000 f839 	bl	8008b70 <USBD_GetLen>
 8008afe:	4603      	mov	r3, r0
 8008b00:	3301      	adds	r3, #1
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	e001      	b.n	8008b0e <USBD_GetString+0x42>
 8008b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	4413      	add	r3, r2
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	3301      	adds	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	2203      	movs	r2, #3
 8008b2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	3301      	adds	r3, #1
 8008b32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b34:	e013      	b.n	8008b5e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	7812      	ldrb	r2, [r2, #0]
 8008b40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3301      	adds	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]
    idx++;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	4413      	add	r3, r2
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e7      	bne.n	8008b36 <USBD_GetString+0x6a>
 8008b66:	e000      	b.n	8008b6a <USBD_GetString+0x9e>
    return;
 8008b68:	bf00      	nop
  }
}
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b80:	e005      	b.n	8008b8e <USBD_GetLen+0x1e>
  {
    len++;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	3301      	adds	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f5      	bne.n	8008b82 <USBD_GetLen+0x12>
  }

  return len;
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	2100      	movs	r1, #0
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fd0f 	bl	80095ee <USBD_LL_Transmit>

  return USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	2100      	movs	r1, #0
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fcfe 	bl	80095ee <USBD_LL_Transmit>

  return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fd02 	bl	8009630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	2100      	movs	r1, #0
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fcf1 	bl	8009630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2204      	movs	r2, #4
 8008c64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fcbd 	bl	80095ee <USBD_LL_Transmit>

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2205      	movs	r2, #5
 8008c8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2200      	movs	r2, #0
 8008c92:	2100      	movs	r1, #0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fccb 	bl	8009630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4912      	ldr	r1, [pc, #72]	@ (8008cf4 <MX_USB_DEVICE_Init+0x50>)
 8008cac:	4812      	ldr	r0, [pc, #72]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cae:	f7fe fcf7 	bl	80076a0 <USBD_Init>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cb8:	f7f9 f8d2 	bl	8001e60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cbc:	490f      	ldr	r1, [pc, #60]	@ (8008cfc <MX_USB_DEVICE_Init+0x58>)
 8008cbe:	480e      	ldr	r0, [pc, #56]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cc0:	f7fe fd1e 	bl	8007700 <USBD_RegisterClass>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cca:	f7f9 f8c9 	bl	8001e60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cce:	490c      	ldr	r1, [pc, #48]	@ (8008d00 <MX_USB_DEVICE_Init+0x5c>)
 8008cd0:	4809      	ldr	r0, [pc, #36]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cd2:	f7fe fc15 	bl	8007500 <USBD_CDC_RegisterInterface>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cdc:	f7f9 f8c0 	bl	8001e60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ce0:	4805      	ldr	r0, [pc, #20]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008ce2:	f7fe fd43 	bl	800776c <USBD_Start>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cec:	f7f9 f8b8 	bl	8001e60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cf0:	bf00      	nop
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	200000c4 	.word	0x200000c4
 8008cf8:	200004ac 	.word	0x200004ac
 8008cfc:	20000030 	.word	0x20000030
 8008d00:	200000b0 	.word	0x200000b0

08008d04 <CDC_Init_FS>:
  CDC_TransmitCplt_FS
};


static int8_t CDC_Init_FS(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4905      	ldr	r1, [pc, #20]	@ (8008d20 <CDC_Init_FS+0x1c>)
 8008d0c:	4805      	ldr	r0, [pc, #20]	@ (8008d24 <CDC_Init_FS+0x20>)
 8008d0e:	f7fe fc11 	bl	8007534 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d12:	4905      	ldr	r1, [pc, #20]	@ (8008d28 <CDC_Init_FS+0x24>)
 8008d14:	4803      	ldr	r0, [pc, #12]	@ (8008d24 <CDC_Init_FS+0x20>)
 8008d16:	f7fe fc2f 	bl	8007578 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20000f88 	.word	0x20000f88
 8008d24:	200004ac 	.word	0x200004ac
 8008d28:	20000788 	.word	0x20000788

08008d2c <CDC_DeInit_FS>:

static int8_t CDC_DeInit_FS(void)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	2b23      	cmp	r3, #35	@ 0x23
 8008d50:	d84a      	bhi.n	8008de8 <CDC_Control_FS+0xac>
 8008d52:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <CDC_Control_FS+0x1c>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008de9 	.word	0x08008de9
 8008d5c:	08008de9 	.word	0x08008de9
 8008d60:	08008de9 	.word	0x08008de9
 8008d64:	08008de9 	.word	0x08008de9
 8008d68:	08008de9 	.word	0x08008de9
 8008d6c:	08008de9 	.word	0x08008de9
 8008d70:	08008de9 	.word	0x08008de9
 8008d74:	08008de9 	.word	0x08008de9
 8008d78:	08008de9 	.word	0x08008de9
 8008d7c:	08008de9 	.word	0x08008de9
 8008d80:	08008de9 	.word	0x08008de9
 8008d84:	08008de9 	.word	0x08008de9
 8008d88:	08008de9 	.word	0x08008de9
 8008d8c:	08008de9 	.word	0x08008de9
 8008d90:	08008de9 	.word	0x08008de9
 8008d94:	08008de9 	.word	0x08008de9
 8008d98:	08008de9 	.word	0x08008de9
 8008d9c:	08008de9 	.word	0x08008de9
 8008da0:	08008de9 	.word	0x08008de9
 8008da4:	08008de9 	.word	0x08008de9
 8008da8:	08008de9 	.word	0x08008de9
 8008dac:	08008de9 	.word	0x08008de9
 8008db0:	08008de9 	.word	0x08008de9
 8008db4:	08008de9 	.word	0x08008de9
 8008db8:	08008de9 	.word	0x08008de9
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	08008de9 	.word	0x08008de9
 8008dc4:	08008de9 	.word	0x08008de9
 8008dc8:	08008de9 	.word	0x08008de9
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008de9 	.word	0x08008de9
 8008dd8:	08008de9 	.word	0x08008de9
 8008ddc:	08008de9 	.word	0x08008de9
 8008de0:	08008de9 	.word	0x08008de9
 8008de4:	08008de9 	.word	0x08008de9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008de8:	bf00      	nop
  }

  return (USBD_OK);
 8008dea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <CDC_Receive_FS>:


static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	480f      	ldr	r0, [pc, #60]	@ (8008e44 <CDC_Receive_FS+0x4c>)
 8008e06:	f7fe fbb7 	bl	8007578 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e0a:	480e      	ldr	r0, [pc, #56]	@ (8008e44 <CDC_Receive_FS+0x4c>)
 8008e0c:	f7fe fc12 	bl	8007634 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0',64);
 8008e16:	2240      	movs	r2, #64	@ 0x40
 8008e18:	2100      	movs	r1, #0
 8008e1a:	480b      	ldr	r0, [pc, #44]	@ (8008e48 <CDC_Receive_FS+0x50>)
 8008e1c:	f001 fa11 	bl	800a242 <memset>
  memcpy (buffer, Buf, len);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	461a      	mov	r2, r3
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4808      	ldr	r0, [pc, #32]	@ (8008e48 <CDC_Receive_FS+0x50>)
 8008e28:	f001 fa9d 	bl	800a366 <memcpy>
  memset (Buf, '\0',len);
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fa05 	bl	800a242 <memset>
  return (USBD_OK);
 8008e38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	200004ac 	.word	0x200004ac
 8008e48:	20000364 	.word	0x20000364

08008e4c <CDC_Transmit_FS>:

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e94 <CDC_Transmit_FS+0x48>)
 8008e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e00b      	b.n	8008e8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e72:	887b      	ldrh	r3, [r7, #2]
 8008e74:	461a      	mov	r2, r3
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	4806      	ldr	r0, [pc, #24]	@ (8008e94 <CDC_Transmit_FS+0x48>)
 8008e7a:	f7fe fb5b 	bl	8007534 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e7e:	4805      	ldr	r0, [pc, #20]	@ (8008e94 <CDC_Transmit_FS+0x48>)
 8008e80:	f7fe fb98 	bl	80075b4 <USBD_CDC_TransmitPacket>
 8008e84:	4603      	mov	r3, r0
 8008e86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	200004ac 	.word	0x200004ac

08008e98 <CDC_TransmitCplt_FS>:

static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	6039      	str	r1, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2212      	movs	r2, #18
 8008ecc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ece:	4b03      	ldr	r3, [pc, #12]	@ (8008edc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	200000e0 	.word	0x200000e0

08008ee0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2204      	movs	r2, #4
 8008ef0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ef2:	4b03      	ldr	r3, [pc, #12]	@ (8008f00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	200000f4 	.word	0x200000f4

08008f04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d105      	bne.n	8008f22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	4907      	ldr	r1, [pc, #28]	@ (8008f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f1a:	4808      	ldr	r0, [pc, #32]	@ (8008f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008f1c:	f7ff fdd6 	bl	8008acc <USBD_GetString>
 8008f20:	e004      	b.n	8008f2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	4904      	ldr	r1, [pc, #16]	@ (8008f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f26:	4805      	ldr	r0, [pc, #20]	@ (8008f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008f28:	f7ff fdd0 	bl	8008acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f2c:	4b02      	ldr	r3, [pc, #8]	@ (8008f38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20001788 	.word	0x20001788
 8008f3c:	0800d9e0 	.word	0x0800d9e0

08008f40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	4904      	ldr	r1, [pc, #16]	@ (8008f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f50:	4804      	ldr	r0, [pc, #16]	@ (8008f64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f52:	f7ff fdbb 	bl	8008acc <USBD_GetString>
  return USBD_StrDesc;
 8008f56:	4b02      	ldr	r3, [pc, #8]	@ (8008f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20001788 	.word	0x20001788
 8008f64:	0800d9f4 	.word	0x0800d9f4

08008f68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	221a      	movs	r2, #26
 8008f78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f7a:	f000 f843 	bl	8009004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f7e:	4b02      	ldr	r3, [pc, #8]	@ (8008f88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	200000f8 	.word	0x200000f8

08008f8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f98:	79fb      	ldrb	r3, [r7, #7]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4907      	ldr	r1, [pc, #28]	@ (8008fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fa2:	4808      	ldr	r0, [pc, #32]	@ (8008fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fa4:	f7ff fd92 	bl	8008acc <USBD_GetString>
 8008fa8:	e004      	b.n	8008fb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4904      	ldr	r1, [pc, #16]	@ (8008fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fae:	4805      	ldr	r0, [pc, #20]	@ (8008fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fb0:	f7ff fd8c 	bl	8008acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb4:	4b02      	ldr	r3, [pc, #8]	@ (8008fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20001788 	.word	0x20001788
 8008fc4:	0800da08 	.word	0x0800da08

08008fc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d105      	bne.n	8008fe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	4907      	ldr	r1, [pc, #28]	@ (8008ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fde:	4808      	ldr	r0, [pc, #32]	@ (8009000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fe0:	f7ff fd74 	bl	8008acc <USBD_GetString>
 8008fe4:	e004      	b.n	8008ff0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4904      	ldr	r1, [pc, #16]	@ (8008ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fea:	4805      	ldr	r0, [pc, #20]	@ (8009000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fec:	f7ff fd6e 	bl	8008acc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ff0:	4b02      	ldr	r3, [pc, #8]	@ (8008ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20001788 	.word	0x20001788
 8009000:	0800da14 	.word	0x0800da14

08009004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800900a:	4b0f      	ldr	r3, [pc, #60]	@ (8009048 <Get_SerialNum+0x44>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009010:	4b0e      	ldr	r3, [pc, #56]	@ (800904c <Get_SerialNum+0x48>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009016:	4b0e      	ldr	r3, [pc, #56]	@ (8009050 <Get_SerialNum+0x4c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d009      	beq.n	800903e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800902a:	2208      	movs	r2, #8
 800902c:	4909      	ldr	r1, [pc, #36]	@ (8009054 <Get_SerialNum+0x50>)
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 f814 	bl	800905c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009034:	2204      	movs	r2, #4
 8009036:	4908      	ldr	r1, [pc, #32]	@ (8009058 <Get_SerialNum+0x54>)
 8009038:	68b8      	ldr	r0, [r7, #8]
 800903a:	f000 f80f 	bl	800905c <IntToUnicode>
  }
}
 800903e:	bf00      	nop
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	1fff7a10 	.word	0x1fff7a10
 800904c:	1fff7a14 	.word	0x1fff7a14
 8009050:	1fff7a18 	.word	0x1fff7a18
 8009054:	200000fa 	.word	0x200000fa
 8009058:	2000010a 	.word	0x2000010a

0800905c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	4613      	mov	r3, r2
 8009068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]
 8009072:	e027      	b.n	80090c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	0f1b      	lsrs	r3, r3, #28
 8009078:	2b09      	cmp	r3, #9
 800907a:	d80b      	bhi.n	8009094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	0f1b      	lsrs	r3, r3, #28
 8009080:	b2da      	uxtb	r2, r3
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4619      	mov	r1, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	440b      	add	r3, r1
 800908c:	3230      	adds	r2, #48	@ 0x30
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e00a      	b.n	80090aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	0f1b      	lsrs	r3, r3, #28
 8009098:	b2da      	uxtb	r2, r3
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	4619      	mov	r1, r3
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	440b      	add	r3, r1
 80090a4:	3237      	adds	r2, #55	@ 0x37
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	3301      	adds	r3, #1
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	4413      	add	r3, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	3301      	adds	r3, #1
 80090c2:	75fb      	strb	r3, [r7, #23]
 80090c4:	7dfa      	ldrb	r2, [r7, #23]
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d3d3      	bcc.n	8009074 <IntToUnicode+0x18>
  }
}
 80090cc:	bf00      	nop
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08a      	sub	sp, #40	@ 0x28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090e4:	f107 0314 	add.w	r3, r7, #20
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	605a      	str	r2, [r3, #4]
 80090ee:	609a      	str	r2, [r3, #8]
 80090f0:	60da      	str	r2, [r3, #12]
 80090f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090fc:	d147      	bne.n	800918e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fe:	2300      	movs	r3, #0
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	4b25      	ldr	r3, [pc, #148]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009106:	4a24      	ldr	r2, [pc, #144]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 8009108:	f043 0301 	orr.w	r3, r3, #1
 800910c:	6313      	str	r3, [r2, #48]	@ 0x30
 800910e:	4b22      	ldr	r3, [pc, #136]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 8009110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800911a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800911e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009120:	2300      	movs	r3, #0
 8009122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009124:	2300      	movs	r3, #0
 8009126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009128:	f107 0314 	add.w	r3, r7, #20
 800912c:	4619      	mov	r1, r3
 800912e:	481b      	ldr	r0, [pc, #108]	@ (800919c <HAL_PCD_MspInit+0xc0>)
 8009130:	f7f9 f9ee 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009134:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913a:	2302      	movs	r3, #2
 800913c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009142:	2300      	movs	r3, #0
 8009144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009146:	230a      	movs	r3, #10
 8009148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	4619      	mov	r1, r3
 8009150:	4812      	ldr	r0, [pc, #72]	@ (800919c <HAL_PCD_MspInit+0xc0>)
 8009152:	f7f9 f9dd 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009156:	4b10      	ldr	r3, [pc, #64]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 8009158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800915a:	4a0f      	ldr	r2, [pc, #60]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 800915c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009160:	6353      	str	r3, [r2, #52]	@ 0x34
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 8009168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800916a:	4a0b      	ldr	r2, [pc, #44]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 800916c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009170:	6453      	str	r3, [r2, #68]	@ 0x44
 8009172:	4b09      	ldr	r3, [pc, #36]	@ (8009198 <HAL_PCD_MspInit+0xbc>)
 8009174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800917e:	2200      	movs	r2, #0
 8009180:	2100      	movs	r1, #0
 8009182:	2043      	movs	r0, #67	@ 0x43
 8009184:	f7f9 f98d 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009188:	2043      	movs	r0, #67	@ 0x43
 800918a:	f7f9 f9a6 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800918e:	bf00      	nop
 8009190:	3728      	adds	r7, #40	@ 0x28
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	40023800 	.word	0x40023800
 800919c:	40020000 	.word	0x40020000

080091a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f7fe fb25 	bl	8007806 <USBD_LL_SetupStage>
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80091d6:	78fa      	ldrb	r2, [r7, #3]
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	4619      	mov	r1, r3
 80091ee:	f7fe fb5f 	bl	80078b0 <USBD_LL_DataOutStage>
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4613      	mov	r3, r2
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	3320      	adds	r3, #32
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	4619      	mov	r1, r3
 8009222:	f7fe fbf8 	bl	8007a16 <USBD_LL_DataInStage>
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fd32 	bl	8007ca6 <USBD_LL_SOF>
}
 8009242:	bf00      	nop
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009252:	2301      	movs	r3, #1
 8009254:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	79db      	ldrb	r3, [r3, #7]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
 8009262:	e008      	b.n	8009276 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	79db      	ldrb	r3, [r3, #7]
 8009268:	2b02      	cmp	r3, #2
 800926a:	d102      	bne.n	8009272 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800926c:	2301      	movs	r3, #1
 800926e:	73fb      	strb	r3, [r7, #15]
 8009270:	e001      	b.n	8009276 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009272:	f7f8 fdf5 	bl	8001e60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800927c:	7bfa      	ldrb	r2, [r7, #15]
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fccc 	bl	8007c1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fc74 	bl	8007b7a <USBD_LL_Reset>
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fcc7 	bl	8007c3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	6812      	ldr	r2, [r2, #0]
 80092be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092c2:	f043 0301 	orr.w	r3, r3, #1
 80092c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	7adb      	ldrb	r3, [r3, #11]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <HAL_PCD_SuspendCallback+0x48>)
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	4a03      	ldr	r2, [pc, #12]	@ (80092e4 <HAL_PCD_SuspendCallback+0x48>)
 80092d6:	f043 0306 	orr.w	r3, r3, #6
 80092da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	e000ed00 	.word	0xe000ed00

080092e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fcbd 	bl	8007c76 <USBD_LL_Resume>
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fd15 	bl	8007d4a <USBD_LL_IsoOUTIncomplete>
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe fcd1 	bl	8007ce6 <USBD_LL_IsoINIncomplete>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe fd27 	bl	8007dae <USBD_LL_DevConnected>
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd24 	bl	8007dc4 <USBD_LL_DevDisconnected>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d13c      	bne.n	800940e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009394:	4a20      	ldr	r2, [pc, #128]	@ (8009418 <USBD_LL_Init+0x94>)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a1e      	ldr	r2, [pc, #120]	@ (8009418 <USBD_LL_Init+0x94>)
 80093a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009418 <USBD_LL_Init+0x94>)
 80093a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80093aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009418 <USBD_LL_Init+0x94>)
 80093ae:	2204      	movs	r2, #4
 80093b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093b2:	4b19      	ldr	r3, [pc, #100]	@ (8009418 <USBD_LL_Init+0x94>)
 80093b4:	2202      	movs	r2, #2
 80093b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093b8:	4b17      	ldr	r3, [pc, #92]	@ (8009418 <USBD_LL_Init+0x94>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093be:	4b16      	ldr	r3, [pc, #88]	@ (8009418 <USBD_LL_Init+0x94>)
 80093c0:	2202      	movs	r2, #2
 80093c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093c4:	4b14      	ldr	r3, [pc, #80]	@ (8009418 <USBD_LL_Init+0x94>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093ca:	4b13      	ldr	r3, [pc, #76]	@ (8009418 <USBD_LL_Init+0x94>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093d0:	4b11      	ldr	r3, [pc, #68]	@ (8009418 <USBD_LL_Init+0x94>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093d6:	4b10      	ldr	r3, [pc, #64]	@ (8009418 <USBD_LL_Init+0x94>)
 80093d8:	2200      	movs	r2, #0
 80093da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009418 <USBD_LL_Init+0x94>)
 80093de:	2200      	movs	r2, #0
 80093e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093e2:	480d      	ldr	r0, [pc, #52]	@ (8009418 <USBD_LL_Init+0x94>)
 80093e4:	f7fa fa6e 	bl	80038c4 <HAL_PCD_Init>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093ee:	f7f8 fd37 	bl	8001e60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093f2:	2180      	movs	r1, #128	@ 0x80
 80093f4:	4808      	ldr	r0, [pc, #32]	@ (8009418 <USBD_LL_Init+0x94>)
 80093f6:	f7fb fc9a 	bl	8004d2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093fa:	2240      	movs	r2, #64	@ 0x40
 80093fc:	2100      	movs	r1, #0
 80093fe:	4806      	ldr	r0, [pc, #24]	@ (8009418 <USBD_LL_Init+0x94>)
 8009400:	f7fb fc4e 	bl	8004ca0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009404:	2280      	movs	r2, #128	@ 0x80
 8009406:	2101      	movs	r1, #1
 8009408:	4803      	ldr	r0, [pc, #12]	@ (8009418 <USBD_LL_Init+0x94>)
 800940a:	f7fb fc49 	bl	8004ca0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20001988 	.word	0x20001988

0800941c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009432:	4618      	mov	r0, r3
 8009434:	f7fa fb55 	bl	8003ae2 <HAL_PCD_Start>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f942 	bl	80096c8 <USBD_Get_USB_Status>
 8009444:	4603      	mov	r3, r0
 8009446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009448:	7bbb      	ldrb	r3, [r7, #14]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	4608      	mov	r0, r1
 800945c:	4611      	mov	r1, r2
 800945e:	461a      	mov	r2, r3
 8009460:	4603      	mov	r3, r0
 8009462:	70fb      	strb	r3, [r7, #3]
 8009464:	460b      	mov	r3, r1
 8009466:	70bb      	strb	r3, [r7, #2]
 8009468:	4613      	mov	r3, r2
 800946a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800947a:	78bb      	ldrb	r3, [r7, #2]
 800947c:	883a      	ldrh	r2, [r7, #0]
 800947e:	78f9      	ldrb	r1, [r7, #3]
 8009480:	f7fb f829 	bl	80044d6 <HAL_PCD_EP_Open>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f91c 	bl	80096c8 <USBD_Get_USB_Status>
 8009490:	4603      	mov	r3, r0
 8009492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009494:	7bbb      	ldrb	r3, [r7, #14]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fb f874 	bl	80045aa <HAL_PCD_EP_Close>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f8fd 	bl	80096c8 <USBD_Get_USB_Status>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fb f92c 	bl	8004758 <HAL_PCD_EP_SetStall>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f8de 	bl	80096c8 <USBD_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009534:	78fa      	ldrb	r2, [r7, #3]
 8009536:	4611      	mov	r1, r2
 8009538:	4618      	mov	r0, r3
 800953a:	f7fb f970 	bl	800481e <HAL_PCD_EP_ClrStall>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 f8bf 	bl	80096c8 <USBD_Get_USB_Status>
 800954a:	4603      	mov	r3, r0
 800954c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800956a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800956c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009570:	2b00      	cmp	r3, #0
 8009572:	da0b      	bge.n	800958c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	3316      	adds	r3, #22
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	e00b      	b.n	80095a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	4613      	mov	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	440b      	add	r3, r1
 800959e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80095a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fa ff5d 	bl	800448e <HAL_PCD_SetAddress>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f874 	bl	80096c8 <USBD_Get_USB_Status>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b086      	sub	sp, #24
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
 80095fa:	460b      	mov	r3, r1
 80095fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800960c:	7af9      	ldrb	r1, [r7, #11]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	f7fb f867 	bl	80046e4 <HAL_PCD_EP_Transmit>
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f853 	bl	80096c8 <USBD_Get_USB_Status>
 8009622:	4603      	mov	r3, r0
 8009624:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009626:	7dbb      	ldrb	r3, [r7, #22]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	607a      	str	r2, [r7, #4]
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	460b      	mov	r3, r1
 800963e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800964e:	7af9      	ldrb	r1, [r7, #11]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	f7fa fff3 	bl	800463e <HAL_PCD_EP_Receive>
 8009658:	4603      	mov	r3, r0
 800965a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f832 	bl	80096c8 <USBD_Get_USB_Status>
 8009664:	4603      	mov	r3, r0
 8009666:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009668:	7dbb      	ldrb	r3, [r7, #22]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	4611      	mov	r1, r2
 8009688:	4618      	mov	r0, r3
 800968a:	f7fb f813 	bl	80046b4 <HAL_PCD_EP_GetRxCount>
 800968e:	4603      	mov	r3, r0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096a0:	4b03      	ldr	r3, [pc, #12]	@ (80096b0 <USBD_static_malloc+0x18>)
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20001e6c 	.word	0x20001e6c

080096b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d817      	bhi.n	800970c <USBD_Get_USB_Status+0x44>
 80096dc:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <USBD_Get_USB_Status+0x1c>)
 80096de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e2:	bf00      	nop
 80096e4:	080096f5 	.word	0x080096f5
 80096e8:	080096fb 	.word	0x080096fb
 80096ec:	08009701 	.word	0x08009701
 80096f0:	08009707 	.word	0x08009707
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]
    break;
 80096f8:	e00b      	b.n	8009712 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096fa:	2303      	movs	r3, #3
 80096fc:	73fb      	strb	r3, [r7, #15]
    break;
 80096fe:	e008      	b.n	8009712 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009700:	2301      	movs	r3, #1
 8009702:	73fb      	strb	r3, [r7, #15]
    break;
 8009704:	e005      	b.n	8009712 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009706:	2303      	movs	r3, #3
 8009708:	73fb      	strb	r3, [r7, #15]
    break;
 800970a:	e002      	b.n	8009712 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800970c:	2303      	movs	r3, #3
 800970e:	73fb      	strb	r3, [r7, #15]
    break;
 8009710:	bf00      	nop
  }
  return usb_status;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <__cvt>:
 8009720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	ec57 6b10 	vmov	r6, r7, d0
 8009728:	2f00      	cmp	r7, #0
 800972a:	460c      	mov	r4, r1
 800972c:	4619      	mov	r1, r3
 800972e:	463b      	mov	r3, r7
 8009730:	bfbb      	ittet	lt
 8009732:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009736:	461f      	movlt	r7, r3
 8009738:	2300      	movge	r3, #0
 800973a:	232d      	movlt	r3, #45	@ 0x2d
 800973c:	700b      	strb	r3, [r1, #0]
 800973e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009740:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009744:	4691      	mov	r9, r2
 8009746:	f023 0820 	bic.w	r8, r3, #32
 800974a:	bfbc      	itt	lt
 800974c:	4632      	movlt	r2, r6
 800974e:	4616      	movlt	r6, r2
 8009750:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009754:	d005      	beq.n	8009762 <__cvt+0x42>
 8009756:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800975a:	d100      	bne.n	800975e <__cvt+0x3e>
 800975c:	3401      	adds	r4, #1
 800975e:	2102      	movs	r1, #2
 8009760:	e000      	b.n	8009764 <__cvt+0x44>
 8009762:	2103      	movs	r1, #3
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	ab02      	add	r3, sp, #8
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	ec47 6b10 	vmov	d0, r6, r7
 8009770:	4653      	mov	r3, sl
 8009772:	4622      	mov	r2, r4
 8009774:	f000 fe90 	bl	800a498 <_dtoa_r>
 8009778:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800977c:	4605      	mov	r5, r0
 800977e:	d119      	bne.n	80097b4 <__cvt+0x94>
 8009780:	f019 0f01 	tst.w	r9, #1
 8009784:	d00e      	beq.n	80097a4 <__cvt+0x84>
 8009786:	eb00 0904 	add.w	r9, r0, r4
 800978a:	2200      	movs	r2, #0
 800978c:	2300      	movs	r3, #0
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	f7f7 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 8009796:	b108      	cbz	r0, 800979c <__cvt+0x7c>
 8009798:	f8cd 900c 	str.w	r9, [sp, #12]
 800979c:	2230      	movs	r2, #48	@ 0x30
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	454b      	cmp	r3, r9
 80097a2:	d31e      	bcc.n	80097e2 <__cvt+0xc2>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097a8:	1b5b      	subs	r3, r3, r5
 80097aa:	4628      	mov	r0, r5
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	b004      	add	sp, #16
 80097b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097b8:	eb00 0904 	add.w	r9, r0, r4
 80097bc:	d1e5      	bne.n	800978a <__cvt+0x6a>
 80097be:	7803      	ldrb	r3, [r0, #0]
 80097c0:	2b30      	cmp	r3, #48	@ 0x30
 80097c2:	d10a      	bne.n	80097da <__cvt+0xba>
 80097c4:	2200      	movs	r2, #0
 80097c6:	2300      	movs	r3, #0
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f7 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80097d0:	b918      	cbnz	r0, 80097da <__cvt+0xba>
 80097d2:	f1c4 0401 	rsb	r4, r4, #1
 80097d6:	f8ca 4000 	str.w	r4, [sl]
 80097da:	f8da 3000 	ldr.w	r3, [sl]
 80097de:	4499      	add	r9, r3
 80097e0:	e7d3      	b.n	800978a <__cvt+0x6a>
 80097e2:	1c59      	adds	r1, r3, #1
 80097e4:	9103      	str	r1, [sp, #12]
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	e7d9      	b.n	800979e <__cvt+0x7e>

080097ea <__exponent>:
 80097ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ec:	2900      	cmp	r1, #0
 80097ee:	bfba      	itte	lt
 80097f0:	4249      	neglt	r1, r1
 80097f2:	232d      	movlt	r3, #45	@ 0x2d
 80097f4:	232b      	movge	r3, #43	@ 0x2b
 80097f6:	2909      	cmp	r1, #9
 80097f8:	7002      	strb	r2, [r0, #0]
 80097fa:	7043      	strb	r3, [r0, #1]
 80097fc:	dd29      	ble.n	8009852 <__exponent+0x68>
 80097fe:	f10d 0307 	add.w	r3, sp, #7
 8009802:	461d      	mov	r5, r3
 8009804:	270a      	movs	r7, #10
 8009806:	461a      	mov	r2, r3
 8009808:	fbb1 f6f7 	udiv	r6, r1, r7
 800980c:	fb07 1416 	mls	r4, r7, r6, r1
 8009810:	3430      	adds	r4, #48	@ 0x30
 8009812:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009816:	460c      	mov	r4, r1
 8009818:	2c63      	cmp	r4, #99	@ 0x63
 800981a:	f103 33ff 	add.w	r3, r3, #4294967295
 800981e:	4631      	mov	r1, r6
 8009820:	dcf1      	bgt.n	8009806 <__exponent+0x1c>
 8009822:	3130      	adds	r1, #48	@ 0x30
 8009824:	1e94      	subs	r4, r2, #2
 8009826:	f803 1c01 	strb.w	r1, [r3, #-1]
 800982a:	1c41      	adds	r1, r0, #1
 800982c:	4623      	mov	r3, r4
 800982e:	42ab      	cmp	r3, r5
 8009830:	d30a      	bcc.n	8009848 <__exponent+0x5e>
 8009832:	f10d 0309 	add.w	r3, sp, #9
 8009836:	1a9b      	subs	r3, r3, r2
 8009838:	42ac      	cmp	r4, r5
 800983a:	bf88      	it	hi
 800983c:	2300      	movhi	r3, #0
 800983e:	3302      	adds	r3, #2
 8009840:	4403      	add	r3, r0
 8009842:	1a18      	subs	r0, r3, r0
 8009844:	b003      	add	sp, #12
 8009846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009848:	f813 6b01 	ldrb.w	r6, [r3], #1
 800984c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009850:	e7ed      	b.n	800982e <__exponent+0x44>
 8009852:	2330      	movs	r3, #48	@ 0x30
 8009854:	3130      	adds	r1, #48	@ 0x30
 8009856:	7083      	strb	r3, [r0, #2]
 8009858:	70c1      	strb	r1, [r0, #3]
 800985a:	1d03      	adds	r3, r0, #4
 800985c:	e7f1      	b.n	8009842 <__exponent+0x58>
	...

08009860 <_printf_float>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	b08d      	sub	sp, #52	@ 0x34
 8009866:	460c      	mov	r4, r1
 8009868:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800986c:	4616      	mov	r6, r2
 800986e:	461f      	mov	r7, r3
 8009870:	4605      	mov	r5, r0
 8009872:	f000 fd01 	bl	800a278 <_localeconv_r>
 8009876:	6803      	ldr	r3, [r0, #0]
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	4618      	mov	r0, r3
 800987c:	f7f6 fcf8 	bl	8000270 <strlen>
 8009880:	2300      	movs	r3, #0
 8009882:	930a      	str	r3, [sp, #40]	@ 0x28
 8009884:	f8d8 3000 	ldr.w	r3, [r8]
 8009888:	9005      	str	r0, [sp, #20]
 800988a:	3307      	adds	r3, #7
 800988c:	f023 0307 	bic.w	r3, r3, #7
 8009890:	f103 0208 	add.w	r2, r3, #8
 8009894:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009898:	f8d4 b000 	ldr.w	fp, [r4]
 800989c:	f8c8 2000 	str.w	r2, [r8]
 80098a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098a8:	9307      	str	r3, [sp, #28]
 80098aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80098ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098b6:	4b9c      	ldr	r3, [pc, #624]	@ (8009b28 <_printf_float+0x2c8>)
 80098b8:	f04f 32ff 	mov.w	r2, #4294967295
 80098bc:	f7f7 f936 	bl	8000b2c <__aeabi_dcmpun>
 80098c0:	bb70      	cbnz	r0, 8009920 <_printf_float+0xc0>
 80098c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098c6:	4b98      	ldr	r3, [pc, #608]	@ (8009b28 <_printf_float+0x2c8>)
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	f7f7 f910 	bl	8000af0 <__aeabi_dcmple>
 80098d0:	bb30      	cbnz	r0, 8009920 <_printf_float+0xc0>
 80098d2:	2200      	movs	r2, #0
 80098d4:	2300      	movs	r3, #0
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f7 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80098de:	b110      	cbz	r0, 80098e6 <_printf_float+0x86>
 80098e0:	232d      	movs	r3, #45	@ 0x2d
 80098e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098e6:	4a91      	ldr	r2, [pc, #580]	@ (8009b2c <_printf_float+0x2cc>)
 80098e8:	4b91      	ldr	r3, [pc, #580]	@ (8009b30 <_printf_float+0x2d0>)
 80098ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80098ee:	bf94      	ite	ls
 80098f0:	4690      	movls	r8, r2
 80098f2:	4698      	movhi	r8, r3
 80098f4:	2303      	movs	r3, #3
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	f02b 0304 	bic.w	r3, fp, #4
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	f04f 0900 	mov.w	r9, #0
 8009902:	9700      	str	r7, [sp, #0]
 8009904:	4633      	mov	r3, r6
 8009906:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f000 f9d2 	bl	8009cb4 <_printf_common>
 8009910:	3001      	adds	r0, #1
 8009912:	f040 808d 	bne.w	8009a30 <_printf_float+0x1d0>
 8009916:	f04f 30ff 	mov.w	r0, #4294967295
 800991a:	b00d      	add	sp, #52	@ 0x34
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	4642      	mov	r2, r8
 8009922:	464b      	mov	r3, r9
 8009924:	4640      	mov	r0, r8
 8009926:	4649      	mov	r1, r9
 8009928:	f7f7 f900 	bl	8000b2c <__aeabi_dcmpun>
 800992c:	b140      	cbz	r0, 8009940 <_printf_float+0xe0>
 800992e:	464b      	mov	r3, r9
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfbc      	itt	lt
 8009934:	232d      	movlt	r3, #45	@ 0x2d
 8009936:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800993a:	4a7e      	ldr	r2, [pc, #504]	@ (8009b34 <_printf_float+0x2d4>)
 800993c:	4b7e      	ldr	r3, [pc, #504]	@ (8009b38 <_printf_float+0x2d8>)
 800993e:	e7d4      	b.n	80098ea <_printf_float+0x8a>
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009946:	9206      	str	r2, [sp, #24]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	d13b      	bne.n	80099c4 <_printf_float+0x164>
 800994c:	2306      	movs	r3, #6
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009954:	2300      	movs	r3, #0
 8009956:	6022      	str	r2, [r4, #0]
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	ab0a      	add	r3, sp, #40	@ 0x28
 800995c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009960:	ab09      	add	r3, sp, #36	@ 0x24
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	6861      	ldr	r1, [r4, #4]
 8009966:	ec49 8b10 	vmov	d0, r8, r9
 800996a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800996e:	4628      	mov	r0, r5
 8009970:	f7ff fed6 	bl	8009720 <__cvt>
 8009974:	9b06      	ldr	r3, [sp, #24]
 8009976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009978:	2b47      	cmp	r3, #71	@ 0x47
 800997a:	4680      	mov	r8, r0
 800997c:	d129      	bne.n	80099d2 <_printf_float+0x172>
 800997e:	1cc8      	adds	r0, r1, #3
 8009980:	db02      	blt.n	8009988 <_printf_float+0x128>
 8009982:	6863      	ldr	r3, [r4, #4]
 8009984:	4299      	cmp	r1, r3
 8009986:	dd41      	ble.n	8009a0c <_printf_float+0x1ac>
 8009988:	f1aa 0a02 	sub.w	sl, sl, #2
 800998c:	fa5f fa8a 	uxtb.w	sl, sl
 8009990:	3901      	subs	r1, #1
 8009992:	4652      	mov	r2, sl
 8009994:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009998:	9109      	str	r1, [sp, #36]	@ 0x24
 800999a:	f7ff ff26 	bl	80097ea <__exponent>
 800999e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099a0:	1813      	adds	r3, r2, r0
 80099a2:	2a01      	cmp	r2, #1
 80099a4:	4681      	mov	r9, r0
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	dc02      	bgt.n	80099b0 <_printf_float+0x150>
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	07d2      	lsls	r2, r2, #31
 80099ae:	d501      	bpl.n	80099b4 <_printf_float+0x154>
 80099b0:	3301      	adds	r3, #1
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0a2      	beq.n	8009902 <_printf_float+0xa2>
 80099bc:	232d      	movs	r3, #45	@ 0x2d
 80099be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099c2:	e79e      	b.n	8009902 <_printf_float+0xa2>
 80099c4:	9a06      	ldr	r2, [sp, #24]
 80099c6:	2a47      	cmp	r2, #71	@ 0x47
 80099c8:	d1c2      	bne.n	8009950 <_printf_float+0xf0>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1c0      	bne.n	8009950 <_printf_float+0xf0>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e7bd      	b.n	800994e <_printf_float+0xee>
 80099d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099d6:	d9db      	bls.n	8009990 <_printf_float+0x130>
 80099d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80099dc:	d118      	bne.n	8009a10 <_printf_float+0x1b0>
 80099de:	2900      	cmp	r1, #0
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	dd0b      	ble.n	80099fc <_printf_float+0x19c>
 80099e4:	6121      	str	r1, [r4, #16]
 80099e6:	b913      	cbnz	r3, 80099ee <_printf_float+0x18e>
 80099e8:	6822      	ldr	r2, [r4, #0]
 80099ea:	07d0      	lsls	r0, r2, #31
 80099ec:	d502      	bpl.n	80099f4 <_printf_float+0x194>
 80099ee:	3301      	adds	r3, #1
 80099f0:	440b      	add	r3, r1
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80099f6:	f04f 0900 	mov.w	r9, #0
 80099fa:	e7db      	b.n	80099b4 <_printf_float+0x154>
 80099fc:	b913      	cbnz	r3, 8009a04 <_printf_float+0x1a4>
 80099fe:	6822      	ldr	r2, [r4, #0]
 8009a00:	07d2      	lsls	r2, r2, #31
 8009a02:	d501      	bpl.n	8009a08 <_printf_float+0x1a8>
 8009a04:	3302      	adds	r3, #2
 8009a06:	e7f4      	b.n	80099f2 <_printf_float+0x192>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e7f2      	b.n	80099f2 <_printf_float+0x192>
 8009a0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a12:	4299      	cmp	r1, r3
 8009a14:	db05      	blt.n	8009a22 <_printf_float+0x1c2>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	6121      	str	r1, [r4, #16]
 8009a1a:	07d8      	lsls	r0, r3, #31
 8009a1c:	d5ea      	bpl.n	80099f4 <_printf_float+0x194>
 8009a1e:	1c4b      	adds	r3, r1, #1
 8009a20:	e7e7      	b.n	80099f2 <_printf_float+0x192>
 8009a22:	2900      	cmp	r1, #0
 8009a24:	bfd4      	ite	le
 8009a26:	f1c1 0202 	rsble	r2, r1, #2
 8009a2a:	2201      	movgt	r2, #1
 8009a2c:	4413      	add	r3, r2
 8009a2e:	e7e0      	b.n	80099f2 <_printf_float+0x192>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	055a      	lsls	r2, r3, #21
 8009a34:	d407      	bmi.n	8009a46 <_printf_float+0x1e6>
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	4642      	mov	r2, r8
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	d12b      	bne.n	8009a9c <_printf_float+0x23c>
 8009a44:	e767      	b.n	8009916 <_printf_float+0xb6>
 8009a46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a4a:	f240 80dd 	bls.w	8009c08 <_printf_float+0x3a8>
 8009a4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a52:	2200      	movs	r2, #0
 8009a54:	2300      	movs	r3, #0
 8009a56:	f7f7 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d033      	beq.n	8009ac6 <_printf_float+0x266>
 8009a5e:	4a37      	ldr	r2, [pc, #220]	@ (8009b3c <_printf_float+0x2dc>)
 8009a60:	2301      	movs	r3, #1
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f af54 	beq.w	8009916 <_printf_float+0xb6>
 8009a6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009a72:	4543      	cmp	r3, r8
 8009a74:	db02      	blt.n	8009a7c <_printf_float+0x21c>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	07d8      	lsls	r0, r3, #31
 8009a7a:	d50f      	bpl.n	8009a9c <_printf_float+0x23c>
 8009a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a80:	4631      	mov	r1, r6
 8009a82:	4628      	mov	r0, r5
 8009a84:	47b8      	blx	r7
 8009a86:	3001      	adds	r0, #1
 8009a88:	f43f af45 	beq.w	8009916 <_printf_float+0xb6>
 8009a8c:	f04f 0900 	mov.w	r9, #0
 8009a90:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a94:	f104 0a1a 	add.w	sl, r4, #26
 8009a98:	45c8      	cmp	r8, r9
 8009a9a:	dc09      	bgt.n	8009ab0 <_printf_float+0x250>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	079b      	lsls	r3, r3, #30
 8009aa0:	f100 8103 	bmi.w	8009caa <_printf_float+0x44a>
 8009aa4:	68e0      	ldr	r0, [r4, #12]
 8009aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aa8:	4298      	cmp	r0, r3
 8009aaa:	bfb8      	it	lt
 8009aac:	4618      	movlt	r0, r3
 8009aae:	e734      	b.n	800991a <_printf_float+0xba>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	f43f af2b 	beq.w	8009916 <_printf_float+0xb6>
 8009ac0:	f109 0901 	add.w	r9, r9, #1
 8009ac4:	e7e8      	b.n	8009a98 <_printf_float+0x238>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dc39      	bgt.n	8009b40 <_printf_float+0x2e0>
 8009acc:	4a1b      	ldr	r2, [pc, #108]	@ (8009b3c <_printf_float+0x2dc>)
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	47b8      	blx	r7
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	f43f af1d 	beq.w	8009916 <_printf_float+0xb6>
 8009adc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ae0:	ea59 0303 	orrs.w	r3, r9, r3
 8009ae4:	d102      	bne.n	8009aec <_printf_float+0x28c>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	07d9      	lsls	r1, r3, #31
 8009aea:	d5d7      	bpl.n	8009a9c <_printf_float+0x23c>
 8009aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f af0d 	beq.w	8009916 <_printf_float+0xb6>
 8009afc:	f04f 0a00 	mov.w	sl, #0
 8009b00:	f104 0b1a 	add.w	fp, r4, #26
 8009b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b06:	425b      	negs	r3, r3
 8009b08:	4553      	cmp	r3, sl
 8009b0a:	dc01      	bgt.n	8009b10 <_printf_float+0x2b0>
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	e793      	b.n	8009a38 <_printf_float+0x1d8>
 8009b10:	2301      	movs	r3, #1
 8009b12:	465a      	mov	r2, fp
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f aefb 	beq.w	8009916 <_printf_float+0xb6>
 8009b20:	f10a 0a01 	add.w	sl, sl, #1
 8009b24:	e7ee      	b.n	8009b04 <_printf_float+0x2a4>
 8009b26:	bf00      	nop
 8009b28:	7fefffff 	.word	0x7fefffff
 8009b2c:	0800da3c 	.word	0x0800da3c
 8009b30:	0800da40 	.word	0x0800da40
 8009b34:	0800da44 	.word	0x0800da44
 8009b38:	0800da48 	.word	0x0800da48
 8009b3c:	0800da4c 	.word	0x0800da4c
 8009b40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b46:	4553      	cmp	r3, sl
 8009b48:	bfa8      	it	ge
 8009b4a:	4653      	movge	r3, sl
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	4699      	mov	r9, r3
 8009b50:	dc36      	bgt.n	8009bc0 <_printf_float+0x360>
 8009b52:	f04f 0b00 	mov.w	fp, #0
 8009b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b5a:	f104 021a 	add.w	r2, r4, #26
 8009b5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b60:	9306      	str	r3, [sp, #24]
 8009b62:	eba3 0309 	sub.w	r3, r3, r9
 8009b66:	455b      	cmp	r3, fp
 8009b68:	dc31      	bgt.n	8009bce <_printf_float+0x36e>
 8009b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6c:	459a      	cmp	sl, r3
 8009b6e:	dc3a      	bgt.n	8009be6 <_printf_float+0x386>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	07da      	lsls	r2, r3, #31
 8009b74:	d437      	bmi.n	8009be6 <_printf_float+0x386>
 8009b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b78:	ebaa 0903 	sub.w	r9, sl, r3
 8009b7c:	9b06      	ldr	r3, [sp, #24]
 8009b7e:	ebaa 0303 	sub.w	r3, sl, r3
 8009b82:	4599      	cmp	r9, r3
 8009b84:	bfa8      	it	ge
 8009b86:	4699      	movge	r9, r3
 8009b88:	f1b9 0f00 	cmp.w	r9, #0
 8009b8c:	dc33      	bgt.n	8009bf6 <_printf_float+0x396>
 8009b8e:	f04f 0800 	mov.w	r8, #0
 8009b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b96:	f104 0b1a 	add.w	fp, r4, #26
 8009b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9c:	ebaa 0303 	sub.w	r3, sl, r3
 8009ba0:	eba3 0309 	sub.w	r3, r3, r9
 8009ba4:	4543      	cmp	r3, r8
 8009ba6:	f77f af79 	ble.w	8009a9c <_printf_float+0x23c>
 8009baa:	2301      	movs	r3, #1
 8009bac:	465a      	mov	r2, fp
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b8      	blx	r7
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	f43f aeae 	beq.w	8009916 <_printf_float+0xb6>
 8009bba:	f108 0801 	add.w	r8, r8, #1
 8009bbe:	e7ec      	b.n	8009b9a <_printf_float+0x33a>
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	47b8      	blx	r7
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d1c2      	bne.n	8009b52 <_printf_float+0x2f2>
 8009bcc:	e6a3      	b.n	8009916 <_printf_float+0xb6>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	9206      	str	r2, [sp, #24]
 8009bd6:	47b8      	blx	r7
 8009bd8:	3001      	adds	r0, #1
 8009bda:	f43f ae9c 	beq.w	8009916 <_printf_float+0xb6>
 8009bde:	9a06      	ldr	r2, [sp, #24]
 8009be0:	f10b 0b01 	add.w	fp, fp, #1
 8009be4:	e7bb      	b.n	8009b5e <_printf_float+0x2fe>
 8009be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d1c0      	bne.n	8009b76 <_printf_float+0x316>
 8009bf4:	e68f      	b.n	8009916 <_printf_float+0xb6>
 8009bf6:	9a06      	ldr	r2, [sp, #24]
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	4442      	add	r2, r8
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	d1c3      	bne.n	8009b8e <_printf_float+0x32e>
 8009c06:	e686      	b.n	8009916 <_printf_float+0xb6>
 8009c08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c0c:	f1ba 0f01 	cmp.w	sl, #1
 8009c10:	dc01      	bgt.n	8009c16 <_printf_float+0x3b6>
 8009c12:	07db      	lsls	r3, r3, #31
 8009c14:	d536      	bpl.n	8009c84 <_printf_float+0x424>
 8009c16:	2301      	movs	r3, #1
 8009c18:	4642      	mov	r2, r8
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	47b8      	blx	r7
 8009c20:	3001      	adds	r0, #1
 8009c22:	f43f ae78 	beq.w	8009916 <_printf_float+0xb6>
 8009c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	f43f ae70 	beq.w	8009916 <_printf_float+0xb6>
 8009c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c42:	f7f6 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c46:	b9c0      	cbnz	r0, 8009c7a <_printf_float+0x41a>
 8009c48:	4653      	mov	r3, sl
 8009c4a:	f108 0201 	add.w	r2, r8, #1
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b8      	blx	r7
 8009c54:	3001      	adds	r0, #1
 8009c56:	d10c      	bne.n	8009c72 <_printf_float+0x412>
 8009c58:	e65d      	b.n	8009916 <_printf_float+0xb6>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	465a      	mov	r2, fp
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b8      	blx	r7
 8009c64:	3001      	adds	r0, #1
 8009c66:	f43f ae56 	beq.w	8009916 <_printf_float+0xb6>
 8009c6a:	f108 0801 	add.w	r8, r8, #1
 8009c6e:	45d0      	cmp	r8, sl
 8009c70:	dbf3      	blt.n	8009c5a <_printf_float+0x3fa>
 8009c72:	464b      	mov	r3, r9
 8009c74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009c78:	e6df      	b.n	8009a3a <_printf_float+0x1da>
 8009c7a:	f04f 0800 	mov.w	r8, #0
 8009c7e:	f104 0b1a 	add.w	fp, r4, #26
 8009c82:	e7f4      	b.n	8009c6e <_printf_float+0x40e>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4642      	mov	r2, r8
 8009c88:	e7e1      	b.n	8009c4e <_printf_float+0x3ee>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	464a      	mov	r2, r9
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f ae3e 	beq.w	8009916 <_printf_float+0xb6>
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	68e3      	ldr	r3, [r4, #12]
 8009ca0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ca2:	1a5b      	subs	r3, r3, r1
 8009ca4:	4543      	cmp	r3, r8
 8009ca6:	dcf0      	bgt.n	8009c8a <_printf_float+0x42a>
 8009ca8:	e6fc      	b.n	8009aa4 <_printf_float+0x244>
 8009caa:	f04f 0800 	mov.w	r8, #0
 8009cae:	f104 0919 	add.w	r9, r4, #25
 8009cb2:	e7f4      	b.n	8009c9e <_printf_float+0x43e>

08009cb4 <_printf_common>:
 8009cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	4616      	mov	r6, r2
 8009cba:	4698      	mov	r8, r3
 8009cbc:	688a      	ldr	r2, [r1, #8]
 8009cbe:	690b      	ldr	r3, [r1, #16]
 8009cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	bfb8      	it	lt
 8009cc8:	4613      	movlt	r3, r2
 8009cca:	6033      	str	r3, [r6, #0]
 8009ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	b10a      	cbz	r2, 8009cda <_printf_common+0x26>
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	6033      	str	r3, [r6, #0]
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	0699      	lsls	r1, r3, #26
 8009cde:	bf42      	ittt	mi
 8009ce0:	6833      	ldrmi	r3, [r6, #0]
 8009ce2:	3302      	addmi	r3, #2
 8009ce4:	6033      	strmi	r3, [r6, #0]
 8009ce6:	6825      	ldr	r5, [r4, #0]
 8009ce8:	f015 0506 	ands.w	r5, r5, #6
 8009cec:	d106      	bne.n	8009cfc <_printf_common+0x48>
 8009cee:	f104 0a19 	add.w	sl, r4, #25
 8009cf2:	68e3      	ldr	r3, [r4, #12]
 8009cf4:	6832      	ldr	r2, [r6, #0]
 8009cf6:	1a9b      	subs	r3, r3, r2
 8009cf8:	42ab      	cmp	r3, r5
 8009cfa:	dc26      	bgt.n	8009d4a <_printf_common+0x96>
 8009cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d00:	6822      	ldr	r2, [r4, #0]
 8009d02:	3b00      	subs	r3, #0
 8009d04:	bf18      	it	ne
 8009d06:	2301      	movne	r3, #1
 8009d08:	0692      	lsls	r2, r2, #26
 8009d0a:	d42b      	bmi.n	8009d64 <_printf_common+0xb0>
 8009d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d10:	4641      	mov	r1, r8
 8009d12:	4638      	mov	r0, r7
 8009d14:	47c8      	blx	r9
 8009d16:	3001      	adds	r0, #1
 8009d18:	d01e      	beq.n	8009d58 <_printf_common+0xa4>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	6922      	ldr	r2, [r4, #16]
 8009d1e:	f003 0306 	and.w	r3, r3, #6
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	bf02      	ittt	eq
 8009d26:	68e5      	ldreq	r5, [r4, #12]
 8009d28:	6833      	ldreq	r3, [r6, #0]
 8009d2a:	1aed      	subeq	r5, r5, r3
 8009d2c:	68a3      	ldr	r3, [r4, #8]
 8009d2e:	bf0c      	ite	eq
 8009d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d34:	2500      	movne	r5, #0
 8009d36:	4293      	cmp	r3, r2
 8009d38:	bfc4      	itt	gt
 8009d3a:	1a9b      	subgt	r3, r3, r2
 8009d3c:	18ed      	addgt	r5, r5, r3
 8009d3e:	2600      	movs	r6, #0
 8009d40:	341a      	adds	r4, #26
 8009d42:	42b5      	cmp	r5, r6
 8009d44:	d11a      	bne.n	8009d7c <_printf_common+0xc8>
 8009d46:	2000      	movs	r0, #0
 8009d48:	e008      	b.n	8009d5c <_printf_common+0xa8>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4652      	mov	r2, sl
 8009d4e:	4641      	mov	r1, r8
 8009d50:	4638      	mov	r0, r7
 8009d52:	47c8      	blx	r9
 8009d54:	3001      	adds	r0, #1
 8009d56:	d103      	bne.n	8009d60 <_printf_common+0xac>
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d60:	3501      	adds	r5, #1
 8009d62:	e7c6      	b.n	8009cf2 <_printf_common+0x3e>
 8009d64:	18e1      	adds	r1, r4, r3
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	2030      	movs	r0, #48	@ 0x30
 8009d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d6e:	4422      	add	r2, r4
 8009d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d78:	3302      	adds	r3, #2
 8009d7a:	e7c7      	b.n	8009d0c <_printf_common+0x58>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	4622      	mov	r2, r4
 8009d80:	4641      	mov	r1, r8
 8009d82:	4638      	mov	r0, r7
 8009d84:	47c8      	blx	r9
 8009d86:	3001      	adds	r0, #1
 8009d88:	d0e6      	beq.n	8009d58 <_printf_common+0xa4>
 8009d8a:	3601      	adds	r6, #1
 8009d8c:	e7d9      	b.n	8009d42 <_printf_common+0x8e>
	...

08009d90 <_printf_i>:
 8009d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	7e0f      	ldrb	r7, [r1, #24]
 8009d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d98:	2f78      	cmp	r7, #120	@ 0x78
 8009d9a:	4691      	mov	r9, r2
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	469a      	mov	sl, r3
 8009da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009da6:	d807      	bhi.n	8009db8 <_printf_i+0x28>
 8009da8:	2f62      	cmp	r7, #98	@ 0x62
 8009daa:	d80a      	bhi.n	8009dc2 <_printf_i+0x32>
 8009dac:	2f00      	cmp	r7, #0
 8009dae:	f000 80d2 	beq.w	8009f56 <_printf_i+0x1c6>
 8009db2:	2f58      	cmp	r7, #88	@ 0x58
 8009db4:	f000 80b9 	beq.w	8009f2a <_printf_i+0x19a>
 8009db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009dc0:	e03a      	b.n	8009e38 <_printf_i+0xa8>
 8009dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009dc6:	2b15      	cmp	r3, #21
 8009dc8:	d8f6      	bhi.n	8009db8 <_printf_i+0x28>
 8009dca:	a101      	add	r1, pc, #4	@ (adr r1, 8009dd0 <_printf_i+0x40>)
 8009dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dd0:	08009e29 	.word	0x08009e29
 8009dd4:	08009e3d 	.word	0x08009e3d
 8009dd8:	08009db9 	.word	0x08009db9
 8009ddc:	08009db9 	.word	0x08009db9
 8009de0:	08009db9 	.word	0x08009db9
 8009de4:	08009db9 	.word	0x08009db9
 8009de8:	08009e3d 	.word	0x08009e3d
 8009dec:	08009db9 	.word	0x08009db9
 8009df0:	08009db9 	.word	0x08009db9
 8009df4:	08009db9 	.word	0x08009db9
 8009df8:	08009db9 	.word	0x08009db9
 8009dfc:	08009f3d 	.word	0x08009f3d
 8009e00:	08009e67 	.word	0x08009e67
 8009e04:	08009ef7 	.word	0x08009ef7
 8009e08:	08009db9 	.word	0x08009db9
 8009e0c:	08009db9 	.word	0x08009db9
 8009e10:	08009f5f 	.word	0x08009f5f
 8009e14:	08009db9 	.word	0x08009db9
 8009e18:	08009e67 	.word	0x08009e67
 8009e1c:	08009db9 	.word	0x08009db9
 8009e20:	08009db9 	.word	0x08009db9
 8009e24:	08009eff 	.word	0x08009eff
 8009e28:	6833      	ldr	r3, [r6, #0]
 8009e2a:	1d1a      	adds	r2, r3, #4
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6032      	str	r2, [r6, #0]
 8009e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e09d      	b.n	8009f78 <_printf_i+0x1e8>
 8009e3c:	6833      	ldr	r3, [r6, #0]
 8009e3e:	6820      	ldr	r0, [r4, #0]
 8009e40:	1d19      	adds	r1, r3, #4
 8009e42:	6031      	str	r1, [r6, #0]
 8009e44:	0606      	lsls	r6, r0, #24
 8009e46:	d501      	bpl.n	8009e4c <_printf_i+0xbc>
 8009e48:	681d      	ldr	r5, [r3, #0]
 8009e4a:	e003      	b.n	8009e54 <_printf_i+0xc4>
 8009e4c:	0645      	lsls	r5, r0, #25
 8009e4e:	d5fb      	bpl.n	8009e48 <_printf_i+0xb8>
 8009e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	da03      	bge.n	8009e60 <_printf_i+0xd0>
 8009e58:	232d      	movs	r3, #45	@ 0x2d
 8009e5a:	426d      	negs	r5, r5
 8009e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e60:	4859      	ldr	r0, [pc, #356]	@ (8009fc8 <_printf_i+0x238>)
 8009e62:	230a      	movs	r3, #10
 8009e64:	e011      	b.n	8009e8a <_printf_i+0xfa>
 8009e66:	6821      	ldr	r1, [r4, #0]
 8009e68:	6833      	ldr	r3, [r6, #0]
 8009e6a:	0608      	lsls	r0, r1, #24
 8009e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e70:	d402      	bmi.n	8009e78 <_printf_i+0xe8>
 8009e72:	0649      	lsls	r1, r1, #25
 8009e74:	bf48      	it	mi
 8009e76:	b2ad      	uxthmi	r5, r5
 8009e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e7a:	4853      	ldr	r0, [pc, #332]	@ (8009fc8 <_printf_i+0x238>)
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	bf14      	ite	ne
 8009e80:	230a      	movne	r3, #10
 8009e82:	2308      	moveq	r3, #8
 8009e84:	2100      	movs	r1, #0
 8009e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e8a:	6866      	ldr	r6, [r4, #4]
 8009e8c:	60a6      	str	r6, [r4, #8]
 8009e8e:	2e00      	cmp	r6, #0
 8009e90:	bfa2      	ittt	ge
 8009e92:	6821      	ldrge	r1, [r4, #0]
 8009e94:	f021 0104 	bicge.w	r1, r1, #4
 8009e98:	6021      	strge	r1, [r4, #0]
 8009e9a:	b90d      	cbnz	r5, 8009ea0 <_printf_i+0x110>
 8009e9c:	2e00      	cmp	r6, #0
 8009e9e:	d04b      	beq.n	8009f38 <_printf_i+0x1a8>
 8009ea0:	4616      	mov	r6, r2
 8009ea2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ea6:	fb03 5711 	mls	r7, r3, r1, r5
 8009eaa:	5dc7      	ldrb	r7, [r0, r7]
 8009eac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009eb0:	462f      	mov	r7, r5
 8009eb2:	42bb      	cmp	r3, r7
 8009eb4:	460d      	mov	r5, r1
 8009eb6:	d9f4      	bls.n	8009ea2 <_printf_i+0x112>
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d10b      	bne.n	8009ed4 <_printf_i+0x144>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	07df      	lsls	r7, r3, #31
 8009ec0:	d508      	bpl.n	8009ed4 <_printf_i+0x144>
 8009ec2:	6923      	ldr	r3, [r4, #16]
 8009ec4:	6861      	ldr	r1, [r4, #4]
 8009ec6:	4299      	cmp	r1, r3
 8009ec8:	bfde      	ittt	le
 8009eca:	2330      	movle	r3, #48	@ 0x30
 8009ecc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ed0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ed4:	1b92      	subs	r2, r2, r6
 8009ed6:	6122      	str	r2, [r4, #16]
 8009ed8:	f8cd a000 	str.w	sl, [sp]
 8009edc:	464b      	mov	r3, r9
 8009ede:	aa03      	add	r2, sp, #12
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	f7ff fee6 	bl	8009cb4 <_printf_common>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d14a      	bne.n	8009f82 <_printf_i+0x1f2>
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	b004      	add	sp, #16
 8009ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	f043 0320 	orr.w	r3, r3, #32
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	4833      	ldr	r0, [pc, #204]	@ (8009fcc <_printf_i+0x23c>)
 8009f00:	2778      	movs	r7, #120	@ 0x78
 8009f02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	6831      	ldr	r1, [r6, #0]
 8009f0a:	061f      	lsls	r7, r3, #24
 8009f0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f10:	d402      	bmi.n	8009f18 <_printf_i+0x188>
 8009f12:	065f      	lsls	r7, r3, #25
 8009f14:	bf48      	it	mi
 8009f16:	b2ad      	uxthmi	r5, r5
 8009f18:	6031      	str	r1, [r6, #0]
 8009f1a:	07d9      	lsls	r1, r3, #31
 8009f1c:	bf44      	itt	mi
 8009f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009f22:	6023      	strmi	r3, [r4, #0]
 8009f24:	b11d      	cbz	r5, 8009f2e <_printf_i+0x19e>
 8009f26:	2310      	movs	r3, #16
 8009f28:	e7ac      	b.n	8009e84 <_printf_i+0xf4>
 8009f2a:	4827      	ldr	r0, [pc, #156]	@ (8009fc8 <_printf_i+0x238>)
 8009f2c:	e7e9      	b.n	8009f02 <_printf_i+0x172>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	f023 0320 	bic.w	r3, r3, #32
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	e7f6      	b.n	8009f26 <_printf_i+0x196>
 8009f38:	4616      	mov	r6, r2
 8009f3a:	e7bd      	b.n	8009eb8 <_printf_i+0x128>
 8009f3c:	6833      	ldr	r3, [r6, #0]
 8009f3e:	6825      	ldr	r5, [r4, #0]
 8009f40:	6961      	ldr	r1, [r4, #20]
 8009f42:	1d18      	adds	r0, r3, #4
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	062e      	lsls	r6, r5, #24
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	d501      	bpl.n	8009f50 <_printf_i+0x1c0>
 8009f4c:	6019      	str	r1, [r3, #0]
 8009f4e:	e002      	b.n	8009f56 <_printf_i+0x1c6>
 8009f50:	0668      	lsls	r0, r5, #25
 8009f52:	d5fb      	bpl.n	8009f4c <_printf_i+0x1bc>
 8009f54:	8019      	strh	r1, [r3, #0]
 8009f56:	2300      	movs	r3, #0
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	4616      	mov	r6, r2
 8009f5c:	e7bc      	b.n	8009ed8 <_printf_i+0x148>
 8009f5e:	6833      	ldr	r3, [r6, #0]
 8009f60:	1d1a      	adds	r2, r3, #4
 8009f62:	6032      	str	r2, [r6, #0]
 8009f64:	681e      	ldr	r6, [r3, #0]
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	2100      	movs	r1, #0
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7f6 f930 	bl	80001d0 <memchr>
 8009f70:	b108      	cbz	r0, 8009f76 <_printf_i+0x1e6>
 8009f72:	1b80      	subs	r0, r0, r6
 8009f74:	6060      	str	r0, [r4, #4]
 8009f76:	6863      	ldr	r3, [r4, #4]
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f80:	e7aa      	b.n	8009ed8 <_printf_i+0x148>
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	4632      	mov	r2, r6
 8009f86:	4649      	mov	r1, r9
 8009f88:	4640      	mov	r0, r8
 8009f8a:	47d0      	blx	sl
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d0ad      	beq.n	8009eec <_printf_i+0x15c>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	079b      	lsls	r3, r3, #30
 8009f94:	d413      	bmi.n	8009fbe <_printf_i+0x22e>
 8009f96:	68e0      	ldr	r0, [r4, #12]
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	4298      	cmp	r0, r3
 8009f9c:	bfb8      	it	lt
 8009f9e:	4618      	movlt	r0, r3
 8009fa0:	e7a6      	b.n	8009ef0 <_printf_i+0x160>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	4640      	mov	r0, r8
 8009faa:	47d0      	blx	sl
 8009fac:	3001      	adds	r0, #1
 8009fae:	d09d      	beq.n	8009eec <_printf_i+0x15c>
 8009fb0:	3501      	adds	r5, #1
 8009fb2:	68e3      	ldr	r3, [r4, #12]
 8009fb4:	9903      	ldr	r1, [sp, #12]
 8009fb6:	1a5b      	subs	r3, r3, r1
 8009fb8:	42ab      	cmp	r3, r5
 8009fba:	dcf2      	bgt.n	8009fa2 <_printf_i+0x212>
 8009fbc:	e7eb      	b.n	8009f96 <_printf_i+0x206>
 8009fbe:	2500      	movs	r5, #0
 8009fc0:	f104 0619 	add.w	r6, r4, #25
 8009fc4:	e7f5      	b.n	8009fb2 <_printf_i+0x222>
 8009fc6:	bf00      	nop
 8009fc8:	0800da4e 	.word	0x0800da4e
 8009fcc:	0800da5f 	.word	0x0800da5f

08009fd0 <std>:
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fde:	6083      	str	r3, [r0, #8]
 8009fe0:	8181      	strh	r1, [r0, #12]
 8009fe2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fe4:	81c2      	strh	r2, [r0, #14]
 8009fe6:	6183      	str	r3, [r0, #24]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	2208      	movs	r2, #8
 8009fec:	305c      	adds	r0, #92	@ 0x5c
 8009fee:	f000 f928 	bl	800a242 <memset>
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <std+0x58>)
 8009ff4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800a02c <std+0x5c>)
 8009ff8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	@ (800a030 <std+0x60>)
 8009ffc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	@ (800a034 <std+0x64>)
 800a000:	6323      	str	r3, [r4, #48]	@ 0x30
 800a002:	4b0d      	ldr	r3, [pc, #52]	@ (800a038 <std+0x68>)
 800a004:	6224      	str	r4, [r4, #32]
 800a006:	429c      	cmp	r4, r3
 800a008:	d006      	beq.n	800a018 <std+0x48>
 800a00a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a00e:	4294      	cmp	r4, r2
 800a010:	d002      	beq.n	800a018 <std+0x48>
 800a012:	33d0      	adds	r3, #208	@ 0xd0
 800a014:	429c      	cmp	r4, r3
 800a016:	d105      	bne.n	800a024 <std+0x54>
 800a018:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a020:	f000 b99e 	b.w	800a360 <__retarget_lock_init_recursive>
 800a024:	bd10      	pop	{r4, pc}
 800a026:	bf00      	nop
 800a028:	0800a1bd 	.word	0x0800a1bd
 800a02c:	0800a1df 	.word	0x0800a1df
 800a030:	0800a217 	.word	0x0800a217
 800a034:	0800a23b 	.word	0x0800a23b
 800a038:	2000208c 	.word	0x2000208c

0800a03c <stdio_exit_handler>:
 800a03c:	4a02      	ldr	r2, [pc, #8]	@ (800a048 <stdio_exit_handler+0xc>)
 800a03e:	4903      	ldr	r1, [pc, #12]	@ (800a04c <stdio_exit_handler+0x10>)
 800a040:	4803      	ldr	r0, [pc, #12]	@ (800a050 <stdio_exit_handler+0x14>)
 800a042:	f000 b869 	b.w	800a118 <_fwalk_sglue>
 800a046:	bf00      	nop
 800a048:	20000114 	.word	0x20000114
 800a04c:	0800bcdd 	.word	0x0800bcdd
 800a050:	20000124 	.word	0x20000124

0800a054 <cleanup_stdio>:
 800a054:	6841      	ldr	r1, [r0, #4]
 800a056:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <cleanup_stdio+0x34>)
 800a058:	4299      	cmp	r1, r3
 800a05a:	b510      	push	{r4, lr}
 800a05c:	4604      	mov	r4, r0
 800a05e:	d001      	beq.n	800a064 <cleanup_stdio+0x10>
 800a060:	f001 fe3c 	bl	800bcdc <_fflush_r>
 800a064:	68a1      	ldr	r1, [r4, #8]
 800a066:	4b09      	ldr	r3, [pc, #36]	@ (800a08c <cleanup_stdio+0x38>)
 800a068:	4299      	cmp	r1, r3
 800a06a:	d002      	beq.n	800a072 <cleanup_stdio+0x1e>
 800a06c:	4620      	mov	r0, r4
 800a06e:	f001 fe35 	bl	800bcdc <_fflush_r>
 800a072:	68e1      	ldr	r1, [r4, #12]
 800a074:	4b06      	ldr	r3, [pc, #24]	@ (800a090 <cleanup_stdio+0x3c>)
 800a076:	4299      	cmp	r1, r3
 800a078:	d004      	beq.n	800a084 <cleanup_stdio+0x30>
 800a07a:	4620      	mov	r0, r4
 800a07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a080:	f001 be2c 	b.w	800bcdc <_fflush_r>
 800a084:	bd10      	pop	{r4, pc}
 800a086:	bf00      	nop
 800a088:	2000208c 	.word	0x2000208c
 800a08c:	200020f4 	.word	0x200020f4
 800a090:	2000215c 	.word	0x2000215c

0800a094 <global_stdio_init.part.0>:
 800a094:	b510      	push	{r4, lr}
 800a096:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <global_stdio_init.part.0+0x30>)
 800a098:	4c0b      	ldr	r4, [pc, #44]	@ (800a0c8 <global_stdio_init.part.0+0x34>)
 800a09a:	4a0c      	ldr	r2, [pc, #48]	@ (800a0cc <global_stdio_init.part.0+0x38>)
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2104      	movs	r1, #4
 800a0a4:	f7ff ff94 	bl	8009fd0 <std>
 800a0a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	2109      	movs	r1, #9
 800a0b0:	f7ff ff8e 	bl	8009fd0 <std>
 800a0b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0be:	2112      	movs	r1, #18
 800a0c0:	f7ff bf86 	b.w	8009fd0 <std>
 800a0c4:	200021c4 	.word	0x200021c4
 800a0c8:	2000208c 	.word	0x2000208c
 800a0cc:	0800a03d 	.word	0x0800a03d

0800a0d0 <__sfp_lock_acquire>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__sfp_lock_acquire+0x8>)
 800a0d2:	f000 b946 	b.w	800a362 <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	200021cd 	.word	0x200021cd

0800a0dc <__sfp_lock_release>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__sfp_lock_release+0x8>)
 800a0de:	f000 b941 	b.w	800a364 <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	200021cd 	.word	0x200021cd

0800a0e8 <__sinit>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	f7ff fff0 	bl	800a0d0 <__sfp_lock_acquire>
 800a0f0:	6a23      	ldr	r3, [r4, #32]
 800a0f2:	b11b      	cbz	r3, 800a0fc <__sinit+0x14>
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f8:	f7ff bff0 	b.w	800a0dc <__sfp_lock_release>
 800a0fc:	4b04      	ldr	r3, [pc, #16]	@ (800a110 <__sinit+0x28>)
 800a0fe:	6223      	str	r3, [r4, #32]
 800a100:	4b04      	ldr	r3, [pc, #16]	@ (800a114 <__sinit+0x2c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1f5      	bne.n	800a0f4 <__sinit+0xc>
 800a108:	f7ff ffc4 	bl	800a094 <global_stdio_init.part.0>
 800a10c:	e7f2      	b.n	800a0f4 <__sinit+0xc>
 800a10e:	bf00      	nop
 800a110:	0800a055 	.word	0x0800a055
 800a114:	200021c4 	.word	0x200021c4

0800a118 <_fwalk_sglue>:
 800a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a11c:	4607      	mov	r7, r0
 800a11e:	4688      	mov	r8, r1
 800a120:	4614      	mov	r4, r2
 800a122:	2600      	movs	r6, #0
 800a124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a128:	f1b9 0901 	subs.w	r9, r9, #1
 800a12c:	d505      	bpl.n	800a13a <_fwalk_sglue+0x22>
 800a12e:	6824      	ldr	r4, [r4, #0]
 800a130:	2c00      	cmp	r4, #0
 800a132:	d1f7      	bne.n	800a124 <_fwalk_sglue+0xc>
 800a134:	4630      	mov	r0, r6
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d907      	bls.n	800a150 <_fwalk_sglue+0x38>
 800a140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a144:	3301      	adds	r3, #1
 800a146:	d003      	beq.n	800a150 <_fwalk_sglue+0x38>
 800a148:	4629      	mov	r1, r5
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c0      	blx	r8
 800a14e:	4306      	orrs	r6, r0
 800a150:	3568      	adds	r5, #104	@ 0x68
 800a152:	e7e9      	b.n	800a128 <_fwalk_sglue+0x10>

0800a154 <sniprintf>:
 800a154:	b40c      	push	{r2, r3}
 800a156:	b530      	push	{r4, r5, lr}
 800a158:	4b17      	ldr	r3, [pc, #92]	@ (800a1b8 <sniprintf+0x64>)
 800a15a:	1e0c      	subs	r4, r1, #0
 800a15c:	681d      	ldr	r5, [r3, #0]
 800a15e:	b09d      	sub	sp, #116	@ 0x74
 800a160:	da08      	bge.n	800a174 <sniprintf+0x20>
 800a162:	238b      	movs	r3, #139	@ 0x8b
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	b01d      	add	sp, #116	@ 0x74
 800a16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a170:	b002      	add	sp, #8
 800a172:	4770      	bx	lr
 800a174:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a178:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a17c:	bf14      	ite	ne
 800a17e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a182:	4623      	moveq	r3, r4
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	9307      	str	r3, [sp, #28]
 800a188:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a18c:	9002      	str	r0, [sp, #8]
 800a18e:	9006      	str	r0, [sp, #24]
 800a190:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a194:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a196:	ab21      	add	r3, sp, #132	@ 0x84
 800a198:	a902      	add	r1, sp, #8
 800a19a:	4628      	mov	r0, r5
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	f001 fc1d 	bl	800b9dc <_svfiprintf_r>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	bfbc      	itt	lt
 800a1a6:	238b      	movlt	r3, #139	@ 0x8b
 800a1a8:	602b      	strlt	r3, [r5, #0]
 800a1aa:	2c00      	cmp	r4, #0
 800a1ac:	d0dd      	beq.n	800a16a <sniprintf+0x16>
 800a1ae:	9b02      	ldr	r3, [sp, #8]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e7d9      	b.n	800a16a <sniprintf+0x16>
 800a1b6:	bf00      	nop
 800a1b8:	20000120 	.word	0x20000120

0800a1bc <__sread>:
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	460c      	mov	r4, r1
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	f000 f87e 	bl	800a2c4 <_read_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	bfab      	itete	ge
 800a1cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a1d0:	181b      	addge	r3, r3, r0
 800a1d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1d6:	bfac      	ite	ge
 800a1d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1da:	81a3      	strhlt	r3, [r4, #12]
 800a1dc:	bd10      	pop	{r4, pc}

0800a1de <__swrite>:
 800a1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e2:	461f      	mov	r7, r3
 800a1e4:	898b      	ldrh	r3, [r1, #12]
 800a1e6:	05db      	lsls	r3, r3, #23
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	d505      	bpl.n	800a1fc <__swrite+0x1e>
 800a1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f000 f852 	bl	800a2a0 <_lseek_r>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	4632      	mov	r2, r6
 800a20a:	463b      	mov	r3, r7
 800a20c:	4628      	mov	r0, r5
 800a20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a212:	f000 b869 	b.w	800a2e8 <_write_r>

0800a216 <__sseek>:
 800a216:	b510      	push	{r4, lr}
 800a218:	460c      	mov	r4, r1
 800a21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21e:	f000 f83f 	bl	800a2a0 <_lseek_r>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	bf15      	itete	ne
 800a228:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a22a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a22e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a232:	81a3      	strheq	r3, [r4, #12]
 800a234:	bf18      	it	ne
 800a236:	81a3      	strhne	r3, [r4, #12]
 800a238:	bd10      	pop	{r4, pc}

0800a23a <__sclose>:
 800a23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23e:	f000 b81f 	b.w	800a280 <_close_r>

0800a242 <memset>:
 800a242:	4402      	add	r2, r0
 800a244:	4603      	mov	r3, r0
 800a246:	4293      	cmp	r3, r2
 800a248:	d100      	bne.n	800a24c <memset+0xa>
 800a24a:	4770      	bx	lr
 800a24c:	f803 1b01 	strb.w	r1, [r3], #1
 800a250:	e7f9      	b.n	800a246 <memset+0x4>

0800a252 <strncmp>:
 800a252:	b510      	push	{r4, lr}
 800a254:	b16a      	cbz	r2, 800a272 <strncmp+0x20>
 800a256:	3901      	subs	r1, #1
 800a258:	1884      	adds	r4, r0, r2
 800a25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a25e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a262:	429a      	cmp	r2, r3
 800a264:	d103      	bne.n	800a26e <strncmp+0x1c>
 800a266:	42a0      	cmp	r0, r4
 800a268:	d001      	beq.n	800a26e <strncmp+0x1c>
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	d1f5      	bne.n	800a25a <strncmp+0x8>
 800a26e:	1ad0      	subs	r0, r2, r3
 800a270:	bd10      	pop	{r4, pc}
 800a272:	4610      	mov	r0, r2
 800a274:	e7fc      	b.n	800a270 <strncmp+0x1e>
	...

0800a278 <_localeconv_r>:
 800a278:	4800      	ldr	r0, [pc, #0]	@ (800a27c <_localeconv_r+0x4>)
 800a27a:	4770      	bx	lr
 800a27c:	20000260 	.word	0x20000260

0800a280 <_close_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d06      	ldr	r5, [pc, #24]	@ (800a29c <_close_r+0x1c>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f7 fef2 	bl	8002074 <_close>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_close_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_close_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	200021c8 	.word	0x200021c8

0800a2a0 <_lseek_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d07      	ldr	r5, [pc, #28]	@ (800a2c0 <_lseek_r+0x20>)
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	4608      	mov	r0, r1
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	602a      	str	r2, [r5, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f7f7 ff07 	bl	80020c2 <_lseek>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_lseek_r+0x1e>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_lseek_r+0x1e>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	200021c8 	.word	0x200021c8

0800a2c4 <_read_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d07      	ldr	r5, [pc, #28]	@ (800a2e4 <_read_r+0x20>)
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	4608      	mov	r0, r1
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	602a      	str	r2, [r5, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f7f7 fe95 	bl	8002002 <_read>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_read_r+0x1e>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_read_r+0x1e>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	200021c8 	.word	0x200021c8

0800a2e8 <_write_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d07      	ldr	r5, [pc, #28]	@ (800a308 <_write_r+0x20>)
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	602a      	str	r2, [r5, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f7f7 fea0 	bl	800203c <_write>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_write_r+0x1e>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_write_r+0x1e>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	200021c8 	.word	0x200021c8

0800a30c <__errno>:
 800a30c:	4b01      	ldr	r3, [pc, #4]	@ (800a314 <__errno+0x8>)
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000120 	.word	0x20000120

0800a318 <__libc_init_array>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	4d0d      	ldr	r5, [pc, #52]	@ (800a350 <__libc_init_array+0x38>)
 800a31c:	4c0d      	ldr	r4, [pc, #52]	@ (800a354 <__libc_init_array+0x3c>)
 800a31e:	1b64      	subs	r4, r4, r5
 800a320:	10a4      	asrs	r4, r4, #2
 800a322:	2600      	movs	r6, #0
 800a324:	42a6      	cmp	r6, r4
 800a326:	d109      	bne.n	800a33c <__libc_init_array+0x24>
 800a328:	4d0b      	ldr	r5, [pc, #44]	@ (800a358 <__libc_init_array+0x40>)
 800a32a:	4c0c      	ldr	r4, [pc, #48]	@ (800a35c <__libc_init_array+0x44>)
 800a32c:	f003 fa54 	bl	800d7d8 <_init>
 800a330:	1b64      	subs	r4, r4, r5
 800a332:	10a4      	asrs	r4, r4, #2
 800a334:	2600      	movs	r6, #0
 800a336:	42a6      	cmp	r6, r4
 800a338:	d105      	bne.n	800a346 <__libc_init_array+0x2e>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a340:	4798      	blx	r3
 800a342:	3601      	adds	r6, #1
 800a344:	e7ee      	b.n	800a324 <__libc_init_array+0xc>
 800a346:	f855 3b04 	ldr.w	r3, [r5], #4
 800a34a:	4798      	blx	r3
 800a34c:	3601      	adds	r6, #1
 800a34e:	e7f2      	b.n	800a336 <__libc_init_array+0x1e>
 800a350:	0800de58 	.word	0x0800de58
 800a354:	0800de58 	.word	0x0800de58
 800a358:	0800de58 	.word	0x0800de58
 800a35c:	0800de5c 	.word	0x0800de5c

0800a360 <__retarget_lock_init_recursive>:
 800a360:	4770      	bx	lr

0800a362 <__retarget_lock_acquire_recursive>:
 800a362:	4770      	bx	lr

0800a364 <__retarget_lock_release_recursive>:
 800a364:	4770      	bx	lr

0800a366 <memcpy>:
 800a366:	440a      	add	r2, r1
 800a368:	4291      	cmp	r1, r2
 800a36a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a36e:	d100      	bne.n	800a372 <memcpy+0xc>
 800a370:	4770      	bx	lr
 800a372:	b510      	push	{r4, lr}
 800a374:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a37c:	4291      	cmp	r1, r2
 800a37e:	d1f9      	bne.n	800a374 <memcpy+0xe>
 800a380:	bd10      	pop	{r4, pc}

0800a382 <quorem>:
 800a382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a386:	6903      	ldr	r3, [r0, #16]
 800a388:	690c      	ldr	r4, [r1, #16]
 800a38a:	42a3      	cmp	r3, r4
 800a38c:	4607      	mov	r7, r0
 800a38e:	db7e      	blt.n	800a48e <quorem+0x10c>
 800a390:	3c01      	subs	r4, #1
 800a392:	f101 0814 	add.w	r8, r1, #20
 800a396:	00a3      	lsls	r3, r4, #2
 800a398:	f100 0514 	add.w	r5, r0, #20
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3b8:	d32e      	bcc.n	800a418 <quorem+0x96>
 800a3ba:	f04f 0a00 	mov.w	sl, #0
 800a3be:	46c4      	mov	ip, r8
 800a3c0:	46ae      	mov	lr, r5
 800a3c2:	46d3      	mov	fp, sl
 800a3c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3c8:	b298      	uxth	r0, r3
 800a3ca:	fb06 a000 	mla	r0, r6, r0, sl
 800a3ce:	0c02      	lsrs	r2, r0, #16
 800a3d0:	0c1b      	lsrs	r3, r3, #16
 800a3d2:	fb06 2303 	mla	r3, r6, r3, r2
 800a3d6:	f8de 2000 	ldr.w	r2, [lr]
 800a3da:	b280      	uxth	r0, r0
 800a3dc:	b292      	uxth	r2, r2
 800a3de:	1a12      	subs	r2, r2, r0
 800a3e0:	445a      	add	r2, fp
 800a3e2:	f8de 0000 	ldr.w	r0, [lr]
 800a3e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a3f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a3f4:	b292      	uxth	r2, r2
 800a3f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a3fa:	45e1      	cmp	r9, ip
 800a3fc:	f84e 2b04 	str.w	r2, [lr], #4
 800a400:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a404:	d2de      	bcs.n	800a3c4 <quorem+0x42>
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	58eb      	ldr	r3, [r5, r3]
 800a40a:	b92b      	cbnz	r3, 800a418 <quorem+0x96>
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	3b04      	subs	r3, #4
 800a410:	429d      	cmp	r5, r3
 800a412:	461a      	mov	r2, r3
 800a414:	d32f      	bcc.n	800a476 <quorem+0xf4>
 800a416:	613c      	str	r4, [r7, #16]
 800a418:	4638      	mov	r0, r7
 800a41a:	f001 f97b 	bl	800b714 <__mcmp>
 800a41e:	2800      	cmp	r0, #0
 800a420:	db25      	blt.n	800a46e <quorem+0xec>
 800a422:	4629      	mov	r1, r5
 800a424:	2000      	movs	r0, #0
 800a426:	f858 2b04 	ldr.w	r2, [r8], #4
 800a42a:	f8d1 c000 	ldr.w	ip, [r1]
 800a42e:	fa1f fe82 	uxth.w	lr, r2
 800a432:	fa1f f38c 	uxth.w	r3, ip
 800a436:	eba3 030e 	sub.w	r3, r3, lr
 800a43a:	4403      	add	r3, r0
 800a43c:	0c12      	lsrs	r2, r2, #16
 800a43e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a442:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a446:	b29b      	uxth	r3, r3
 800a448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a44c:	45c1      	cmp	r9, r8
 800a44e:	f841 3b04 	str.w	r3, [r1], #4
 800a452:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a456:	d2e6      	bcs.n	800a426 <quorem+0xa4>
 800a458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a45c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a460:	b922      	cbnz	r2, 800a46c <quorem+0xea>
 800a462:	3b04      	subs	r3, #4
 800a464:	429d      	cmp	r5, r3
 800a466:	461a      	mov	r2, r3
 800a468:	d30b      	bcc.n	800a482 <quorem+0x100>
 800a46a:	613c      	str	r4, [r7, #16]
 800a46c:	3601      	adds	r6, #1
 800a46e:	4630      	mov	r0, r6
 800a470:	b003      	add	sp, #12
 800a472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a476:	6812      	ldr	r2, [r2, #0]
 800a478:	3b04      	subs	r3, #4
 800a47a:	2a00      	cmp	r2, #0
 800a47c:	d1cb      	bne.n	800a416 <quorem+0x94>
 800a47e:	3c01      	subs	r4, #1
 800a480:	e7c6      	b.n	800a410 <quorem+0x8e>
 800a482:	6812      	ldr	r2, [r2, #0]
 800a484:	3b04      	subs	r3, #4
 800a486:	2a00      	cmp	r2, #0
 800a488:	d1ef      	bne.n	800a46a <quorem+0xe8>
 800a48a:	3c01      	subs	r4, #1
 800a48c:	e7ea      	b.n	800a464 <quorem+0xe2>
 800a48e:	2000      	movs	r0, #0
 800a490:	e7ee      	b.n	800a470 <quorem+0xee>
 800a492:	0000      	movs	r0, r0
 800a494:	0000      	movs	r0, r0
	...

0800a498 <_dtoa_r>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	69c7      	ldr	r7, [r0, #28]
 800a49e:	b099      	sub	sp, #100	@ 0x64
 800a4a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a4a4:	ec55 4b10 	vmov	r4, r5, d0
 800a4a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a4aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4ac:	4683      	mov	fp, r0
 800a4ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4b2:	b97f      	cbnz	r7, 800a4d4 <_dtoa_r+0x3c>
 800a4b4:	2010      	movs	r0, #16
 800a4b6:	f000 fdfd 	bl	800b0b4 <malloc>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a4c0:	b920      	cbnz	r0, 800a4cc <_dtoa_r+0x34>
 800a4c2:	4ba7      	ldr	r3, [pc, #668]	@ (800a760 <_dtoa_r+0x2c8>)
 800a4c4:	21ef      	movs	r1, #239	@ 0xef
 800a4c6:	48a7      	ldr	r0, [pc, #668]	@ (800a764 <_dtoa_r+0x2cc>)
 800a4c8:	f001 fc5a 	bl	800bd80 <__assert_func>
 800a4cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a4d0:	6007      	str	r7, [r0, #0]
 800a4d2:	60c7      	str	r7, [r0, #12]
 800a4d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4d8:	6819      	ldr	r1, [r3, #0]
 800a4da:	b159      	cbz	r1, 800a4f4 <_dtoa_r+0x5c>
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	604a      	str	r2, [r1, #4]
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4093      	lsls	r3, r2
 800a4e4:	608b      	str	r3, [r1, #8]
 800a4e6:	4658      	mov	r0, fp
 800a4e8:	f000 feda 	bl	800b2a0 <_Bfree>
 800a4ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	1e2b      	subs	r3, r5, #0
 800a4f6:	bfb9      	ittee	lt
 800a4f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a4fc:	9303      	strlt	r3, [sp, #12]
 800a4fe:	2300      	movge	r3, #0
 800a500:	6033      	strge	r3, [r6, #0]
 800a502:	9f03      	ldr	r7, [sp, #12]
 800a504:	4b98      	ldr	r3, [pc, #608]	@ (800a768 <_dtoa_r+0x2d0>)
 800a506:	bfbc      	itt	lt
 800a508:	2201      	movlt	r2, #1
 800a50a:	6032      	strlt	r2, [r6, #0]
 800a50c:	43bb      	bics	r3, r7
 800a50e:	d112      	bne.n	800a536 <_dtoa_r+0x9e>
 800a510:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a512:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a51c:	4323      	orrs	r3, r4
 800a51e:	f000 854d 	beq.w	800afbc <_dtoa_r+0xb24>
 800a522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a524:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a77c <_dtoa_r+0x2e4>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 854f 	beq.w	800afcc <_dtoa_r+0xb34>
 800a52e:	f10a 0303 	add.w	r3, sl, #3
 800a532:	f000 bd49 	b.w	800afc8 <_dtoa_r+0xb30>
 800a536:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a53a:	2200      	movs	r2, #0
 800a53c:	ec51 0b17 	vmov	r0, r1, d7
 800a540:	2300      	movs	r3, #0
 800a542:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a546:	f7f6 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a54a:	4680      	mov	r8, r0
 800a54c:	b158      	cbz	r0, 800a566 <_dtoa_r+0xce>
 800a54e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a550:	2301      	movs	r3, #1
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a556:	b113      	cbz	r3, 800a55e <_dtoa_r+0xc6>
 800a558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a55a:	4b84      	ldr	r3, [pc, #528]	@ (800a76c <_dtoa_r+0x2d4>)
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a780 <_dtoa_r+0x2e8>
 800a562:	f000 bd33 	b.w	800afcc <_dtoa_r+0xb34>
 800a566:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a56a:	aa16      	add	r2, sp, #88	@ 0x58
 800a56c:	a917      	add	r1, sp, #92	@ 0x5c
 800a56e:	4658      	mov	r0, fp
 800a570:	f001 f980 	bl	800b874 <__d2b>
 800a574:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a578:	4681      	mov	r9, r0
 800a57a:	2e00      	cmp	r6, #0
 800a57c:	d077      	beq.n	800a66e <_dtoa_r+0x1d6>
 800a57e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a580:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a58c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a590:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a594:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a598:	4619      	mov	r1, r3
 800a59a:	2200      	movs	r2, #0
 800a59c:	4b74      	ldr	r3, [pc, #464]	@ (800a770 <_dtoa_r+0x2d8>)
 800a59e:	f7f5 fe73 	bl	8000288 <__aeabi_dsub>
 800a5a2:	a369      	add	r3, pc, #420	@ (adr r3, 800a748 <_dtoa_r+0x2b0>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	a368      	add	r3, pc, #416	@ (adr r3, 800a750 <_dtoa_r+0x2b8>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	f7f5 fe6b 	bl	800028c <__adddf3>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	460d      	mov	r5, r1
 800a5bc:	f7f5 ffb2 	bl	8000524 <__aeabi_i2d>
 800a5c0:	a365      	add	r3, pc, #404	@ (adr r3, 800a758 <_dtoa_r+0x2c0>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f7f6 f817 	bl	80005f8 <__aeabi_dmul>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f5 fe5b 	bl	800028c <__adddf3>
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	460d      	mov	r5, r1
 800a5da:	f7f6 fabd 	bl	8000b58 <__aeabi_d2iz>
 800a5de:	2200      	movs	r2, #0
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	f7f6 fa78 	bl	8000adc <__aeabi_dcmplt>
 800a5ec:	b140      	cbz	r0, 800a600 <_dtoa_r+0x168>
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7f5 ff98 	bl	8000524 <__aeabi_i2d>
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	462b      	mov	r3, r5
 800a5f8:	f7f6 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5fc:	b900      	cbnz	r0, 800a600 <_dtoa_r+0x168>
 800a5fe:	3f01      	subs	r7, #1
 800a600:	2f16      	cmp	r7, #22
 800a602:	d851      	bhi.n	800a6a8 <_dtoa_r+0x210>
 800a604:	4b5b      	ldr	r3, [pc, #364]	@ (800a774 <_dtoa_r+0x2dc>)
 800a606:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a612:	f7f6 fa63 	bl	8000adc <__aeabi_dcmplt>
 800a616:	2800      	cmp	r0, #0
 800a618:	d048      	beq.n	800a6ac <_dtoa_r+0x214>
 800a61a:	3f01      	subs	r7, #1
 800a61c:	2300      	movs	r3, #0
 800a61e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a620:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a622:	1b9b      	subs	r3, r3, r6
 800a624:	1e5a      	subs	r2, r3, #1
 800a626:	bf44      	itt	mi
 800a628:	f1c3 0801 	rsbmi	r8, r3, #1
 800a62c:	2300      	movmi	r3, #0
 800a62e:	9208      	str	r2, [sp, #32]
 800a630:	bf54      	ite	pl
 800a632:	f04f 0800 	movpl.w	r8, #0
 800a636:	9308      	strmi	r3, [sp, #32]
 800a638:	2f00      	cmp	r7, #0
 800a63a:	db39      	blt.n	800a6b0 <_dtoa_r+0x218>
 800a63c:	9b08      	ldr	r3, [sp, #32]
 800a63e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a640:	443b      	add	r3, r7
 800a642:	9308      	str	r3, [sp, #32]
 800a644:	2300      	movs	r3, #0
 800a646:	930a      	str	r3, [sp, #40]	@ 0x28
 800a648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a64a:	2b09      	cmp	r3, #9
 800a64c:	d864      	bhi.n	800a718 <_dtoa_r+0x280>
 800a64e:	2b05      	cmp	r3, #5
 800a650:	bfc4      	itt	gt
 800a652:	3b04      	subgt	r3, #4
 800a654:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a658:	f1a3 0302 	sub.w	r3, r3, #2
 800a65c:	bfcc      	ite	gt
 800a65e:	2400      	movgt	r4, #0
 800a660:	2401      	movle	r4, #1
 800a662:	2b03      	cmp	r3, #3
 800a664:	d863      	bhi.n	800a72e <_dtoa_r+0x296>
 800a666:	e8df f003 	tbb	[pc, r3]
 800a66a:	372a      	.short	0x372a
 800a66c:	5535      	.short	0x5535
 800a66e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a672:	441e      	add	r6, r3
 800a674:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a678:	2b20      	cmp	r3, #32
 800a67a:	bfc1      	itttt	gt
 800a67c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a680:	409f      	lslgt	r7, r3
 800a682:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a686:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a68a:	bfd6      	itet	le
 800a68c:	f1c3 0320 	rsble	r3, r3, #32
 800a690:	ea47 0003 	orrgt.w	r0, r7, r3
 800a694:	fa04 f003 	lslle.w	r0, r4, r3
 800a698:	f7f5 ff34 	bl	8000504 <__aeabi_ui2d>
 800a69c:	2201      	movs	r2, #1
 800a69e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a6a2:	3e01      	subs	r6, #1
 800a6a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a6a6:	e777      	b.n	800a598 <_dtoa_r+0x100>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e7b8      	b.n	800a61e <_dtoa_r+0x186>
 800a6ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800a6ae:	e7b7      	b.n	800a620 <_dtoa_r+0x188>
 800a6b0:	427b      	negs	r3, r7
 800a6b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	eba8 0807 	sub.w	r8, r8, r7
 800a6ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6bc:	e7c4      	b.n	800a648 <_dtoa_r+0x1b0>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dc35      	bgt.n	800a734 <_dtoa_r+0x29c>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	9307      	str	r3, [sp, #28]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6d2:	e00b      	b.n	800a6ec <_dtoa_r+0x254>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e7f3      	b.n	800a6c0 <_dtoa_r+0x228>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6de:	18fb      	adds	r3, r7, r3
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	9307      	str	r3, [sp, #28]
 800a6e8:	bfb8      	it	lt
 800a6ea:	2301      	movlt	r3, #1
 800a6ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	f102 0514 	add.w	r5, r2, #20
 800a6f8:	429d      	cmp	r5, r3
 800a6fa:	d91f      	bls.n	800a73c <_dtoa_r+0x2a4>
 800a6fc:	6041      	str	r1, [r0, #4]
 800a6fe:	4658      	mov	r0, fp
 800a700:	f000 fd8e 	bl	800b220 <_Balloc>
 800a704:	4682      	mov	sl, r0
 800a706:	2800      	cmp	r0, #0
 800a708:	d13c      	bne.n	800a784 <_dtoa_r+0x2ec>
 800a70a:	4b1b      	ldr	r3, [pc, #108]	@ (800a778 <_dtoa_r+0x2e0>)
 800a70c:	4602      	mov	r2, r0
 800a70e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a712:	e6d8      	b.n	800a4c6 <_dtoa_r+0x2e>
 800a714:	2301      	movs	r3, #1
 800a716:	e7e0      	b.n	800a6da <_dtoa_r+0x242>
 800a718:	2401      	movs	r4, #1
 800a71a:	2300      	movs	r3, #0
 800a71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a71e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a720:	f04f 33ff 	mov.w	r3, #4294967295
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	9307      	str	r3, [sp, #28]
 800a728:	2200      	movs	r2, #0
 800a72a:	2312      	movs	r3, #18
 800a72c:	e7d0      	b.n	800a6d0 <_dtoa_r+0x238>
 800a72e:	2301      	movs	r3, #1
 800a730:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a732:	e7f5      	b.n	800a720 <_dtoa_r+0x288>
 800a734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	9307      	str	r3, [sp, #28]
 800a73a:	e7d7      	b.n	800a6ec <_dtoa_r+0x254>
 800a73c:	3101      	adds	r1, #1
 800a73e:	0052      	lsls	r2, r2, #1
 800a740:	e7d8      	b.n	800a6f4 <_dtoa_r+0x25c>
 800a742:	bf00      	nop
 800a744:	f3af 8000 	nop.w
 800a748:	636f4361 	.word	0x636f4361
 800a74c:	3fd287a7 	.word	0x3fd287a7
 800a750:	8b60c8b3 	.word	0x8b60c8b3
 800a754:	3fc68a28 	.word	0x3fc68a28
 800a758:	509f79fb 	.word	0x509f79fb
 800a75c:	3fd34413 	.word	0x3fd34413
 800a760:	0800da7d 	.word	0x0800da7d
 800a764:	0800da94 	.word	0x0800da94
 800a768:	7ff00000 	.word	0x7ff00000
 800a76c:	0800da4d 	.word	0x0800da4d
 800a770:	3ff80000 	.word	0x3ff80000
 800a774:	0800db90 	.word	0x0800db90
 800a778:	0800daec 	.word	0x0800daec
 800a77c:	0800da79 	.word	0x0800da79
 800a780:	0800da4c 	.word	0x0800da4c
 800a784:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a788:	6018      	str	r0, [r3, #0]
 800a78a:	9b07      	ldr	r3, [sp, #28]
 800a78c:	2b0e      	cmp	r3, #14
 800a78e:	f200 80a4 	bhi.w	800a8da <_dtoa_r+0x442>
 800a792:	2c00      	cmp	r4, #0
 800a794:	f000 80a1 	beq.w	800a8da <_dtoa_r+0x442>
 800a798:	2f00      	cmp	r7, #0
 800a79a:	dd33      	ble.n	800a804 <_dtoa_r+0x36c>
 800a79c:	4bad      	ldr	r3, [pc, #692]	@ (800aa54 <_dtoa_r+0x5bc>)
 800a79e:	f007 020f 	and.w	r2, r7, #15
 800a7a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7a6:	ed93 7b00 	vldr	d7, [r3]
 800a7aa:	05f8      	lsls	r0, r7, #23
 800a7ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a7b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a7b4:	d516      	bpl.n	800a7e4 <_dtoa_r+0x34c>
 800a7b6:	4ba8      	ldr	r3, [pc, #672]	@ (800aa58 <_dtoa_r+0x5c0>)
 800a7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7c0:	f7f6 f844 	bl	800084c <__aeabi_ddiv>
 800a7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c8:	f004 040f 	and.w	r4, r4, #15
 800a7cc:	2603      	movs	r6, #3
 800a7ce:	4da2      	ldr	r5, [pc, #648]	@ (800aa58 <_dtoa_r+0x5c0>)
 800a7d0:	b954      	cbnz	r4, 800a7e8 <_dtoa_r+0x350>
 800a7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7da:	f7f6 f837 	bl	800084c <__aeabi_ddiv>
 800a7de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7e2:	e028      	b.n	800a836 <_dtoa_r+0x39e>
 800a7e4:	2602      	movs	r6, #2
 800a7e6:	e7f2      	b.n	800a7ce <_dtoa_r+0x336>
 800a7e8:	07e1      	lsls	r1, r4, #31
 800a7ea:	d508      	bpl.n	800a7fe <_dtoa_r+0x366>
 800a7ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7f4:	f7f5 ff00 	bl	80005f8 <__aeabi_dmul>
 800a7f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7fc:	3601      	adds	r6, #1
 800a7fe:	1064      	asrs	r4, r4, #1
 800a800:	3508      	adds	r5, #8
 800a802:	e7e5      	b.n	800a7d0 <_dtoa_r+0x338>
 800a804:	f000 80d2 	beq.w	800a9ac <_dtoa_r+0x514>
 800a808:	427c      	negs	r4, r7
 800a80a:	4b92      	ldr	r3, [pc, #584]	@ (800aa54 <_dtoa_r+0x5bc>)
 800a80c:	4d92      	ldr	r5, [pc, #584]	@ (800aa58 <_dtoa_r+0x5c0>)
 800a80e:	f004 020f 	and.w	r2, r4, #15
 800a812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a81e:	f7f5 feeb 	bl	80005f8 <__aeabi_dmul>
 800a822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a826:	1124      	asrs	r4, r4, #4
 800a828:	2300      	movs	r3, #0
 800a82a:	2602      	movs	r6, #2
 800a82c:	2c00      	cmp	r4, #0
 800a82e:	f040 80b2 	bne.w	800a996 <_dtoa_r+0x4fe>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1d3      	bne.n	800a7de <_dtoa_r+0x346>
 800a836:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a838:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 80b7 	beq.w	800a9b0 <_dtoa_r+0x518>
 800a842:	4b86      	ldr	r3, [pc, #536]	@ (800aa5c <_dtoa_r+0x5c4>)
 800a844:	2200      	movs	r2, #0
 800a846:	4620      	mov	r0, r4
 800a848:	4629      	mov	r1, r5
 800a84a:	f7f6 f947 	bl	8000adc <__aeabi_dcmplt>
 800a84e:	2800      	cmp	r0, #0
 800a850:	f000 80ae 	beq.w	800a9b0 <_dtoa_r+0x518>
 800a854:	9b07      	ldr	r3, [sp, #28]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80aa 	beq.w	800a9b0 <_dtoa_r+0x518>
 800a85c:	9b00      	ldr	r3, [sp, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd37      	ble.n	800a8d2 <_dtoa_r+0x43a>
 800a862:	1e7b      	subs	r3, r7, #1
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	4620      	mov	r0, r4
 800a868:	4b7d      	ldr	r3, [pc, #500]	@ (800aa60 <_dtoa_r+0x5c8>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	4629      	mov	r1, r5
 800a86e:	f7f5 fec3 	bl	80005f8 <__aeabi_dmul>
 800a872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a876:	9c00      	ldr	r4, [sp, #0]
 800a878:	3601      	adds	r6, #1
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7f5 fe52 	bl	8000524 <__aeabi_i2d>
 800a880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a884:	f7f5 feb8 	bl	80005f8 <__aeabi_dmul>
 800a888:	4b76      	ldr	r3, [pc, #472]	@ (800aa64 <_dtoa_r+0x5cc>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	f7f5 fcfe 	bl	800028c <__adddf3>
 800a890:	4605      	mov	r5, r0
 800a892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a896:	2c00      	cmp	r4, #0
 800a898:	f040 808d 	bne.w	800a9b6 <_dtoa_r+0x51e>
 800a89c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a0:	4b71      	ldr	r3, [pc, #452]	@ (800aa68 <_dtoa_r+0x5d0>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f7f5 fcf0 	bl	8000288 <__aeabi_dsub>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8b0:	462a      	mov	r2, r5
 800a8b2:	4633      	mov	r3, r6
 800a8b4:	f7f6 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f040 828b 	bne.w	800add4 <_dtoa_r+0x93c>
 800a8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a8c8:	f7f6 f908 	bl	8000adc <__aeabi_dcmplt>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f040 8128 	bne.w	800ab22 <_dtoa_r+0x68a>
 800a8d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a8d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a8da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f2c0 815a 	blt.w	800ab96 <_dtoa_r+0x6fe>
 800a8e2:	2f0e      	cmp	r7, #14
 800a8e4:	f300 8157 	bgt.w	800ab96 <_dtoa_r+0x6fe>
 800a8e8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa54 <_dtoa_r+0x5bc>)
 800a8ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8ee:	ed93 7b00 	vldr	d7, [r3]
 800a8f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	ed8d 7b00 	vstr	d7, [sp]
 800a8fa:	da03      	bge.n	800a904 <_dtoa_r+0x46c>
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f340 8101 	ble.w	800ab06 <_dtoa_r+0x66e>
 800a904:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a908:	4656      	mov	r6, sl
 800a90a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f5 ff9b 	bl	800084c <__aeabi_ddiv>
 800a916:	f7f6 f91f 	bl	8000b58 <__aeabi_d2iz>
 800a91a:	4680      	mov	r8, r0
 800a91c:	f7f5 fe02 	bl	8000524 <__aeabi_i2d>
 800a920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a924:	f7f5 fe68 	bl	80005f8 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4620      	mov	r0, r4
 800a92e:	4629      	mov	r1, r5
 800a930:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a934:	f7f5 fca8 	bl	8000288 <__aeabi_dsub>
 800a938:	f806 4b01 	strb.w	r4, [r6], #1
 800a93c:	9d07      	ldr	r5, [sp, #28]
 800a93e:	eba6 040a 	sub.w	r4, r6, sl
 800a942:	42a5      	cmp	r5, r4
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	f040 8117 	bne.w	800ab7a <_dtoa_r+0x6e2>
 800a94c:	f7f5 fc9e 	bl	800028c <__adddf3>
 800a950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a954:	4604      	mov	r4, r0
 800a956:	460d      	mov	r5, r1
 800a958:	f7f6 f8de 	bl	8000b18 <__aeabi_dcmpgt>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f040 80f9 	bne.w	800ab54 <_dtoa_r+0x6bc>
 800a962:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a966:	4620      	mov	r0, r4
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f6 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a96e:	b118      	cbz	r0, 800a978 <_dtoa_r+0x4e0>
 800a970:	f018 0f01 	tst.w	r8, #1
 800a974:	f040 80ee 	bne.w	800ab54 <_dtoa_r+0x6bc>
 800a978:	4649      	mov	r1, r9
 800a97a:	4658      	mov	r0, fp
 800a97c:	f000 fc90 	bl	800b2a0 <_Bfree>
 800a980:	2300      	movs	r3, #0
 800a982:	7033      	strb	r3, [r6, #0]
 800a984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a986:	3701      	adds	r7, #1
 800a988:	601f      	str	r7, [r3, #0]
 800a98a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 831d 	beq.w	800afcc <_dtoa_r+0xb34>
 800a992:	601e      	str	r6, [r3, #0]
 800a994:	e31a      	b.n	800afcc <_dtoa_r+0xb34>
 800a996:	07e2      	lsls	r2, r4, #31
 800a998:	d505      	bpl.n	800a9a6 <_dtoa_r+0x50e>
 800a99a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a99e:	f7f5 fe2b 	bl	80005f8 <__aeabi_dmul>
 800a9a2:	3601      	adds	r6, #1
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	1064      	asrs	r4, r4, #1
 800a9a8:	3508      	adds	r5, #8
 800a9aa:	e73f      	b.n	800a82c <_dtoa_r+0x394>
 800a9ac:	2602      	movs	r6, #2
 800a9ae:	e742      	b.n	800a836 <_dtoa_r+0x39e>
 800a9b0:	9c07      	ldr	r4, [sp, #28]
 800a9b2:	9704      	str	r7, [sp, #16]
 800a9b4:	e761      	b.n	800a87a <_dtoa_r+0x3e2>
 800a9b6:	4b27      	ldr	r3, [pc, #156]	@ (800aa54 <_dtoa_r+0x5bc>)
 800a9b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9c2:	4454      	add	r4, sl
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d053      	beq.n	800aa70 <_dtoa_r+0x5d8>
 800a9c8:	4928      	ldr	r1, [pc, #160]	@ (800aa6c <_dtoa_r+0x5d4>)
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	f7f5 ff3e 	bl	800084c <__aeabi_ddiv>
 800a9d0:	4633      	mov	r3, r6
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	f7f5 fc58 	bl	8000288 <__aeabi_dsub>
 800a9d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9dc:	4656      	mov	r6, sl
 800a9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9e2:	f7f6 f8b9 	bl	8000b58 <__aeabi_d2iz>
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	f7f5 fd9c 	bl	8000524 <__aeabi_i2d>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f4:	f7f5 fc48 	bl	8000288 <__aeabi_dsub>
 800a9f8:	3530      	adds	r5, #48	@ 0x30
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa02:	f806 5b01 	strb.w	r5, [r6], #1
 800aa06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa0a:	f7f6 f867 	bl	8000adc <__aeabi_dcmplt>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d171      	bne.n	800aaf6 <_dtoa_r+0x65e>
 800aa12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa16:	4911      	ldr	r1, [pc, #68]	@ (800aa5c <_dtoa_r+0x5c4>)
 800aa18:	2000      	movs	r0, #0
 800aa1a:	f7f5 fc35 	bl	8000288 <__aeabi_dsub>
 800aa1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa22:	f7f6 f85b 	bl	8000adc <__aeabi_dcmplt>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f040 8095 	bne.w	800ab56 <_dtoa_r+0x6be>
 800aa2c:	42a6      	cmp	r6, r4
 800aa2e:	f43f af50 	beq.w	800a8d2 <_dtoa_r+0x43a>
 800aa32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa36:	4b0a      	ldr	r3, [pc, #40]	@ (800aa60 <_dtoa_r+0x5c8>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f7f5 fddd 	bl	80005f8 <__aeabi_dmul>
 800aa3e:	4b08      	ldr	r3, [pc, #32]	@ (800aa60 <_dtoa_r+0x5c8>)
 800aa40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa44:	2200      	movs	r2, #0
 800aa46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa4a:	f7f5 fdd5 	bl	80005f8 <__aeabi_dmul>
 800aa4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa52:	e7c4      	b.n	800a9de <_dtoa_r+0x546>
 800aa54:	0800db90 	.word	0x0800db90
 800aa58:	0800db68 	.word	0x0800db68
 800aa5c:	3ff00000 	.word	0x3ff00000
 800aa60:	40240000 	.word	0x40240000
 800aa64:	401c0000 	.word	0x401c0000
 800aa68:	40140000 	.word	0x40140000
 800aa6c:	3fe00000 	.word	0x3fe00000
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	f7f5 fdc0 	bl	80005f8 <__aeabi_dmul>
 800aa78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa7c:	9415      	str	r4, [sp, #84]	@ 0x54
 800aa7e:	4656      	mov	r6, sl
 800aa80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa84:	f7f6 f868 	bl	8000b58 <__aeabi_d2iz>
 800aa88:	4605      	mov	r5, r0
 800aa8a:	f7f5 fd4b 	bl	8000524 <__aeabi_i2d>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa96:	f7f5 fbf7 	bl	8000288 <__aeabi_dsub>
 800aa9a:	3530      	adds	r5, #48	@ 0x30
 800aa9c:	f806 5b01 	strb.w	r5, [r6], #1
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	42a6      	cmp	r6, r4
 800aaa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aaaa:	f04f 0200 	mov.w	r2, #0
 800aaae:	d124      	bne.n	800aafa <_dtoa_r+0x662>
 800aab0:	4bac      	ldr	r3, [pc, #688]	@ (800ad64 <_dtoa_r+0x8cc>)
 800aab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aab6:	f7f5 fbe9 	bl	800028c <__adddf3>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aac2:	f7f6 f829 	bl	8000b18 <__aeabi_dcmpgt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d145      	bne.n	800ab56 <_dtoa_r+0x6be>
 800aaca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aace:	49a5      	ldr	r1, [pc, #660]	@ (800ad64 <_dtoa_r+0x8cc>)
 800aad0:	2000      	movs	r0, #0
 800aad2:	f7f5 fbd9 	bl	8000288 <__aeabi_dsub>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aade:	f7f5 fffd 	bl	8000adc <__aeabi_dcmplt>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	f43f aef5 	beq.w	800a8d2 <_dtoa_r+0x43a>
 800aae8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aaea:	1e73      	subs	r3, r6, #1
 800aaec:	9315      	str	r3, [sp, #84]	@ 0x54
 800aaee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aaf2:	2b30      	cmp	r3, #48	@ 0x30
 800aaf4:	d0f8      	beq.n	800aae8 <_dtoa_r+0x650>
 800aaf6:	9f04      	ldr	r7, [sp, #16]
 800aaf8:	e73e      	b.n	800a978 <_dtoa_r+0x4e0>
 800aafa:	4b9b      	ldr	r3, [pc, #620]	@ (800ad68 <_dtoa_r+0x8d0>)
 800aafc:	f7f5 fd7c 	bl	80005f8 <__aeabi_dmul>
 800ab00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab04:	e7bc      	b.n	800aa80 <_dtoa_r+0x5e8>
 800ab06:	d10c      	bne.n	800ab22 <_dtoa_r+0x68a>
 800ab08:	4b98      	ldr	r3, [pc, #608]	@ (800ad6c <_dtoa_r+0x8d4>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab10:	f7f5 fd72 	bl	80005f8 <__aeabi_dmul>
 800ab14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab18:	f7f5 fff4 	bl	8000b04 <__aeabi_dcmpge>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	f000 8157 	beq.w	800add0 <_dtoa_r+0x938>
 800ab22:	2400      	movs	r4, #0
 800ab24:	4625      	mov	r5, r4
 800ab26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab28:	43db      	mvns	r3, r3
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	4656      	mov	r6, sl
 800ab2e:	2700      	movs	r7, #0
 800ab30:	4621      	mov	r1, r4
 800ab32:	4658      	mov	r0, fp
 800ab34:	f000 fbb4 	bl	800b2a0 <_Bfree>
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	d0dc      	beq.n	800aaf6 <_dtoa_r+0x65e>
 800ab3c:	b12f      	cbz	r7, 800ab4a <_dtoa_r+0x6b2>
 800ab3e:	42af      	cmp	r7, r5
 800ab40:	d003      	beq.n	800ab4a <_dtoa_r+0x6b2>
 800ab42:	4639      	mov	r1, r7
 800ab44:	4658      	mov	r0, fp
 800ab46:	f000 fbab 	bl	800b2a0 <_Bfree>
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	4658      	mov	r0, fp
 800ab4e:	f000 fba7 	bl	800b2a0 <_Bfree>
 800ab52:	e7d0      	b.n	800aaf6 <_dtoa_r+0x65e>
 800ab54:	9704      	str	r7, [sp, #16]
 800ab56:	4633      	mov	r3, r6
 800ab58:	461e      	mov	r6, r3
 800ab5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab5e:	2a39      	cmp	r2, #57	@ 0x39
 800ab60:	d107      	bne.n	800ab72 <_dtoa_r+0x6da>
 800ab62:	459a      	cmp	sl, r3
 800ab64:	d1f8      	bne.n	800ab58 <_dtoa_r+0x6c0>
 800ab66:	9a04      	ldr	r2, [sp, #16]
 800ab68:	3201      	adds	r2, #1
 800ab6a:	9204      	str	r2, [sp, #16]
 800ab6c:	2230      	movs	r2, #48	@ 0x30
 800ab6e:	f88a 2000 	strb.w	r2, [sl]
 800ab72:	781a      	ldrb	r2, [r3, #0]
 800ab74:	3201      	adds	r2, #1
 800ab76:	701a      	strb	r2, [r3, #0]
 800ab78:	e7bd      	b.n	800aaf6 <_dtoa_r+0x65e>
 800ab7a:	4b7b      	ldr	r3, [pc, #492]	@ (800ad68 <_dtoa_r+0x8d0>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f7f5 fd3b 	bl	80005f8 <__aeabi_dmul>
 800ab82:	2200      	movs	r2, #0
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	460d      	mov	r5, r1
 800ab8a:	f7f5 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f43f aebb 	beq.w	800a90a <_dtoa_r+0x472>
 800ab94:	e6f0      	b.n	800a978 <_dtoa_r+0x4e0>
 800ab96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	f000 80db 	beq.w	800ad54 <_dtoa_r+0x8bc>
 800ab9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aba0:	2a01      	cmp	r2, #1
 800aba2:	f300 80bf 	bgt.w	800ad24 <_dtoa_r+0x88c>
 800aba6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aba8:	2a00      	cmp	r2, #0
 800abaa:	f000 80b7 	beq.w	800ad1c <_dtoa_r+0x884>
 800abae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800abb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800abb4:	4646      	mov	r6, r8
 800abb6:	9a08      	ldr	r2, [sp, #32]
 800abb8:	2101      	movs	r1, #1
 800abba:	441a      	add	r2, r3
 800abbc:	4658      	mov	r0, fp
 800abbe:	4498      	add	r8, r3
 800abc0:	9208      	str	r2, [sp, #32]
 800abc2:	f000 fc21 	bl	800b408 <__i2b>
 800abc6:	4605      	mov	r5, r0
 800abc8:	b15e      	cbz	r6, 800abe2 <_dtoa_r+0x74a>
 800abca:	9b08      	ldr	r3, [sp, #32]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	dd08      	ble.n	800abe2 <_dtoa_r+0x74a>
 800abd0:	42b3      	cmp	r3, r6
 800abd2:	9a08      	ldr	r2, [sp, #32]
 800abd4:	bfa8      	it	ge
 800abd6:	4633      	movge	r3, r6
 800abd8:	eba8 0803 	sub.w	r8, r8, r3
 800abdc:	1af6      	subs	r6, r6, r3
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	9308      	str	r3, [sp, #32]
 800abe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abe4:	b1f3      	cbz	r3, 800ac24 <_dtoa_r+0x78c>
 800abe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 80b7 	beq.w	800ad5c <_dtoa_r+0x8c4>
 800abee:	b18c      	cbz	r4, 800ac14 <_dtoa_r+0x77c>
 800abf0:	4629      	mov	r1, r5
 800abf2:	4622      	mov	r2, r4
 800abf4:	4658      	mov	r0, fp
 800abf6:	f000 fcc7 	bl	800b588 <__pow5mult>
 800abfa:	464a      	mov	r2, r9
 800abfc:	4601      	mov	r1, r0
 800abfe:	4605      	mov	r5, r0
 800ac00:	4658      	mov	r0, fp
 800ac02:	f000 fc17 	bl	800b434 <__multiply>
 800ac06:	4649      	mov	r1, r9
 800ac08:	9004      	str	r0, [sp, #16]
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f000 fb48 	bl	800b2a0 <_Bfree>
 800ac10:	9b04      	ldr	r3, [sp, #16]
 800ac12:	4699      	mov	r9, r3
 800ac14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac16:	1b1a      	subs	r2, r3, r4
 800ac18:	d004      	beq.n	800ac24 <_dtoa_r+0x78c>
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	4658      	mov	r0, fp
 800ac1e:	f000 fcb3 	bl	800b588 <__pow5mult>
 800ac22:	4681      	mov	r9, r0
 800ac24:	2101      	movs	r1, #1
 800ac26:	4658      	mov	r0, fp
 800ac28:	f000 fbee 	bl	800b408 <__i2b>
 800ac2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac2e:	4604      	mov	r4, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 81cf 	beq.w	800afd4 <_dtoa_r+0xb3c>
 800ac36:	461a      	mov	r2, r3
 800ac38:	4601      	mov	r1, r0
 800ac3a:	4658      	mov	r0, fp
 800ac3c:	f000 fca4 	bl	800b588 <__pow5mult>
 800ac40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	4604      	mov	r4, r0
 800ac46:	f300 8095 	bgt.w	800ad74 <_dtoa_r+0x8dc>
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f040 8087 	bne.w	800ad60 <_dtoa_r+0x8c8>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f040 8089 	bne.w	800ad70 <_dtoa_r+0x8d8>
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac64:	0d1b      	lsrs	r3, r3, #20
 800ac66:	051b      	lsls	r3, r3, #20
 800ac68:	b12b      	cbz	r3, 800ac76 <_dtoa_r+0x7de>
 800ac6a:	9b08      	ldr	r3, [sp, #32]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	9308      	str	r3, [sp, #32]
 800ac70:	f108 0801 	add.w	r8, r8, #1
 800ac74:	2301      	movs	r3, #1
 800ac76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 81b0 	beq.w	800afe0 <_dtoa_r+0xb48>
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac86:	6918      	ldr	r0, [r3, #16]
 800ac88:	f000 fb72 	bl	800b370 <__hi0bits>
 800ac8c:	f1c0 0020 	rsb	r0, r0, #32
 800ac90:	9b08      	ldr	r3, [sp, #32]
 800ac92:	4418      	add	r0, r3
 800ac94:	f010 001f 	ands.w	r0, r0, #31
 800ac98:	d077      	beq.n	800ad8a <_dtoa_r+0x8f2>
 800ac9a:	f1c0 0320 	rsb	r3, r0, #32
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	dd6b      	ble.n	800ad7a <_dtoa_r+0x8e2>
 800aca2:	9b08      	ldr	r3, [sp, #32]
 800aca4:	f1c0 001c 	rsb	r0, r0, #28
 800aca8:	4403      	add	r3, r0
 800acaa:	4480      	add	r8, r0
 800acac:	4406      	add	r6, r0
 800acae:	9308      	str	r3, [sp, #32]
 800acb0:	f1b8 0f00 	cmp.w	r8, #0
 800acb4:	dd05      	ble.n	800acc2 <_dtoa_r+0x82a>
 800acb6:	4649      	mov	r1, r9
 800acb8:	4642      	mov	r2, r8
 800acba:	4658      	mov	r0, fp
 800acbc:	f000 fcbe 	bl	800b63c <__lshift>
 800acc0:	4681      	mov	r9, r0
 800acc2:	9b08      	ldr	r3, [sp, #32]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dd05      	ble.n	800acd4 <_dtoa_r+0x83c>
 800acc8:	4621      	mov	r1, r4
 800acca:	461a      	mov	r2, r3
 800accc:	4658      	mov	r0, fp
 800acce:	f000 fcb5 	bl	800b63c <__lshift>
 800acd2:	4604      	mov	r4, r0
 800acd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d059      	beq.n	800ad8e <_dtoa_r+0x8f6>
 800acda:	4621      	mov	r1, r4
 800acdc:	4648      	mov	r0, r9
 800acde:	f000 fd19 	bl	800b714 <__mcmp>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	da53      	bge.n	800ad8e <_dtoa_r+0x8f6>
 800ace6:	1e7b      	subs	r3, r7, #1
 800ace8:	9304      	str	r3, [sp, #16]
 800acea:	4649      	mov	r1, r9
 800acec:	2300      	movs	r3, #0
 800acee:	220a      	movs	r2, #10
 800acf0:	4658      	mov	r0, fp
 800acf2:	f000 faf7 	bl	800b2e4 <__multadd>
 800acf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acf8:	4681      	mov	r9, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f000 8172 	beq.w	800afe4 <_dtoa_r+0xb4c>
 800ad00:	2300      	movs	r3, #0
 800ad02:	4629      	mov	r1, r5
 800ad04:	220a      	movs	r2, #10
 800ad06:	4658      	mov	r0, fp
 800ad08:	f000 faec 	bl	800b2e4 <__multadd>
 800ad0c:	9b00      	ldr	r3, [sp, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	4605      	mov	r5, r0
 800ad12:	dc67      	bgt.n	800ade4 <_dtoa_r+0x94c>
 800ad14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	dc41      	bgt.n	800ad9e <_dtoa_r+0x906>
 800ad1a:	e063      	b.n	800ade4 <_dtoa_r+0x94c>
 800ad1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad22:	e746      	b.n	800abb2 <_dtoa_r+0x71a>
 800ad24:	9b07      	ldr	r3, [sp, #28]
 800ad26:	1e5c      	subs	r4, r3, #1
 800ad28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	bfbf      	itttt	lt
 800ad2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ad30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ad32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ad34:	1ae3      	sublt	r3, r4, r3
 800ad36:	bfb4      	ite	lt
 800ad38:	18d2      	addlt	r2, r2, r3
 800ad3a:	1b1c      	subge	r4, r3, r4
 800ad3c:	9b07      	ldr	r3, [sp, #28]
 800ad3e:	bfbc      	itt	lt
 800ad40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ad42:	2400      	movlt	r4, #0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfb5      	itete	lt
 800ad48:	eba8 0603 	sublt.w	r6, r8, r3
 800ad4c:	9b07      	ldrge	r3, [sp, #28]
 800ad4e:	2300      	movlt	r3, #0
 800ad50:	4646      	movge	r6, r8
 800ad52:	e730      	b.n	800abb6 <_dtoa_r+0x71e>
 800ad54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ad58:	4646      	mov	r6, r8
 800ad5a:	e735      	b.n	800abc8 <_dtoa_r+0x730>
 800ad5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad5e:	e75c      	b.n	800ac1a <_dtoa_r+0x782>
 800ad60:	2300      	movs	r3, #0
 800ad62:	e788      	b.n	800ac76 <_dtoa_r+0x7de>
 800ad64:	3fe00000 	.word	0x3fe00000
 800ad68:	40240000 	.word	0x40240000
 800ad6c:	40140000 	.word	0x40140000
 800ad70:	9b02      	ldr	r3, [sp, #8]
 800ad72:	e780      	b.n	800ac76 <_dtoa_r+0x7de>
 800ad74:	2300      	movs	r3, #0
 800ad76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad78:	e782      	b.n	800ac80 <_dtoa_r+0x7e8>
 800ad7a:	d099      	beq.n	800acb0 <_dtoa_r+0x818>
 800ad7c:	9a08      	ldr	r2, [sp, #32]
 800ad7e:	331c      	adds	r3, #28
 800ad80:	441a      	add	r2, r3
 800ad82:	4498      	add	r8, r3
 800ad84:	441e      	add	r6, r3
 800ad86:	9208      	str	r2, [sp, #32]
 800ad88:	e792      	b.n	800acb0 <_dtoa_r+0x818>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	e7f6      	b.n	800ad7c <_dtoa_r+0x8e4>
 800ad8e:	9b07      	ldr	r3, [sp, #28]
 800ad90:	9704      	str	r7, [sp, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dc20      	bgt.n	800add8 <_dtoa_r+0x940>
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	dd1e      	ble.n	800addc <_dtoa_r+0x944>
 800ad9e:	9b00      	ldr	r3, [sp, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f47f aec0 	bne.w	800ab26 <_dtoa_r+0x68e>
 800ada6:	4621      	mov	r1, r4
 800ada8:	2205      	movs	r2, #5
 800adaa:	4658      	mov	r0, fp
 800adac:	f000 fa9a 	bl	800b2e4 <__multadd>
 800adb0:	4601      	mov	r1, r0
 800adb2:	4604      	mov	r4, r0
 800adb4:	4648      	mov	r0, r9
 800adb6:	f000 fcad 	bl	800b714 <__mcmp>
 800adba:	2800      	cmp	r0, #0
 800adbc:	f77f aeb3 	ble.w	800ab26 <_dtoa_r+0x68e>
 800adc0:	4656      	mov	r6, sl
 800adc2:	2331      	movs	r3, #49	@ 0x31
 800adc4:	f806 3b01 	strb.w	r3, [r6], #1
 800adc8:	9b04      	ldr	r3, [sp, #16]
 800adca:	3301      	adds	r3, #1
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	e6ae      	b.n	800ab2e <_dtoa_r+0x696>
 800add0:	9c07      	ldr	r4, [sp, #28]
 800add2:	9704      	str	r7, [sp, #16]
 800add4:	4625      	mov	r5, r4
 800add6:	e7f3      	b.n	800adc0 <_dtoa_r+0x928>
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f000 8104 	beq.w	800afec <_dtoa_r+0xb54>
 800ade4:	2e00      	cmp	r6, #0
 800ade6:	dd05      	ble.n	800adf4 <_dtoa_r+0x95c>
 800ade8:	4629      	mov	r1, r5
 800adea:	4632      	mov	r2, r6
 800adec:	4658      	mov	r0, fp
 800adee:	f000 fc25 	bl	800b63c <__lshift>
 800adf2:	4605      	mov	r5, r0
 800adf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d05a      	beq.n	800aeb0 <_dtoa_r+0xa18>
 800adfa:	6869      	ldr	r1, [r5, #4]
 800adfc:	4658      	mov	r0, fp
 800adfe:	f000 fa0f 	bl	800b220 <_Balloc>
 800ae02:	4606      	mov	r6, r0
 800ae04:	b928      	cbnz	r0, 800ae12 <_dtoa_r+0x97a>
 800ae06:	4b84      	ldr	r3, [pc, #528]	@ (800b018 <_dtoa_r+0xb80>)
 800ae08:	4602      	mov	r2, r0
 800ae0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae0e:	f7ff bb5a 	b.w	800a4c6 <_dtoa_r+0x2e>
 800ae12:	692a      	ldr	r2, [r5, #16]
 800ae14:	3202      	adds	r2, #2
 800ae16:	0092      	lsls	r2, r2, #2
 800ae18:	f105 010c 	add.w	r1, r5, #12
 800ae1c:	300c      	adds	r0, #12
 800ae1e:	f7ff faa2 	bl	800a366 <memcpy>
 800ae22:	2201      	movs	r2, #1
 800ae24:	4631      	mov	r1, r6
 800ae26:	4658      	mov	r0, fp
 800ae28:	f000 fc08 	bl	800b63c <__lshift>
 800ae2c:	f10a 0301 	add.w	r3, sl, #1
 800ae30:	9307      	str	r3, [sp, #28]
 800ae32:	9b00      	ldr	r3, [sp, #0]
 800ae34:	4453      	add	r3, sl
 800ae36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	462f      	mov	r7, r5
 800ae40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae42:	4605      	mov	r5, r0
 800ae44:	9b07      	ldr	r3, [sp, #28]
 800ae46:	4621      	mov	r1, r4
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	4648      	mov	r0, r9
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	f7ff fa98 	bl	800a382 <quorem>
 800ae52:	4639      	mov	r1, r7
 800ae54:	9002      	str	r0, [sp, #8]
 800ae56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae5a:	4648      	mov	r0, r9
 800ae5c:	f000 fc5a 	bl	800b714 <__mcmp>
 800ae60:	462a      	mov	r2, r5
 800ae62:	9008      	str	r0, [sp, #32]
 800ae64:	4621      	mov	r1, r4
 800ae66:	4658      	mov	r0, fp
 800ae68:	f000 fc70 	bl	800b74c <__mdiff>
 800ae6c:	68c2      	ldr	r2, [r0, #12]
 800ae6e:	4606      	mov	r6, r0
 800ae70:	bb02      	cbnz	r2, 800aeb4 <_dtoa_r+0xa1c>
 800ae72:	4601      	mov	r1, r0
 800ae74:	4648      	mov	r0, r9
 800ae76:	f000 fc4d 	bl	800b714 <__mcmp>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4658      	mov	r0, fp
 800ae80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae82:	f000 fa0d 	bl	800b2a0 <_Bfree>
 800ae86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae8a:	9e07      	ldr	r6, [sp, #28]
 800ae8c:	ea43 0102 	orr.w	r1, r3, r2
 800ae90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae92:	4319      	orrs	r1, r3
 800ae94:	d110      	bne.n	800aeb8 <_dtoa_r+0xa20>
 800ae96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae9a:	d029      	beq.n	800aef0 <_dtoa_r+0xa58>
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dd02      	ble.n	800aea8 <_dtoa_r+0xa10>
 800aea2:	9b02      	ldr	r3, [sp, #8]
 800aea4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aea8:	9b00      	ldr	r3, [sp, #0]
 800aeaa:	f883 8000 	strb.w	r8, [r3]
 800aeae:	e63f      	b.n	800ab30 <_dtoa_r+0x698>
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	e7bb      	b.n	800ae2c <_dtoa_r+0x994>
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	e7e1      	b.n	800ae7c <_dtoa_r+0x9e4>
 800aeb8:	9b08      	ldr	r3, [sp, #32]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	db04      	blt.n	800aec8 <_dtoa_r+0xa30>
 800aebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aec0:	430b      	orrs	r3, r1
 800aec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aec4:	430b      	orrs	r3, r1
 800aec6:	d120      	bne.n	800af0a <_dtoa_r+0xa72>
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	dded      	ble.n	800aea8 <_dtoa_r+0xa10>
 800aecc:	4649      	mov	r1, r9
 800aece:	2201      	movs	r2, #1
 800aed0:	4658      	mov	r0, fp
 800aed2:	f000 fbb3 	bl	800b63c <__lshift>
 800aed6:	4621      	mov	r1, r4
 800aed8:	4681      	mov	r9, r0
 800aeda:	f000 fc1b 	bl	800b714 <__mcmp>
 800aede:	2800      	cmp	r0, #0
 800aee0:	dc03      	bgt.n	800aeea <_dtoa_r+0xa52>
 800aee2:	d1e1      	bne.n	800aea8 <_dtoa_r+0xa10>
 800aee4:	f018 0f01 	tst.w	r8, #1
 800aee8:	d0de      	beq.n	800aea8 <_dtoa_r+0xa10>
 800aeea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aeee:	d1d8      	bne.n	800aea2 <_dtoa_r+0xa0a>
 800aef0:	9a00      	ldr	r2, [sp, #0]
 800aef2:	2339      	movs	r3, #57	@ 0x39
 800aef4:	7013      	strb	r3, [r2, #0]
 800aef6:	4633      	mov	r3, r6
 800aef8:	461e      	mov	r6, r3
 800aefa:	3b01      	subs	r3, #1
 800aefc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af00:	2a39      	cmp	r2, #57	@ 0x39
 800af02:	d052      	beq.n	800afaa <_dtoa_r+0xb12>
 800af04:	3201      	adds	r2, #1
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	e612      	b.n	800ab30 <_dtoa_r+0x698>
 800af0a:	2a00      	cmp	r2, #0
 800af0c:	dd07      	ble.n	800af1e <_dtoa_r+0xa86>
 800af0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af12:	d0ed      	beq.n	800aef0 <_dtoa_r+0xa58>
 800af14:	9a00      	ldr	r2, [sp, #0]
 800af16:	f108 0301 	add.w	r3, r8, #1
 800af1a:	7013      	strb	r3, [r2, #0]
 800af1c:	e608      	b.n	800ab30 <_dtoa_r+0x698>
 800af1e:	9b07      	ldr	r3, [sp, #28]
 800af20:	9a07      	ldr	r2, [sp, #28]
 800af22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800af26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af28:	4293      	cmp	r3, r2
 800af2a:	d028      	beq.n	800af7e <_dtoa_r+0xae6>
 800af2c:	4649      	mov	r1, r9
 800af2e:	2300      	movs	r3, #0
 800af30:	220a      	movs	r2, #10
 800af32:	4658      	mov	r0, fp
 800af34:	f000 f9d6 	bl	800b2e4 <__multadd>
 800af38:	42af      	cmp	r7, r5
 800af3a:	4681      	mov	r9, r0
 800af3c:	f04f 0300 	mov.w	r3, #0
 800af40:	f04f 020a 	mov.w	r2, #10
 800af44:	4639      	mov	r1, r7
 800af46:	4658      	mov	r0, fp
 800af48:	d107      	bne.n	800af5a <_dtoa_r+0xac2>
 800af4a:	f000 f9cb 	bl	800b2e4 <__multadd>
 800af4e:	4607      	mov	r7, r0
 800af50:	4605      	mov	r5, r0
 800af52:	9b07      	ldr	r3, [sp, #28]
 800af54:	3301      	adds	r3, #1
 800af56:	9307      	str	r3, [sp, #28]
 800af58:	e774      	b.n	800ae44 <_dtoa_r+0x9ac>
 800af5a:	f000 f9c3 	bl	800b2e4 <__multadd>
 800af5e:	4629      	mov	r1, r5
 800af60:	4607      	mov	r7, r0
 800af62:	2300      	movs	r3, #0
 800af64:	220a      	movs	r2, #10
 800af66:	4658      	mov	r0, fp
 800af68:	f000 f9bc 	bl	800b2e4 <__multadd>
 800af6c:	4605      	mov	r5, r0
 800af6e:	e7f0      	b.n	800af52 <_dtoa_r+0xaba>
 800af70:	9b00      	ldr	r3, [sp, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	bfcc      	ite	gt
 800af76:	461e      	movgt	r6, r3
 800af78:	2601      	movle	r6, #1
 800af7a:	4456      	add	r6, sl
 800af7c:	2700      	movs	r7, #0
 800af7e:	4649      	mov	r1, r9
 800af80:	2201      	movs	r2, #1
 800af82:	4658      	mov	r0, fp
 800af84:	f000 fb5a 	bl	800b63c <__lshift>
 800af88:	4621      	mov	r1, r4
 800af8a:	4681      	mov	r9, r0
 800af8c:	f000 fbc2 	bl	800b714 <__mcmp>
 800af90:	2800      	cmp	r0, #0
 800af92:	dcb0      	bgt.n	800aef6 <_dtoa_r+0xa5e>
 800af94:	d102      	bne.n	800af9c <_dtoa_r+0xb04>
 800af96:	f018 0f01 	tst.w	r8, #1
 800af9a:	d1ac      	bne.n	800aef6 <_dtoa_r+0xa5e>
 800af9c:	4633      	mov	r3, r6
 800af9e:	461e      	mov	r6, r3
 800afa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afa4:	2a30      	cmp	r2, #48	@ 0x30
 800afa6:	d0fa      	beq.n	800af9e <_dtoa_r+0xb06>
 800afa8:	e5c2      	b.n	800ab30 <_dtoa_r+0x698>
 800afaa:	459a      	cmp	sl, r3
 800afac:	d1a4      	bne.n	800aef8 <_dtoa_r+0xa60>
 800afae:	9b04      	ldr	r3, [sp, #16]
 800afb0:	3301      	adds	r3, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	2331      	movs	r3, #49	@ 0x31
 800afb6:	f88a 3000 	strb.w	r3, [sl]
 800afba:	e5b9      	b.n	800ab30 <_dtoa_r+0x698>
 800afbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b01c <_dtoa_r+0xb84>
 800afc2:	b11b      	cbz	r3, 800afcc <_dtoa_r+0xb34>
 800afc4:	f10a 0308 	add.w	r3, sl, #8
 800afc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800afca:	6013      	str	r3, [r2, #0]
 800afcc:	4650      	mov	r0, sl
 800afce:	b019      	add	sp, #100	@ 0x64
 800afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	f77f ae37 	ble.w	800ac4a <_dtoa_r+0x7b2>
 800afdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afde:	930a      	str	r3, [sp, #40]	@ 0x28
 800afe0:	2001      	movs	r0, #1
 800afe2:	e655      	b.n	800ac90 <_dtoa_r+0x7f8>
 800afe4:	9b00      	ldr	r3, [sp, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f77f aed6 	ble.w	800ad98 <_dtoa_r+0x900>
 800afec:	4656      	mov	r6, sl
 800afee:	4621      	mov	r1, r4
 800aff0:	4648      	mov	r0, r9
 800aff2:	f7ff f9c6 	bl	800a382 <quorem>
 800aff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800affa:	f806 8b01 	strb.w	r8, [r6], #1
 800affe:	9b00      	ldr	r3, [sp, #0]
 800b000:	eba6 020a 	sub.w	r2, r6, sl
 800b004:	4293      	cmp	r3, r2
 800b006:	ddb3      	ble.n	800af70 <_dtoa_r+0xad8>
 800b008:	4649      	mov	r1, r9
 800b00a:	2300      	movs	r3, #0
 800b00c:	220a      	movs	r2, #10
 800b00e:	4658      	mov	r0, fp
 800b010:	f000 f968 	bl	800b2e4 <__multadd>
 800b014:	4681      	mov	r9, r0
 800b016:	e7ea      	b.n	800afee <_dtoa_r+0xb56>
 800b018:	0800daec 	.word	0x0800daec
 800b01c:	0800da70 	.word	0x0800da70

0800b020 <_free_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4605      	mov	r5, r0
 800b024:	2900      	cmp	r1, #0
 800b026:	d041      	beq.n	800b0ac <_free_r+0x8c>
 800b028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02c:	1f0c      	subs	r4, r1, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfb8      	it	lt
 800b032:	18e4      	addlt	r4, r4, r3
 800b034:	f000 f8e8 	bl	800b208 <__malloc_lock>
 800b038:	4a1d      	ldr	r2, [pc, #116]	@ (800b0b0 <_free_r+0x90>)
 800b03a:	6813      	ldr	r3, [r2, #0]
 800b03c:	b933      	cbnz	r3, 800b04c <_free_r+0x2c>
 800b03e:	6063      	str	r3, [r4, #4]
 800b040:	6014      	str	r4, [r2, #0]
 800b042:	4628      	mov	r0, r5
 800b044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b048:	f000 b8e4 	b.w	800b214 <__malloc_unlock>
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	d908      	bls.n	800b062 <_free_r+0x42>
 800b050:	6820      	ldr	r0, [r4, #0]
 800b052:	1821      	adds	r1, r4, r0
 800b054:	428b      	cmp	r3, r1
 800b056:	bf01      	itttt	eq
 800b058:	6819      	ldreq	r1, [r3, #0]
 800b05a:	685b      	ldreq	r3, [r3, #4]
 800b05c:	1809      	addeq	r1, r1, r0
 800b05e:	6021      	streq	r1, [r4, #0]
 800b060:	e7ed      	b.n	800b03e <_free_r+0x1e>
 800b062:	461a      	mov	r2, r3
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	b10b      	cbz	r3, 800b06c <_free_r+0x4c>
 800b068:	42a3      	cmp	r3, r4
 800b06a:	d9fa      	bls.n	800b062 <_free_r+0x42>
 800b06c:	6811      	ldr	r1, [r2, #0]
 800b06e:	1850      	adds	r0, r2, r1
 800b070:	42a0      	cmp	r0, r4
 800b072:	d10b      	bne.n	800b08c <_free_r+0x6c>
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	4401      	add	r1, r0
 800b078:	1850      	adds	r0, r2, r1
 800b07a:	4283      	cmp	r3, r0
 800b07c:	6011      	str	r1, [r2, #0]
 800b07e:	d1e0      	bne.n	800b042 <_free_r+0x22>
 800b080:	6818      	ldr	r0, [r3, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	6053      	str	r3, [r2, #4]
 800b086:	4408      	add	r0, r1
 800b088:	6010      	str	r0, [r2, #0]
 800b08a:	e7da      	b.n	800b042 <_free_r+0x22>
 800b08c:	d902      	bls.n	800b094 <_free_r+0x74>
 800b08e:	230c      	movs	r3, #12
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	e7d6      	b.n	800b042 <_free_r+0x22>
 800b094:	6820      	ldr	r0, [r4, #0]
 800b096:	1821      	adds	r1, r4, r0
 800b098:	428b      	cmp	r3, r1
 800b09a:	bf04      	itt	eq
 800b09c:	6819      	ldreq	r1, [r3, #0]
 800b09e:	685b      	ldreq	r3, [r3, #4]
 800b0a0:	6063      	str	r3, [r4, #4]
 800b0a2:	bf04      	itt	eq
 800b0a4:	1809      	addeq	r1, r1, r0
 800b0a6:	6021      	streq	r1, [r4, #0]
 800b0a8:	6054      	str	r4, [r2, #4]
 800b0aa:	e7ca      	b.n	800b042 <_free_r+0x22>
 800b0ac:	bd38      	pop	{r3, r4, r5, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200021d4 	.word	0x200021d4

0800b0b4 <malloc>:
 800b0b4:	4b02      	ldr	r3, [pc, #8]	@ (800b0c0 <malloc+0xc>)
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	6818      	ldr	r0, [r3, #0]
 800b0ba:	f000 b825 	b.w	800b108 <_malloc_r>
 800b0be:	bf00      	nop
 800b0c0:	20000120 	.word	0x20000120

0800b0c4 <sbrk_aligned>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	4e0f      	ldr	r6, [pc, #60]	@ (800b104 <sbrk_aligned+0x40>)
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	6831      	ldr	r1, [r6, #0]
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	b911      	cbnz	r1, 800b0d6 <sbrk_aligned+0x12>
 800b0d0:	f000 fe46 	bl	800bd60 <_sbrk_r>
 800b0d4:	6030      	str	r0, [r6, #0]
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f000 fe41 	bl	800bd60 <_sbrk_r>
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	d103      	bne.n	800b0ea <sbrk_aligned+0x26>
 800b0e2:	f04f 34ff 	mov.w	r4, #4294967295
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ea:	1cc4      	adds	r4, r0, #3
 800b0ec:	f024 0403 	bic.w	r4, r4, #3
 800b0f0:	42a0      	cmp	r0, r4
 800b0f2:	d0f8      	beq.n	800b0e6 <sbrk_aligned+0x22>
 800b0f4:	1a21      	subs	r1, r4, r0
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f000 fe32 	bl	800bd60 <_sbrk_r>
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d1f2      	bne.n	800b0e6 <sbrk_aligned+0x22>
 800b100:	e7ef      	b.n	800b0e2 <sbrk_aligned+0x1e>
 800b102:	bf00      	nop
 800b104:	200021d0 	.word	0x200021d0

0800b108 <_malloc_r>:
 800b108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b10c:	1ccd      	adds	r5, r1, #3
 800b10e:	f025 0503 	bic.w	r5, r5, #3
 800b112:	3508      	adds	r5, #8
 800b114:	2d0c      	cmp	r5, #12
 800b116:	bf38      	it	cc
 800b118:	250c      	movcc	r5, #12
 800b11a:	2d00      	cmp	r5, #0
 800b11c:	4606      	mov	r6, r0
 800b11e:	db01      	blt.n	800b124 <_malloc_r+0x1c>
 800b120:	42a9      	cmp	r1, r5
 800b122:	d904      	bls.n	800b12e <_malloc_r+0x26>
 800b124:	230c      	movs	r3, #12
 800b126:	6033      	str	r3, [r6, #0]
 800b128:	2000      	movs	r0, #0
 800b12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b12e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b204 <_malloc_r+0xfc>
 800b132:	f000 f869 	bl	800b208 <__malloc_lock>
 800b136:	f8d8 3000 	ldr.w	r3, [r8]
 800b13a:	461c      	mov	r4, r3
 800b13c:	bb44      	cbnz	r4, 800b190 <_malloc_r+0x88>
 800b13e:	4629      	mov	r1, r5
 800b140:	4630      	mov	r0, r6
 800b142:	f7ff ffbf 	bl	800b0c4 <sbrk_aligned>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	4604      	mov	r4, r0
 800b14a:	d158      	bne.n	800b1fe <_malloc_r+0xf6>
 800b14c:	f8d8 4000 	ldr.w	r4, [r8]
 800b150:	4627      	mov	r7, r4
 800b152:	2f00      	cmp	r7, #0
 800b154:	d143      	bne.n	800b1de <_malloc_r+0xd6>
 800b156:	2c00      	cmp	r4, #0
 800b158:	d04b      	beq.n	800b1f2 <_malloc_r+0xea>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	4639      	mov	r1, r7
 800b15e:	4630      	mov	r0, r6
 800b160:	eb04 0903 	add.w	r9, r4, r3
 800b164:	f000 fdfc 	bl	800bd60 <_sbrk_r>
 800b168:	4581      	cmp	r9, r0
 800b16a:	d142      	bne.n	800b1f2 <_malloc_r+0xea>
 800b16c:	6821      	ldr	r1, [r4, #0]
 800b16e:	1a6d      	subs	r5, r5, r1
 800b170:	4629      	mov	r1, r5
 800b172:	4630      	mov	r0, r6
 800b174:	f7ff ffa6 	bl	800b0c4 <sbrk_aligned>
 800b178:	3001      	adds	r0, #1
 800b17a:	d03a      	beq.n	800b1f2 <_malloc_r+0xea>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	442b      	add	r3, r5
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	f8d8 3000 	ldr.w	r3, [r8]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	bb62      	cbnz	r2, 800b1e4 <_malloc_r+0xdc>
 800b18a:	f8c8 7000 	str.w	r7, [r8]
 800b18e:	e00f      	b.n	800b1b0 <_malloc_r+0xa8>
 800b190:	6822      	ldr	r2, [r4, #0]
 800b192:	1b52      	subs	r2, r2, r5
 800b194:	d420      	bmi.n	800b1d8 <_malloc_r+0xd0>
 800b196:	2a0b      	cmp	r2, #11
 800b198:	d917      	bls.n	800b1ca <_malloc_r+0xc2>
 800b19a:	1961      	adds	r1, r4, r5
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	6025      	str	r5, [r4, #0]
 800b1a0:	bf18      	it	ne
 800b1a2:	6059      	strne	r1, [r3, #4]
 800b1a4:	6863      	ldr	r3, [r4, #4]
 800b1a6:	bf08      	it	eq
 800b1a8:	f8c8 1000 	streq.w	r1, [r8]
 800b1ac:	5162      	str	r2, [r4, r5]
 800b1ae:	604b      	str	r3, [r1, #4]
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f000 f82f 	bl	800b214 <__malloc_unlock>
 800b1b6:	f104 000b 	add.w	r0, r4, #11
 800b1ba:	1d23      	adds	r3, r4, #4
 800b1bc:	f020 0007 	bic.w	r0, r0, #7
 800b1c0:	1ac2      	subs	r2, r0, r3
 800b1c2:	bf1c      	itt	ne
 800b1c4:	1a1b      	subne	r3, r3, r0
 800b1c6:	50a3      	strne	r3, [r4, r2]
 800b1c8:	e7af      	b.n	800b12a <_malloc_r+0x22>
 800b1ca:	6862      	ldr	r2, [r4, #4]
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	bf0c      	ite	eq
 800b1d0:	f8c8 2000 	streq.w	r2, [r8]
 800b1d4:	605a      	strne	r2, [r3, #4]
 800b1d6:	e7eb      	b.n	800b1b0 <_malloc_r+0xa8>
 800b1d8:	4623      	mov	r3, r4
 800b1da:	6864      	ldr	r4, [r4, #4]
 800b1dc:	e7ae      	b.n	800b13c <_malloc_r+0x34>
 800b1de:	463c      	mov	r4, r7
 800b1e0:	687f      	ldr	r7, [r7, #4]
 800b1e2:	e7b6      	b.n	800b152 <_malloc_r+0x4a>
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d1fb      	bne.n	800b1e4 <_malloc_r+0xdc>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	6053      	str	r3, [r2, #4]
 800b1f0:	e7de      	b.n	800b1b0 <_malloc_r+0xa8>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	6033      	str	r3, [r6, #0]
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f000 f80c 	bl	800b214 <__malloc_unlock>
 800b1fc:	e794      	b.n	800b128 <_malloc_r+0x20>
 800b1fe:	6005      	str	r5, [r0, #0]
 800b200:	e7d6      	b.n	800b1b0 <_malloc_r+0xa8>
 800b202:	bf00      	nop
 800b204:	200021d4 	.word	0x200021d4

0800b208 <__malloc_lock>:
 800b208:	4801      	ldr	r0, [pc, #4]	@ (800b210 <__malloc_lock+0x8>)
 800b20a:	f7ff b8aa 	b.w	800a362 <__retarget_lock_acquire_recursive>
 800b20e:	bf00      	nop
 800b210:	200021cc 	.word	0x200021cc

0800b214 <__malloc_unlock>:
 800b214:	4801      	ldr	r0, [pc, #4]	@ (800b21c <__malloc_unlock+0x8>)
 800b216:	f7ff b8a5 	b.w	800a364 <__retarget_lock_release_recursive>
 800b21a:	bf00      	nop
 800b21c:	200021cc 	.word	0x200021cc

0800b220 <_Balloc>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	69c6      	ldr	r6, [r0, #28]
 800b224:	4604      	mov	r4, r0
 800b226:	460d      	mov	r5, r1
 800b228:	b976      	cbnz	r6, 800b248 <_Balloc+0x28>
 800b22a:	2010      	movs	r0, #16
 800b22c:	f7ff ff42 	bl	800b0b4 <malloc>
 800b230:	4602      	mov	r2, r0
 800b232:	61e0      	str	r0, [r4, #28]
 800b234:	b920      	cbnz	r0, 800b240 <_Balloc+0x20>
 800b236:	4b18      	ldr	r3, [pc, #96]	@ (800b298 <_Balloc+0x78>)
 800b238:	4818      	ldr	r0, [pc, #96]	@ (800b29c <_Balloc+0x7c>)
 800b23a:	216b      	movs	r1, #107	@ 0x6b
 800b23c:	f000 fda0 	bl	800bd80 <__assert_func>
 800b240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b244:	6006      	str	r6, [r0, #0]
 800b246:	60c6      	str	r6, [r0, #12]
 800b248:	69e6      	ldr	r6, [r4, #28]
 800b24a:	68f3      	ldr	r3, [r6, #12]
 800b24c:	b183      	cbz	r3, 800b270 <_Balloc+0x50>
 800b24e:	69e3      	ldr	r3, [r4, #28]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b256:	b9b8      	cbnz	r0, 800b288 <_Balloc+0x68>
 800b258:	2101      	movs	r1, #1
 800b25a:	fa01 f605 	lsl.w	r6, r1, r5
 800b25e:	1d72      	adds	r2, r6, #5
 800b260:	0092      	lsls	r2, r2, #2
 800b262:	4620      	mov	r0, r4
 800b264:	f000 fdaa 	bl	800bdbc <_calloc_r>
 800b268:	b160      	cbz	r0, 800b284 <_Balloc+0x64>
 800b26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b26e:	e00e      	b.n	800b28e <_Balloc+0x6e>
 800b270:	2221      	movs	r2, #33	@ 0x21
 800b272:	2104      	movs	r1, #4
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fda1 	bl	800bdbc <_calloc_r>
 800b27a:	69e3      	ldr	r3, [r4, #28]
 800b27c:	60f0      	str	r0, [r6, #12]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e4      	bne.n	800b24e <_Balloc+0x2e>
 800b284:	2000      	movs	r0, #0
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	6802      	ldr	r2, [r0, #0]
 800b28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b28e:	2300      	movs	r3, #0
 800b290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b294:	e7f7      	b.n	800b286 <_Balloc+0x66>
 800b296:	bf00      	nop
 800b298:	0800da7d 	.word	0x0800da7d
 800b29c:	0800dafd 	.word	0x0800dafd

0800b2a0 <_Bfree>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	69c6      	ldr	r6, [r0, #28]
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	b976      	cbnz	r6, 800b2c8 <_Bfree+0x28>
 800b2aa:	2010      	movs	r0, #16
 800b2ac:	f7ff ff02 	bl	800b0b4 <malloc>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	61e8      	str	r0, [r5, #28]
 800b2b4:	b920      	cbnz	r0, 800b2c0 <_Bfree+0x20>
 800b2b6:	4b09      	ldr	r3, [pc, #36]	@ (800b2dc <_Bfree+0x3c>)
 800b2b8:	4809      	ldr	r0, [pc, #36]	@ (800b2e0 <_Bfree+0x40>)
 800b2ba:	218f      	movs	r1, #143	@ 0x8f
 800b2bc:	f000 fd60 	bl	800bd80 <__assert_func>
 800b2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2c4:	6006      	str	r6, [r0, #0]
 800b2c6:	60c6      	str	r6, [r0, #12]
 800b2c8:	b13c      	cbz	r4, 800b2da <_Bfree+0x3a>
 800b2ca:	69eb      	ldr	r3, [r5, #28]
 800b2cc:	6862      	ldr	r2, [r4, #4]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2d4:	6021      	str	r1, [r4, #0]
 800b2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	0800da7d 	.word	0x0800da7d
 800b2e0:	0800dafd 	.word	0x0800dafd

0800b2e4 <__multadd>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	690d      	ldr	r5, [r1, #16]
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	461e      	mov	r6, r3
 800b2f0:	f101 0c14 	add.w	ip, r1, #20
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2fa:	b299      	uxth	r1, r3
 800b2fc:	fb02 6101 	mla	r1, r2, r1, r6
 800b300:	0c1e      	lsrs	r6, r3, #16
 800b302:	0c0b      	lsrs	r3, r1, #16
 800b304:	fb02 3306 	mla	r3, r2, r6, r3
 800b308:	b289      	uxth	r1, r1
 800b30a:	3001      	adds	r0, #1
 800b30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b310:	4285      	cmp	r5, r0
 800b312:	f84c 1b04 	str.w	r1, [ip], #4
 800b316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b31a:	dcec      	bgt.n	800b2f6 <__multadd+0x12>
 800b31c:	b30e      	cbz	r6, 800b362 <__multadd+0x7e>
 800b31e:	68a3      	ldr	r3, [r4, #8]
 800b320:	42ab      	cmp	r3, r5
 800b322:	dc19      	bgt.n	800b358 <__multadd+0x74>
 800b324:	6861      	ldr	r1, [r4, #4]
 800b326:	4638      	mov	r0, r7
 800b328:	3101      	adds	r1, #1
 800b32a:	f7ff ff79 	bl	800b220 <_Balloc>
 800b32e:	4680      	mov	r8, r0
 800b330:	b928      	cbnz	r0, 800b33e <__multadd+0x5a>
 800b332:	4602      	mov	r2, r0
 800b334:	4b0c      	ldr	r3, [pc, #48]	@ (800b368 <__multadd+0x84>)
 800b336:	480d      	ldr	r0, [pc, #52]	@ (800b36c <__multadd+0x88>)
 800b338:	21ba      	movs	r1, #186	@ 0xba
 800b33a:	f000 fd21 	bl	800bd80 <__assert_func>
 800b33e:	6922      	ldr	r2, [r4, #16]
 800b340:	3202      	adds	r2, #2
 800b342:	f104 010c 	add.w	r1, r4, #12
 800b346:	0092      	lsls	r2, r2, #2
 800b348:	300c      	adds	r0, #12
 800b34a:	f7ff f80c 	bl	800a366 <memcpy>
 800b34e:	4621      	mov	r1, r4
 800b350:	4638      	mov	r0, r7
 800b352:	f7ff ffa5 	bl	800b2a0 <_Bfree>
 800b356:	4644      	mov	r4, r8
 800b358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b35c:	3501      	adds	r5, #1
 800b35e:	615e      	str	r6, [r3, #20]
 800b360:	6125      	str	r5, [r4, #16]
 800b362:	4620      	mov	r0, r4
 800b364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b368:	0800daec 	.word	0x0800daec
 800b36c:	0800dafd 	.word	0x0800dafd

0800b370 <__hi0bits>:
 800b370:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b374:	4603      	mov	r3, r0
 800b376:	bf36      	itet	cc
 800b378:	0403      	lslcc	r3, r0, #16
 800b37a:	2000      	movcs	r0, #0
 800b37c:	2010      	movcc	r0, #16
 800b37e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b382:	bf3c      	itt	cc
 800b384:	021b      	lslcc	r3, r3, #8
 800b386:	3008      	addcc	r0, #8
 800b388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b38c:	bf3c      	itt	cc
 800b38e:	011b      	lslcc	r3, r3, #4
 800b390:	3004      	addcc	r0, #4
 800b392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b396:	bf3c      	itt	cc
 800b398:	009b      	lslcc	r3, r3, #2
 800b39a:	3002      	addcc	r0, #2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	db05      	blt.n	800b3ac <__hi0bits+0x3c>
 800b3a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b3a4:	f100 0001 	add.w	r0, r0, #1
 800b3a8:	bf08      	it	eq
 800b3aa:	2020      	moveq	r0, #32
 800b3ac:	4770      	bx	lr

0800b3ae <__lo0bits>:
 800b3ae:	6803      	ldr	r3, [r0, #0]
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	f013 0007 	ands.w	r0, r3, #7
 800b3b6:	d00b      	beq.n	800b3d0 <__lo0bits+0x22>
 800b3b8:	07d9      	lsls	r1, r3, #31
 800b3ba:	d421      	bmi.n	800b400 <__lo0bits+0x52>
 800b3bc:	0798      	lsls	r0, r3, #30
 800b3be:	bf49      	itett	mi
 800b3c0:	085b      	lsrmi	r3, r3, #1
 800b3c2:	089b      	lsrpl	r3, r3, #2
 800b3c4:	2001      	movmi	r0, #1
 800b3c6:	6013      	strmi	r3, [r2, #0]
 800b3c8:	bf5c      	itt	pl
 800b3ca:	6013      	strpl	r3, [r2, #0]
 800b3cc:	2002      	movpl	r0, #2
 800b3ce:	4770      	bx	lr
 800b3d0:	b299      	uxth	r1, r3
 800b3d2:	b909      	cbnz	r1, 800b3d8 <__lo0bits+0x2a>
 800b3d4:	0c1b      	lsrs	r3, r3, #16
 800b3d6:	2010      	movs	r0, #16
 800b3d8:	b2d9      	uxtb	r1, r3
 800b3da:	b909      	cbnz	r1, 800b3e0 <__lo0bits+0x32>
 800b3dc:	3008      	adds	r0, #8
 800b3de:	0a1b      	lsrs	r3, r3, #8
 800b3e0:	0719      	lsls	r1, r3, #28
 800b3e2:	bf04      	itt	eq
 800b3e4:	091b      	lsreq	r3, r3, #4
 800b3e6:	3004      	addeq	r0, #4
 800b3e8:	0799      	lsls	r1, r3, #30
 800b3ea:	bf04      	itt	eq
 800b3ec:	089b      	lsreq	r3, r3, #2
 800b3ee:	3002      	addeq	r0, #2
 800b3f0:	07d9      	lsls	r1, r3, #31
 800b3f2:	d403      	bmi.n	800b3fc <__lo0bits+0x4e>
 800b3f4:	085b      	lsrs	r3, r3, #1
 800b3f6:	f100 0001 	add.w	r0, r0, #1
 800b3fa:	d003      	beq.n	800b404 <__lo0bits+0x56>
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	4770      	bx	lr
 800b400:	2000      	movs	r0, #0
 800b402:	4770      	bx	lr
 800b404:	2020      	movs	r0, #32
 800b406:	4770      	bx	lr

0800b408 <__i2b>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	460c      	mov	r4, r1
 800b40c:	2101      	movs	r1, #1
 800b40e:	f7ff ff07 	bl	800b220 <_Balloc>
 800b412:	4602      	mov	r2, r0
 800b414:	b928      	cbnz	r0, 800b422 <__i2b+0x1a>
 800b416:	4b05      	ldr	r3, [pc, #20]	@ (800b42c <__i2b+0x24>)
 800b418:	4805      	ldr	r0, [pc, #20]	@ (800b430 <__i2b+0x28>)
 800b41a:	f240 1145 	movw	r1, #325	@ 0x145
 800b41e:	f000 fcaf 	bl	800bd80 <__assert_func>
 800b422:	2301      	movs	r3, #1
 800b424:	6144      	str	r4, [r0, #20]
 800b426:	6103      	str	r3, [r0, #16]
 800b428:	bd10      	pop	{r4, pc}
 800b42a:	bf00      	nop
 800b42c:	0800daec 	.word	0x0800daec
 800b430:	0800dafd 	.word	0x0800dafd

0800b434 <__multiply>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	4614      	mov	r4, r2
 800b43a:	690a      	ldr	r2, [r1, #16]
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	429a      	cmp	r2, r3
 800b440:	bfa8      	it	ge
 800b442:	4623      	movge	r3, r4
 800b444:	460f      	mov	r7, r1
 800b446:	bfa4      	itt	ge
 800b448:	460c      	movge	r4, r1
 800b44a:	461f      	movge	r7, r3
 800b44c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b450:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b454:	68a3      	ldr	r3, [r4, #8]
 800b456:	6861      	ldr	r1, [r4, #4]
 800b458:	eb0a 0609 	add.w	r6, sl, r9
 800b45c:	42b3      	cmp	r3, r6
 800b45e:	b085      	sub	sp, #20
 800b460:	bfb8      	it	lt
 800b462:	3101      	addlt	r1, #1
 800b464:	f7ff fedc 	bl	800b220 <_Balloc>
 800b468:	b930      	cbnz	r0, 800b478 <__multiply+0x44>
 800b46a:	4602      	mov	r2, r0
 800b46c:	4b44      	ldr	r3, [pc, #272]	@ (800b580 <__multiply+0x14c>)
 800b46e:	4845      	ldr	r0, [pc, #276]	@ (800b584 <__multiply+0x150>)
 800b470:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b474:	f000 fc84 	bl	800bd80 <__assert_func>
 800b478:	f100 0514 	add.w	r5, r0, #20
 800b47c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b480:	462b      	mov	r3, r5
 800b482:	2200      	movs	r2, #0
 800b484:	4543      	cmp	r3, r8
 800b486:	d321      	bcc.n	800b4cc <__multiply+0x98>
 800b488:	f107 0114 	add.w	r1, r7, #20
 800b48c:	f104 0214 	add.w	r2, r4, #20
 800b490:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b494:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b498:	9302      	str	r3, [sp, #8]
 800b49a:	1b13      	subs	r3, r2, r4
 800b49c:	3b15      	subs	r3, #21
 800b49e:	f023 0303 	bic.w	r3, r3, #3
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	f104 0715 	add.w	r7, r4, #21
 800b4a8:	42ba      	cmp	r2, r7
 800b4aa:	bf38      	it	cc
 800b4ac:	2304      	movcc	r3, #4
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	9103      	str	r1, [sp, #12]
 800b4b4:	428b      	cmp	r3, r1
 800b4b6:	d80c      	bhi.n	800b4d2 <__multiply+0x9e>
 800b4b8:	2e00      	cmp	r6, #0
 800b4ba:	dd03      	ble.n	800b4c4 <__multiply+0x90>
 800b4bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d05b      	beq.n	800b57c <__multiply+0x148>
 800b4c4:	6106      	str	r6, [r0, #16]
 800b4c6:	b005      	add	sp, #20
 800b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	f843 2b04 	str.w	r2, [r3], #4
 800b4d0:	e7d8      	b.n	800b484 <__multiply+0x50>
 800b4d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b4d6:	f1ba 0f00 	cmp.w	sl, #0
 800b4da:	d024      	beq.n	800b526 <__multiply+0xf2>
 800b4dc:	f104 0e14 	add.w	lr, r4, #20
 800b4e0:	46a9      	mov	r9, r5
 800b4e2:	f04f 0c00 	mov.w	ip, #0
 800b4e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4ea:	f8d9 3000 	ldr.w	r3, [r9]
 800b4ee:	fa1f fb87 	uxth.w	fp, r7
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b4f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b4fc:	f8d9 7000 	ldr.w	r7, [r9]
 800b500:	4463      	add	r3, ip
 800b502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b506:	fb0a c70b 	mla	r7, sl, fp, ip
 800b50a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b50e:	b29b      	uxth	r3, r3
 800b510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b514:	4572      	cmp	r2, lr
 800b516:	f849 3b04 	str.w	r3, [r9], #4
 800b51a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b51e:	d8e2      	bhi.n	800b4e6 <__multiply+0xb2>
 800b520:	9b01      	ldr	r3, [sp, #4]
 800b522:	f845 c003 	str.w	ip, [r5, r3]
 800b526:	9b03      	ldr	r3, [sp, #12]
 800b528:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b52c:	3104      	adds	r1, #4
 800b52e:	f1b9 0f00 	cmp.w	r9, #0
 800b532:	d021      	beq.n	800b578 <__multiply+0x144>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	f104 0c14 	add.w	ip, r4, #20
 800b53a:	46ae      	mov	lr, r5
 800b53c:	f04f 0a00 	mov.w	sl, #0
 800b540:	f8bc b000 	ldrh.w	fp, [ip]
 800b544:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b548:	fb09 770b 	mla	r7, r9, fp, r7
 800b54c:	4457      	add	r7, sl
 800b54e:	b29b      	uxth	r3, r3
 800b550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b554:	f84e 3b04 	str.w	r3, [lr], #4
 800b558:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b55c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b560:	f8be 3000 	ldrh.w	r3, [lr]
 800b564:	fb09 330a 	mla	r3, r9, sl, r3
 800b568:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b56c:	4562      	cmp	r2, ip
 800b56e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b572:	d8e5      	bhi.n	800b540 <__multiply+0x10c>
 800b574:	9f01      	ldr	r7, [sp, #4]
 800b576:	51eb      	str	r3, [r5, r7]
 800b578:	3504      	adds	r5, #4
 800b57a:	e799      	b.n	800b4b0 <__multiply+0x7c>
 800b57c:	3e01      	subs	r6, #1
 800b57e:	e79b      	b.n	800b4b8 <__multiply+0x84>
 800b580:	0800daec 	.word	0x0800daec
 800b584:	0800dafd 	.word	0x0800dafd

0800b588 <__pow5mult>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	4615      	mov	r5, r2
 800b58e:	f012 0203 	ands.w	r2, r2, #3
 800b592:	4607      	mov	r7, r0
 800b594:	460e      	mov	r6, r1
 800b596:	d007      	beq.n	800b5a8 <__pow5mult+0x20>
 800b598:	4c25      	ldr	r4, [pc, #148]	@ (800b630 <__pow5mult+0xa8>)
 800b59a:	3a01      	subs	r2, #1
 800b59c:	2300      	movs	r3, #0
 800b59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5a2:	f7ff fe9f 	bl	800b2e4 <__multadd>
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	10ad      	asrs	r5, r5, #2
 800b5aa:	d03d      	beq.n	800b628 <__pow5mult+0xa0>
 800b5ac:	69fc      	ldr	r4, [r7, #28]
 800b5ae:	b97c      	cbnz	r4, 800b5d0 <__pow5mult+0x48>
 800b5b0:	2010      	movs	r0, #16
 800b5b2:	f7ff fd7f 	bl	800b0b4 <malloc>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	61f8      	str	r0, [r7, #28]
 800b5ba:	b928      	cbnz	r0, 800b5c8 <__pow5mult+0x40>
 800b5bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b634 <__pow5mult+0xac>)
 800b5be:	481e      	ldr	r0, [pc, #120]	@ (800b638 <__pow5mult+0xb0>)
 800b5c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b5c4:	f000 fbdc 	bl	800bd80 <__assert_func>
 800b5c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5cc:	6004      	str	r4, [r0, #0]
 800b5ce:	60c4      	str	r4, [r0, #12]
 800b5d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b5d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5d8:	b94c      	cbnz	r4, 800b5ee <__pow5mult+0x66>
 800b5da:	f240 2171 	movw	r1, #625	@ 0x271
 800b5de:	4638      	mov	r0, r7
 800b5e0:	f7ff ff12 	bl	800b408 <__i2b>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	6003      	str	r3, [r0, #0]
 800b5ee:	f04f 0900 	mov.w	r9, #0
 800b5f2:	07eb      	lsls	r3, r5, #31
 800b5f4:	d50a      	bpl.n	800b60c <__pow5mult+0x84>
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	f7ff ff1a 	bl	800b434 <__multiply>
 800b600:	4631      	mov	r1, r6
 800b602:	4680      	mov	r8, r0
 800b604:	4638      	mov	r0, r7
 800b606:	f7ff fe4b 	bl	800b2a0 <_Bfree>
 800b60a:	4646      	mov	r6, r8
 800b60c:	106d      	asrs	r5, r5, #1
 800b60e:	d00b      	beq.n	800b628 <__pow5mult+0xa0>
 800b610:	6820      	ldr	r0, [r4, #0]
 800b612:	b938      	cbnz	r0, 800b624 <__pow5mult+0x9c>
 800b614:	4622      	mov	r2, r4
 800b616:	4621      	mov	r1, r4
 800b618:	4638      	mov	r0, r7
 800b61a:	f7ff ff0b 	bl	800b434 <__multiply>
 800b61e:	6020      	str	r0, [r4, #0]
 800b620:	f8c0 9000 	str.w	r9, [r0]
 800b624:	4604      	mov	r4, r0
 800b626:	e7e4      	b.n	800b5f2 <__pow5mult+0x6a>
 800b628:	4630      	mov	r0, r6
 800b62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62e:	bf00      	nop
 800b630:	0800db58 	.word	0x0800db58
 800b634:	0800da7d 	.word	0x0800da7d
 800b638:	0800dafd 	.word	0x0800dafd

0800b63c <__lshift>:
 800b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	6849      	ldr	r1, [r1, #4]
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b64a:	68a3      	ldr	r3, [r4, #8]
 800b64c:	4607      	mov	r7, r0
 800b64e:	4691      	mov	r9, r2
 800b650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b654:	f108 0601 	add.w	r6, r8, #1
 800b658:	42b3      	cmp	r3, r6
 800b65a:	db0b      	blt.n	800b674 <__lshift+0x38>
 800b65c:	4638      	mov	r0, r7
 800b65e:	f7ff fddf 	bl	800b220 <_Balloc>
 800b662:	4605      	mov	r5, r0
 800b664:	b948      	cbnz	r0, 800b67a <__lshift+0x3e>
 800b666:	4602      	mov	r2, r0
 800b668:	4b28      	ldr	r3, [pc, #160]	@ (800b70c <__lshift+0xd0>)
 800b66a:	4829      	ldr	r0, [pc, #164]	@ (800b710 <__lshift+0xd4>)
 800b66c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b670:	f000 fb86 	bl	800bd80 <__assert_func>
 800b674:	3101      	adds	r1, #1
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	e7ee      	b.n	800b658 <__lshift+0x1c>
 800b67a:	2300      	movs	r3, #0
 800b67c:	f100 0114 	add.w	r1, r0, #20
 800b680:	f100 0210 	add.w	r2, r0, #16
 800b684:	4618      	mov	r0, r3
 800b686:	4553      	cmp	r3, sl
 800b688:	db33      	blt.n	800b6f2 <__lshift+0xb6>
 800b68a:	6920      	ldr	r0, [r4, #16]
 800b68c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b690:	f104 0314 	add.w	r3, r4, #20
 800b694:	f019 091f 	ands.w	r9, r9, #31
 800b698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b69c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6a0:	d02b      	beq.n	800b6fa <__lshift+0xbe>
 800b6a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6a6:	468a      	mov	sl, r1
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	6818      	ldr	r0, [r3, #0]
 800b6ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b6b0:	4310      	orrs	r0, r2
 800b6b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ba:	459c      	cmp	ip, r3
 800b6bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6c0:	d8f3      	bhi.n	800b6aa <__lshift+0x6e>
 800b6c2:	ebac 0304 	sub.w	r3, ip, r4
 800b6c6:	3b15      	subs	r3, #21
 800b6c8:	f023 0303 	bic.w	r3, r3, #3
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	f104 0015 	add.w	r0, r4, #21
 800b6d2:	4584      	cmp	ip, r0
 800b6d4:	bf38      	it	cc
 800b6d6:	2304      	movcc	r3, #4
 800b6d8:	50ca      	str	r2, [r1, r3]
 800b6da:	b10a      	cbz	r2, 800b6e0 <__lshift+0xa4>
 800b6dc:	f108 0602 	add.w	r6, r8, #2
 800b6e0:	3e01      	subs	r6, #1
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	612e      	str	r6, [r5, #16]
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	f7ff fdda 	bl	800b2a0 <_Bfree>
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	e7c5      	b.n	800b686 <__lshift+0x4a>
 800b6fa:	3904      	subs	r1, #4
 800b6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b700:	f841 2f04 	str.w	r2, [r1, #4]!
 800b704:	459c      	cmp	ip, r3
 800b706:	d8f9      	bhi.n	800b6fc <__lshift+0xc0>
 800b708:	e7ea      	b.n	800b6e0 <__lshift+0xa4>
 800b70a:	bf00      	nop
 800b70c:	0800daec 	.word	0x0800daec
 800b710:	0800dafd 	.word	0x0800dafd

0800b714 <__mcmp>:
 800b714:	690a      	ldr	r2, [r1, #16]
 800b716:	4603      	mov	r3, r0
 800b718:	6900      	ldr	r0, [r0, #16]
 800b71a:	1a80      	subs	r0, r0, r2
 800b71c:	b530      	push	{r4, r5, lr}
 800b71e:	d10e      	bne.n	800b73e <__mcmp+0x2a>
 800b720:	3314      	adds	r3, #20
 800b722:	3114      	adds	r1, #20
 800b724:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b728:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b72c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b730:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b734:	4295      	cmp	r5, r2
 800b736:	d003      	beq.n	800b740 <__mcmp+0x2c>
 800b738:	d205      	bcs.n	800b746 <__mcmp+0x32>
 800b73a:	f04f 30ff 	mov.w	r0, #4294967295
 800b73e:	bd30      	pop	{r4, r5, pc}
 800b740:	42a3      	cmp	r3, r4
 800b742:	d3f3      	bcc.n	800b72c <__mcmp+0x18>
 800b744:	e7fb      	b.n	800b73e <__mcmp+0x2a>
 800b746:	2001      	movs	r0, #1
 800b748:	e7f9      	b.n	800b73e <__mcmp+0x2a>
	...

0800b74c <__mdiff>:
 800b74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	4689      	mov	r9, r1
 800b752:	4606      	mov	r6, r0
 800b754:	4611      	mov	r1, r2
 800b756:	4648      	mov	r0, r9
 800b758:	4614      	mov	r4, r2
 800b75a:	f7ff ffdb 	bl	800b714 <__mcmp>
 800b75e:	1e05      	subs	r5, r0, #0
 800b760:	d112      	bne.n	800b788 <__mdiff+0x3c>
 800b762:	4629      	mov	r1, r5
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff fd5b 	bl	800b220 <_Balloc>
 800b76a:	4602      	mov	r2, r0
 800b76c:	b928      	cbnz	r0, 800b77a <__mdiff+0x2e>
 800b76e:	4b3f      	ldr	r3, [pc, #252]	@ (800b86c <__mdiff+0x120>)
 800b770:	f240 2137 	movw	r1, #567	@ 0x237
 800b774:	483e      	ldr	r0, [pc, #248]	@ (800b870 <__mdiff+0x124>)
 800b776:	f000 fb03 	bl	800bd80 <__assert_func>
 800b77a:	2301      	movs	r3, #1
 800b77c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b780:	4610      	mov	r0, r2
 800b782:	b003      	add	sp, #12
 800b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b788:	bfbc      	itt	lt
 800b78a:	464b      	movlt	r3, r9
 800b78c:	46a1      	movlt	r9, r4
 800b78e:	4630      	mov	r0, r6
 800b790:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b794:	bfba      	itte	lt
 800b796:	461c      	movlt	r4, r3
 800b798:	2501      	movlt	r5, #1
 800b79a:	2500      	movge	r5, #0
 800b79c:	f7ff fd40 	bl	800b220 <_Balloc>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	b918      	cbnz	r0, 800b7ac <__mdiff+0x60>
 800b7a4:	4b31      	ldr	r3, [pc, #196]	@ (800b86c <__mdiff+0x120>)
 800b7a6:	f240 2145 	movw	r1, #581	@ 0x245
 800b7aa:	e7e3      	b.n	800b774 <__mdiff+0x28>
 800b7ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b7b0:	6926      	ldr	r6, [r4, #16]
 800b7b2:	60c5      	str	r5, [r0, #12]
 800b7b4:	f109 0310 	add.w	r3, r9, #16
 800b7b8:	f109 0514 	add.w	r5, r9, #20
 800b7bc:	f104 0e14 	add.w	lr, r4, #20
 800b7c0:	f100 0b14 	add.w	fp, r0, #20
 800b7c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b7c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	46d9      	mov	r9, fp
 800b7d0:	f04f 0c00 	mov.w	ip, #0
 800b7d4:	9b01      	ldr	r3, [sp, #4]
 800b7d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b7da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	fa1f f38a 	uxth.w	r3, sl
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	b283      	uxth	r3, r0
 800b7e8:	1acb      	subs	r3, r1, r3
 800b7ea:	0c00      	lsrs	r0, r0, #16
 800b7ec:	4463      	add	r3, ip
 800b7ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b7f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b7fc:	4576      	cmp	r6, lr
 800b7fe:	f849 3b04 	str.w	r3, [r9], #4
 800b802:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b806:	d8e5      	bhi.n	800b7d4 <__mdiff+0x88>
 800b808:	1b33      	subs	r3, r6, r4
 800b80a:	3b15      	subs	r3, #21
 800b80c:	f023 0303 	bic.w	r3, r3, #3
 800b810:	3415      	adds	r4, #21
 800b812:	3304      	adds	r3, #4
 800b814:	42a6      	cmp	r6, r4
 800b816:	bf38      	it	cc
 800b818:	2304      	movcc	r3, #4
 800b81a:	441d      	add	r5, r3
 800b81c:	445b      	add	r3, fp
 800b81e:	461e      	mov	r6, r3
 800b820:	462c      	mov	r4, r5
 800b822:	4544      	cmp	r4, r8
 800b824:	d30e      	bcc.n	800b844 <__mdiff+0xf8>
 800b826:	f108 0103 	add.w	r1, r8, #3
 800b82a:	1b49      	subs	r1, r1, r5
 800b82c:	f021 0103 	bic.w	r1, r1, #3
 800b830:	3d03      	subs	r5, #3
 800b832:	45a8      	cmp	r8, r5
 800b834:	bf38      	it	cc
 800b836:	2100      	movcc	r1, #0
 800b838:	440b      	add	r3, r1
 800b83a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b83e:	b191      	cbz	r1, 800b866 <__mdiff+0x11a>
 800b840:	6117      	str	r7, [r2, #16]
 800b842:	e79d      	b.n	800b780 <__mdiff+0x34>
 800b844:	f854 1b04 	ldr.w	r1, [r4], #4
 800b848:	46e6      	mov	lr, ip
 800b84a:	0c08      	lsrs	r0, r1, #16
 800b84c:	fa1c fc81 	uxtah	ip, ip, r1
 800b850:	4471      	add	r1, lr
 800b852:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b856:	b289      	uxth	r1, r1
 800b858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b85c:	f846 1b04 	str.w	r1, [r6], #4
 800b860:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b864:	e7dd      	b.n	800b822 <__mdiff+0xd6>
 800b866:	3f01      	subs	r7, #1
 800b868:	e7e7      	b.n	800b83a <__mdiff+0xee>
 800b86a:	bf00      	nop
 800b86c:	0800daec 	.word	0x0800daec
 800b870:	0800dafd 	.word	0x0800dafd

0800b874 <__d2b>:
 800b874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b878:	460f      	mov	r7, r1
 800b87a:	2101      	movs	r1, #1
 800b87c:	ec59 8b10 	vmov	r8, r9, d0
 800b880:	4616      	mov	r6, r2
 800b882:	f7ff fccd 	bl	800b220 <_Balloc>
 800b886:	4604      	mov	r4, r0
 800b888:	b930      	cbnz	r0, 800b898 <__d2b+0x24>
 800b88a:	4602      	mov	r2, r0
 800b88c:	4b23      	ldr	r3, [pc, #140]	@ (800b91c <__d2b+0xa8>)
 800b88e:	4824      	ldr	r0, [pc, #144]	@ (800b920 <__d2b+0xac>)
 800b890:	f240 310f 	movw	r1, #783	@ 0x30f
 800b894:	f000 fa74 	bl	800bd80 <__assert_func>
 800b898:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b89c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8a0:	b10d      	cbz	r5, 800b8a6 <__d2b+0x32>
 800b8a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8a6:	9301      	str	r3, [sp, #4]
 800b8a8:	f1b8 0300 	subs.w	r3, r8, #0
 800b8ac:	d023      	beq.n	800b8f6 <__d2b+0x82>
 800b8ae:	4668      	mov	r0, sp
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	f7ff fd7c 	bl	800b3ae <__lo0bits>
 800b8b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8ba:	b1d0      	cbz	r0, 800b8f2 <__d2b+0x7e>
 800b8bc:	f1c0 0320 	rsb	r3, r0, #32
 800b8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	40c2      	lsrs	r2, r0
 800b8c8:	6163      	str	r3, [r4, #20]
 800b8ca:	9201      	str	r2, [sp, #4]
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	61a3      	str	r3, [r4, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bf0c      	ite	eq
 800b8d4:	2201      	moveq	r2, #1
 800b8d6:	2202      	movne	r2, #2
 800b8d8:	6122      	str	r2, [r4, #16]
 800b8da:	b1a5      	cbz	r5, 800b906 <__d2b+0x92>
 800b8dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b8e0:	4405      	add	r5, r0
 800b8e2:	603d      	str	r5, [r7, #0]
 800b8e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b8e8:	6030      	str	r0, [r6, #0]
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	b003      	add	sp, #12
 800b8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8f2:	6161      	str	r1, [r4, #20]
 800b8f4:	e7ea      	b.n	800b8cc <__d2b+0x58>
 800b8f6:	a801      	add	r0, sp, #4
 800b8f8:	f7ff fd59 	bl	800b3ae <__lo0bits>
 800b8fc:	9b01      	ldr	r3, [sp, #4]
 800b8fe:	6163      	str	r3, [r4, #20]
 800b900:	3020      	adds	r0, #32
 800b902:	2201      	movs	r2, #1
 800b904:	e7e8      	b.n	800b8d8 <__d2b+0x64>
 800b906:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b90a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b90e:	6038      	str	r0, [r7, #0]
 800b910:	6918      	ldr	r0, [r3, #16]
 800b912:	f7ff fd2d 	bl	800b370 <__hi0bits>
 800b916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b91a:	e7e5      	b.n	800b8e8 <__d2b+0x74>
 800b91c:	0800daec 	.word	0x0800daec
 800b920:	0800dafd 	.word	0x0800dafd

0800b924 <__ssputs_r>:
 800b924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b928:	688e      	ldr	r6, [r1, #8]
 800b92a:	461f      	mov	r7, r3
 800b92c:	42be      	cmp	r6, r7
 800b92e:	680b      	ldr	r3, [r1, #0]
 800b930:	4682      	mov	sl, r0
 800b932:	460c      	mov	r4, r1
 800b934:	4690      	mov	r8, r2
 800b936:	d82d      	bhi.n	800b994 <__ssputs_r+0x70>
 800b938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b93c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b940:	d026      	beq.n	800b990 <__ssputs_r+0x6c>
 800b942:	6965      	ldr	r5, [r4, #20]
 800b944:	6909      	ldr	r1, [r1, #16]
 800b946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b94a:	eba3 0901 	sub.w	r9, r3, r1
 800b94e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b952:	1c7b      	adds	r3, r7, #1
 800b954:	444b      	add	r3, r9
 800b956:	106d      	asrs	r5, r5, #1
 800b958:	429d      	cmp	r5, r3
 800b95a:	bf38      	it	cc
 800b95c:	461d      	movcc	r5, r3
 800b95e:	0553      	lsls	r3, r2, #21
 800b960:	d527      	bpl.n	800b9b2 <__ssputs_r+0x8e>
 800b962:	4629      	mov	r1, r5
 800b964:	f7ff fbd0 	bl	800b108 <_malloc_r>
 800b968:	4606      	mov	r6, r0
 800b96a:	b360      	cbz	r0, 800b9c6 <__ssputs_r+0xa2>
 800b96c:	6921      	ldr	r1, [r4, #16]
 800b96e:	464a      	mov	r2, r9
 800b970:	f7fe fcf9 	bl	800a366 <memcpy>
 800b974:	89a3      	ldrh	r3, [r4, #12]
 800b976:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b97a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b97e:	81a3      	strh	r3, [r4, #12]
 800b980:	6126      	str	r6, [r4, #16]
 800b982:	6165      	str	r5, [r4, #20]
 800b984:	444e      	add	r6, r9
 800b986:	eba5 0509 	sub.w	r5, r5, r9
 800b98a:	6026      	str	r6, [r4, #0]
 800b98c:	60a5      	str	r5, [r4, #8]
 800b98e:	463e      	mov	r6, r7
 800b990:	42be      	cmp	r6, r7
 800b992:	d900      	bls.n	800b996 <__ssputs_r+0x72>
 800b994:	463e      	mov	r6, r7
 800b996:	6820      	ldr	r0, [r4, #0]
 800b998:	4632      	mov	r2, r6
 800b99a:	4641      	mov	r1, r8
 800b99c:	f000 f9c6 	bl	800bd2c <memmove>
 800b9a0:	68a3      	ldr	r3, [r4, #8]
 800b9a2:	1b9b      	subs	r3, r3, r6
 800b9a4:	60a3      	str	r3, [r4, #8]
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	4433      	add	r3, r6
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	f000 fa28 	bl	800be08 <_realloc_r>
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d1e0      	bne.n	800b980 <__ssputs_r+0x5c>
 800b9be:	6921      	ldr	r1, [r4, #16]
 800b9c0:	4650      	mov	r0, sl
 800b9c2:	f7ff fb2d 	bl	800b020 <_free_r>
 800b9c6:	230c      	movs	r3, #12
 800b9c8:	f8ca 3000 	str.w	r3, [sl]
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d8:	e7e9      	b.n	800b9ae <__ssputs_r+0x8a>
	...

0800b9dc <_svfiprintf_r>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	4698      	mov	r8, r3
 800b9e2:	898b      	ldrh	r3, [r1, #12]
 800b9e4:	061b      	lsls	r3, r3, #24
 800b9e6:	b09d      	sub	sp, #116	@ 0x74
 800b9e8:	4607      	mov	r7, r0
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	d510      	bpl.n	800ba12 <_svfiprintf_r+0x36>
 800b9f0:	690b      	ldr	r3, [r1, #16]
 800b9f2:	b973      	cbnz	r3, 800ba12 <_svfiprintf_r+0x36>
 800b9f4:	2140      	movs	r1, #64	@ 0x40
 800b9f6:	f7ff fb87 	bl	800b108 <_malloc_r>
 800b9fa:	6028      	str	r0, [r5, #0]
 800b9fc:	6128      	str	r0, [r5, #16]
 800b9fe:	b930      	cbnz	r0, 800ba0e <_svfiprintf_r+0x32>
 800ba00:	230c      	movs	r3, #12
 800ba02:	603b      	str	r3, [r7, #0]
 800ba04:	f04f 30ff 	mov.w	r0, #4294967295
 800ba08:	b01d      	add	sp, #116	@ 0x74
 800ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0e:	2340      	movs	r3, #64	@ 0x40
 800ba10:	616b      	str	r3, [r5, #20]
 800ba12:	2300      	movs	r3, #0
 800ba14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba16:	2320      	movs	r3, #32
 800ba18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba20:	2330      	movs	r3, #48	@ 0x30
 800ba22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bbc0 <_svfiprintf_r+0x1e4>
 800ba26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba2a:	f04f 0901 	mov.w	r9, #1
 800ba2e:	4623      	mov	r3, r4
 800ba30:	469a      	mov	sl, r3
 800ba32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba36:	b10a      	cbz	r2, 800ba3c <_svfiprintf_r+0x60>
 800ba38:	2a25      	cmp	r2, #37	@ 0x25
 800ba3a:	d1f9      	bne.n	800ba30 <_svfiprintf_r+0x54>
 800ba3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba40:	d00b      	beq.n	800ba5a <_svfiprintf_r+0x7e>
 800ba42:	465b      	mov	r3, fp
 800ba44:	4622      	mov	r2, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	4638      	mov	r0, r7
 800ba4a:	f7ff ff6b 	bl	800b924 <__ssputs_r>
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f000 80a7 	beq.w	800bba2 <_svfiprintf_r+0x1c6>
 800ba54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba56:	445a      	add	r2, fp
 800ba58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 809f 	beq.w	800bba2 <_svfiprintf_r+0x1c6>
 800ba64:	2300      	movs	r3, #0
 800ba66:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba6e:	f10a 0a01 	add.w	sl, sl, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	9307      	str	r3, [sp, #28]
 800ba76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba7c:	4654      	mov	r4, sl
 800ba7e:	2205      	movs	r2, #5
 800ba80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba84:	484e      	ldr	r0, [pc, #312]	@ (800bbc0 <_svfiprintf_r+0x1e4>)
 800ba86:	f7f4 fba3 	bl	80001d0 <memchr>
 800ba8a:	9a04      	ldr	r2, [sp, #16]
 800ba8c:	b9d8      	cbnz	r0, 800bac6 <_svfiprintf_r+0xea>
 800ba8e:	06d0      	lsls	r0, r2, #27
 800ba90:	bf44      	itt	mi
 800ba92:	2320      	movmi	r3, #32
 800ba94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba98:	0711      	lsls	r1, r2, #28
 800ba9a:	bf44      	itt	mi
 800ba9c:	232b      	movmi	r3, #43	@ 0x2b
 800ba9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baa2:	f89a 3000 	ldrb.w	r3, [sl]
 800baa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800baa8:	d015      	beq.n	800bad6 <_svfiprintf_r+0xfa>
 800baaa:	9a07      	ldr	r2, [sp, #28]
 800baac:	4654      	mov	r4, sl
 800baae:	2000      	movs	r0, #0
 800bab0:	f04f 0c0a 	mov.w	ip, #10
 800bab4:	4621      	mov	r1, r4
 800bab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baba:	3b30      	subs	r3, #48	@ 0x30
 800babc:	2b09      	cmp	r3, #9
 800babe:	d94b      	bls.n	800bb58 <_svfiprintf_r+0x17c>
 800bac0:	b1b0      	cbz	r0, 800baf0 <_svfiprintf_r+0x114>
 800bac2:	9207      	str	r2, [sp, #28]
 800bac4:	e014      	b.n	800baf0 <_svfiprintf_r+0x114>
 800bac6:	eba0 0308 	sub.w	r3, r0, r8
 800baca:	fa09 f303 	lsl.w	r3, r9, r3
 800bace:	4313      	orrs	r3, r2
 800bad0:	9304      	str	r3, [sp, #16]
 800bad2:	46a2      	mov	sl, r4
 800bad4:	e7d2      	b.n	800ba7c <_svfiprintf_r+0xa0>
 800bad6:	9b03      	ldr	r3, [sp, #12]
 800bad8:	1d19      	adds	r1, r3, #4
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	9103      	str	r1, [sp, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	bfbb      	ittet	lt
 800bae2:	425b      	neglt	r3, r3
 800bae4:	f042 0202 	orrlt.w	r2, r2, #2
 800bae8:	9307      	strge	r3, [sp, #28]
 800baea:	9307      	strlt	r3, [sp, #28]
 800baec:	bfb8      	it	lt
 800baee:	9204      	strlt	r2, [sp, #16]
 800baf0:	7823      	ldrb	r3, [r4, #0]
 800baf2:	2b2e      	cmp	r3, #46	@ 0x2e
 800baf4:	d10a      	bne.n	800bb0c <_svfiprintf_r+0x130>
 800baf6:	7863      	ldrb	r3, [r4, #1]
 800baf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bafa:	d132      	bne.n	800bb62 <_svfiprintf_r+0x186>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	1d1a      	adds	r2, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	9203      	str	r2, [sp, #12]
 800bb04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb08:	3402      	adds	r4, #2
 800bb0a:	9305      	str	r3, [sp, #20]
 800bb0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bbd0 <_svfiprintf_r+0x1f4>
 800bb10:	7821      	ldrb	r1, [r4, #0]
 800bb12:	2203      	movs	r2, #3
 800bb14:	4650      	mov	r0, sl
 800bb16:	f7f4 fb5b 	bl	80001d0 <memchr>
 800bb1a:	b138      	cbz	r0, 800bb2c <_svfiprintf_r+0x150>
 800bb1c:	9b04      	ldr	r3, [sp, #16]
 800bb1e:	eba0 000a 	sub.w	r0, r0, sl
 800bb22:	2240      	movs	r2, #64	@ 0x40
 800bb24:	4082      	lsls	r2, r0
 800bb26:	4313      	orrs	r3, r2
 800bb28:	3401      	adds	r4, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb30:	4824      	ldr	r0, [pc, #144]	@ (800bbc4 <_svfiprintf_r+0x1e8>)
 800bb32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb36:	2206      	movs	r2, #6
 800bb38:	f7f4 fb4a 	bl	80001d0 <memchr>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d036      	beq.n	800bbae <_svfiprintf_r+0x1d2>
 800bb40:	4b21      	ldr	r3, [pc, #132]	@ (800bbc8 <_svfiprintf_r+0x1ec>)
 800bb42:	bb1b      	cbnz	r3, 800bb8c <_svfiprintf_r+0x1b0>
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	3307      	adds	r3, #7
 800bb48:	f023 0307 	bic.w	r3, r3, #7
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	9303      	str	r3, [sp, #12]
 800bb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb52:	4433      	add	r3, r6
 800bb54:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb56:	e76a      	b.n	800ba2e <_svfiprintf_r+0x52>
 800bb58:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	2001      	movs	r0, #1
 800bb60:	e7a8      	b.n	800bab4 <_svfiprintf_r+0xd8>
 800bb62:	2300      	movs	r3, #0
 800bb64:	3401      	adds	r4, #1
 800bb66:	9305      	str	r3, [sp, #20]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	f04f 0c0a 	mov.w	ip, #10
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb74:	3a30      	subs	r2, #48	@ 0x30
 800bb76:	2a09      	cmp	r2, #9
 800bb78:	d903      	bls.n	800bb82 <_svfiprintf_r+0x1a6>
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0c6      	beq.n	800bb0c <_svfiprintf_r+0x130>
 800bb7e:	9105      	str	r1, [sp, #20]
 800bb80:	e7c4      	b.n	800bb0c <_svfiprintf_r+0x130>
 800bb82:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb86:	4604      	mov	r4, r0
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e7f0      	b.n	800bb6e <_svfiprintf_r+0x192>
 800bb8c:	ab03      	add	r3, sp, #12
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	462a      	mov	r2, r5
 800bb92:	4b0e      	ldr	r3, [pc, #56]	@ (800bbcc <_svfiprintf_r+0x1f0>)
 800bb94:	a904      	add	r1, sp, #16
 800bb96:	4638      	mov	r0, r7
 800bb98:	f7fd fe62 	bl	8009860 <_printf_float>
 800bb9c:	1c42      	adds	r2, r0, #1
 800bb9e:	4606      	mov	r6, r0
 800bba0:	d1d6      	bne.n	800bb50 <_svfiprintf_r+0x174>
 800bba2:	89ab      	ldrh	r3, [r5, #12]
 800bba4:	065b      	lsls	r3, r3, #25
 800bba6:	f53f af2d 	bmi.w	800ba04 <_svfiprintf_r+0x28>
 800bbaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbac:	e72c      	b.n	800ba08 <_svfiprintf_r+0x2c>
 800bbae:	ab03      	add	r3, sp, #12
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4b05      	ldr	r3, [pc, #20]	@ (800bbcc <_svfiprintf_r+0x1f0>)
 800bbb6:	a904      	add	r1, sp, #16
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f7fe f8e9 	bl	8009d90 <_printf_i>
 800bbbe:	e7ed      	b.n	800bb9c <_svfiprintf_r+0x1c0>
 800bbc0:	0800dc58 	.word	0x0800dc58
 800bbc4:	0800dc62 	.word	0x0800dc62
 800bbc8:	08009861 	.word	0x08009861
 800bbcc:	0800b925 	.word	0x0800b925
 800bbd0:	0800dc5e 	.word	0x0800dc5e

0800bbd4 <__sflush_r>:
 800bbd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	0716      	lsls	r6, r2, #28
 800bbde:	4605      	mov	r5, r0
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	d454      	bmi.n	800bc8e <__sflush_r+0xba>
 800bbe4:	684b      	ldr	r3, [r1, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	dc02      	bgt.n	800bbf0 <__sflush_r+0x1c>
 800bbea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dd48      	ble.n	800bc82 <__sflush_r+0xae>
 800bbf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	d045      	beq.n	800bc82 <__sflush_r+0xae>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bbfc:	682f      	ldr	r7, [r5, #0]
 800bbfe:	6a21      	ldr	r1, [r4, #32]
 800bc00:	602b      	str	r3, [r5, #0]
 800bc02:	d030      	beq.n	800bc66 <__sflush_r+0x92>
 800bc04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	0759      	lsls	r1, r3, #29
 800bc0a:	d505      	bpl.n	800bc18 <__sflush_r+0x44>
 800bc0c:	6863      	ldr	r3, [r4, #4]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc12:	b10b      	cbz	r3, 800bc18 <__sflush_r+0x44>
 800bc14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc16:	1ad2      	subs	r2, r2, r3
 800bc18:	2300      	movs	r3, #0
 800bc1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc1c:	6a21      	ldr	r1, [r4, #32]
 800bc1e:	4628      	mov	r0, r5
 800bc20:	47b0      	blx	r6
 800bc22:	1c43      	adds	r3, r0, #1
 800bc24:	89a3      	ldrh	r3, [r4, #12]
 800bc26:	d106      	bne.n	800bc36 <__sflush_r+0x62>
 800bc28:	6829      	ldr	r1, [r5, #0]
 800bc2a:	291d      	cmp	r1, #29
 800bc2c:	d82b      	bhi.n	800bc86 <__sflush_r+0xb2>
 800bc2e:	4a2a      	ldr	r2, [pc, #168]	@ (800bcd8 <__sflush_r+0x104>)
 800bc30:	410a      	asrs	r2, r1
 800bc32:	07d6      	lsls	r6, r2, #31
 800bc34:	d427      	bmi.n	800bc86 <__sflush_r+0xb2>
 800bc36:	2200      	movs	r2, #0
 800bc38:	6062      	str	r2, [r4, #4]
 800bc3a:	04d9      	lsls	r1, r3, #19
 800bc3c:	6922      	ldr	r2, [r4, #16]
 800bc3e:	6022      	str	r2, [r4, #0]
 800bc40:	d504      	bpl.n	800bc4c <__sflush_r+0x78>
 800bc42:	1c42      	adds	r2, r0, #1
 800bc44:	d101      	bne.n	800bc4a <__sflush_r+0x76>
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	b903      	cbnz	r3, 800bc4c <__sflush_r+0x78>
 800bc4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc4e:	602f      	str	r7, [r5, #0]
 800bc50:	b1b9      	cbz	r1, 800bc82 <__sflush_r+0xae>
 800bc52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc56:	4299      	cmp	r1, r3
 800bc58:	d002      	beq.n	800bc60 <__sflush_r+0x8c>
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f7ff f9e0 	bl	800b020 <_free_r>
 800bc60:	2300      	movs	r3, #0
 800bc62:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc64:	e00d      	b.n	800bc82 <__sflush_r+0xae>
 800bc66:	2301      	movs	r3, #1
 800bc68:	4628      	mov	r0, r5
 800bc6a:	47b0      	blx	r6
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	1c50      	adds	r0, r2, #1
 800bc70:	d1c9      	bne.n	800bc06 <__sflush_r+0x32>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0c6      	beq.n	800bc06 <__sflush_r+0x32>
 800bc78:	2b1d      	cmp	r3, #29
 800bc7a:	d001      	beq.n	800bc80 <__sflush_r+0xac>
 800bc7c:	2b16      	cmp	r3, #22
 800bc7e:	d11e      	bne.n	800bcbe <__sflush_r+0xea>
 800bc80:	602f      	str	r7, [r5, #0]
 800bc82:	2000      	movs	r0, #0
 800bc84:	e022      	b.n	800bccc <__sflush_r+0xf8>
 800bc86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc8a:	b21b      	sxth	r3, r3
 800bc8c:	e01b      	b.n	800bcc6 <__sflush_r+0xf2>
 800bc8e:	690f      	ldr	r7, [r1, #16]
 800bc90:	2f00      	cmp	r7, #0
 800bc92:	d0f6      	beq.n	800bc82 <__sflush_r+0xae>
 800bc94:	0793      	lsls	r3, r2, #30
 800bc96:	680e      	ldr	r6, [r1, #0]
 800bc98:	bf08      	it	eq
 800bc9a:	694b      	ldreq	r3, [r1, #20]
 800bc9c:	600f      	str	r7, [r1, #0]
 800bc9e:	bf18      	it	ne
 800bca0:	2300      	movne	r3, #0
 800bca2:	eba6 0807 	sub.w	r8, r6, r7
 800bca6:	608b      	str	r3, [r1, #8]
 800bca8:	f1b8 0f00 	cmp.w	r8, #0
 800bcac:	dde9      	ble.n	800bc82 <__sflush_r+0xae>
 800bcae:	6a21      	ldr	r1, [r4, #32]
 800bcb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bcb2:	4643      	mov	r3, r8
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	47b0      	blx	r6
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	dc08      	bgt.n	800bcd0 <__sflush_r+0xfc>
 800bcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcc6:	81a3      	strh	r3, [r4, #12]
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd0:	4407      	add	r7, r0
 800bcd2:	eba8 0800 	sub.w	r8, r8, r0
 800bcd6:	e7e7      	b.n	800bca8 <__sflush_r+0xd4>
 800bcd8:	dfbffffe 	.word	0xdfbffffe

0800bcdc <_fflush_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	690b      	ldr	r3, [r1, #16]
 800bce0:	4605      	mov	r5, r0
 800bce2:	460c      	mov	r4, r1
 800bce4:	b913      	cbnz	r3, 800bcec <_fflush_r+0x10>
 800bce6:	2500      	movs	r5, #0
 800bce8:	4628      	mov	r0, r5
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	b118      	cbz	r0, 800bcf6 <_fflush_r+0x1a>
 800bcee:	6a03      	ldr	r3, [r0, #32]
 800bcf0:	b90b      	cbnz	r3, 800bcf6 <_fflush_r+0x1a>
 800bcf2:	f7fe f9f9 	bl	800a0e8 <__sinit>
 800bcf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d0f3      	beq.n	800bce6 <_fflush_r+0xa>
 800bcfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd00:	07d0      	lsls	r0, r2, #31
 800bd02:	d404      	bmi.n	800bd0e <_fflush_r+0x32>
 800bd04:	0599      	lsls	r1, r3, #22
 800bd06:	d402      	bmi.n	800bd0e <_fflush_r+0x32>
 800bd08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd0a:	f7fe fb2a 	bl	800a362 <__retarget_lock_acquire_recursive>
 800bd0e:	4628      	mov	r0, r5
 800bd10:	4621      	mov	r1, r4
 800bd12:	f7ff ff5f 	bl	800bbd4 <__sflush_r>
 800bd16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd18:	07da      	lsls	r2, r3, #31
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	d4e4      	bmi.n	800bce8 <_fflush_r+0xc>
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	059b      	lsls	r3, r3, #22
 800bd22:	d4e1      	bmi.n	800bce8 <_fflush_r+0xc>
 800bd24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd26:	f7fe fb1d 	bl	800a364 <__retarget_lock_release_recursive>
 800bd2a:	e7dd      	b.n	800bce8 <_fflush_r+0xc>

0800bd2c <memmove>:
 800bd2c:	4288      	cmp	r0, r1
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	eb01 0402 	add.w	r4, r1, r2
 800bd34:	d902      	bls.n	800bd3c <memmove+0x10>
 800bd36:	4284      	cmp	r4, r0
 800bd38:	4623      	mov	r3, r4
 800bd3a:	d807      	bhi.n	800bd4c <memmove+0x20>
 800bd3c:	1e43      	subs	r3, r0, #1
 800bd3e:	42a1      	cmp	r1, r4
 800bd40:	d008      	beq.n	800bd54 <memmove+0x28>
 800bd42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd4a:	e7f8      	b.n	800bd3e <memmove+0x12>
 800bd4c:	4402      	add	r2, r0
 800bd4e:	4601      	mov	r1, r0
 800bd50:	428a      	cmp	r2, r1
 800bd52:	d100      	bne.n	800bd56 <memmove+0x2a>
 800bd54:	bd10      	pop	{r4, pc}
 800bd56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd5e:	e7f7      	b.n	800bd50 <memmove+0x24>

0800bd60 <_sbrk_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	@ (800bd7c <_sbrk_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f6 f9b6 	bl	80020dc <_sbrk>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_sbrk_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_sbrk_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	200021c8 	.word	0x200021c8

0800bd80 <__assert_func>:
 800bd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd82:	4614      	mov	r4, r2
 800bd84:	461a      	mov	r2, r3
 800bd86:	4b09      	ldr	r3, [pc, #36]	@ (800bdac <__assert_func+0x2c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	68d8      	ldr	r0, [r3, #12]
 800bd8e:	b954      	cbnz	r4, 800bda6 <__assert_func+0x26>
 800bd90:	4b07      	ldr	r3, [pc, #28]	@ (800bdb0 <__assert_func+0x30>)
 800bd92:	461c      	mov	r4, r3
 800bd94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd98:	9100      	str	r1, [sp, #0]
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	4905      	ldr	r1, [pc, #20]	@ (800bdb4 <__assert_func+0x34>)
 800bd9e:	f000 f86f 	bl	800be80 <fiprintf>
 800bda2:	f000 f87f 	bl	800bea4 <abort>
 800bda6:	4b04      	ldr	r3, [pc, #16]	@ (800bdb8 <__assert_func+0x38>)
 800bda8:	e7f4      	b.n	800bd94 <__assert_func+0x14>
 800bdaa:	bf00      	nop
 800bdac:	20000120 	.word	0x20000120
 800bdb0:	0800dcae 	.word	0x0800dcae
 800bdb4:	0800dc80 	.word	0x0800dc80
 800bdb8:	0800dc73 	.word	0x0800dc73

0800bdbc <_calloc_r>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	fba1 5402 	umull	r5, r4, r1, r2
 800bdc2:	b93c      	cbnz	r4, 800bdd4 <_calloc_r+0x18>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7ff f99f 	bl	800b108 <_malloc_r>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	b928      	cbnz	r0, 800bdda <_calloc_r+0x1e>
 800bdce:	2600      	movs	r6, #0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	220c      	movs	r2, #12
 800bdd6:	6002      	str	r2, [r0, #0]
 800bdd8:	e7f9      	b.n	800bdce <_calloc_r+0x12>
 800bdda:	462a      	mov	r2, r5
 800bddc:	4621      	mov	r1, r4
 800bdde:	f7fe fa30 	bl	800a242 <memset>
 800bde2:	e7f5      	b.n	800bdd0 <_calloc_r+0x14>

0800bde4 <__ascii_mbtowc>:
 800bde4:	b082      	sub	sp, #8
 800bde6:	b901      	cbnz	r1, 800bdea <__ascii_mbtowc+0x6>
 800bde8:	a901      	add	r1, sp, #4
 800bdea:	b142      	cbz	r2, 800bdfe <__ascii_mbtowc+0x1a>
 800bdec:	b14b      	cbz	r3, 800be02 <__ascii_mbtowc+0x1e>
 800bdee:	7813      	ldrb	r3, [r2, #0]
 800bdf0:	600b      	str	r3, [r1, #0]
 800bdf2:	7812      	ldrb	r2, [r2, #0]
 800bdf4:	1e10      	subs	r0, r2, #0
 800bdf6:	bf18      	it	ne
 800bdf8:	2001      	movne	r0, #1
 800bdfa:	b002      	add	sp, #8
 800bdfc:	4770      	bx	lr
 800bdfe:	4610      	mov	r0, r2
 800be00:	e7fb      	b.n	800bdfa <__ascii_mbtowc+0x16>
 800be02:	f06f 0001 	mvn.w	r0, #1
 800be06:	e7f8      	b.n	800bdfa <__ascii_mbtowc+0x16>

0800be08 <_realloc_r>:
 800be08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0c:	4680      	mov	r8, r0
 800be0e:	4615      	mov	r5, r2
 800be10:	460c      	mov	r4, r1
 800be12:	b921      	cbnz	r1, 800be1e <_realloc_r+0x16>
 800be14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be18:	4611      	mov	r1, r2
 800be1a:	f7ff b975 	b.w	800b108 <_malloc_r>
 800be1e:	b92a      	cbnz	r2, 800be2c <_realloc_r+0x24>
 800be20:	f7ff f8fe 	bl	800b020 <_free_r>
 800be24:	2400      	movs	r4, #0
 800be26:	4620      	mov	r0, r4
 800be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2c:	f000 f841 	bl	800beb2 <_malloc_usable_size_r>
 800be30:	4285      	cmp	r5, r0
 800be32:	4606      	mov	r6, r0
 800be34:	d802      	bhi.n	800be3c <_realloc_r+0x34>
 800be36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800be3a:	d8f4      	bhi.n	800be26 <_realloc_r+0x1e>
 800be3c:	4629      	mov	r1, r5
 800be3e:	4640      	mov	r0, r8
 800be40:	f7ff f962 	bl	800b108 <_malloc_r>
 800be44:	4607      	mov	r7, r0
 800be46:	2800      	cmp	r0, #0
 800be48:	d0ec      	beq.n	800be24 <_realloc_r+0x1c>
 800be4a:	42b5      	cmp	r5, r6
 800be4c:	462a      	mov	r2, r5
 800be4e:	4621      	mov	r1, r4
 800be50:	bf28      	it	cs
 800be52:	4632      	movcs	r2, r6
 800be54:	f7fe fa87 	bl	800a366 <memcpy>
 800be58:	4621      	mov	r1, r4
 800be5a:	4640      	mov	r0, r8
 800be5c:	f7ff f8e0 	bl	800b020 <_free_r>
 800be60:	463c      	mov	r4, r7
 800be62:	e7e0      	b.n	800be26 <_realloc_r+0x1e>

0800be64 <__ascii_wctomb>:
 800be64:	4603      	mov	r3, r0
 800be66:	4608      	mov	r0, r1
 800be68:	b141      	cbz	r1, 800be7c <__ascii_wctomb+0x18>
 800be6a:	2aff      	cmp	r2, #255	@ 0xff
 800be6c:	d904      	bls.n	800be78 <__ascii_wctomb+0x14>
 800be6e:	228a      	movs	r2, #138	@ 0x8a
 800be70:	601a      	str	r2, [r3, #0]
 800be72:	f04f 30ff 	mov.w	r0, #4294967295
 800be76:	4770      	bx	lr
 800be78:	700a      	strb	r2, [r1, #0]
 800be7a:	2001      	movs	r0, #1
 800be7c:	4770      	bx	lr
	...

0800be80 <fiprintf>:
 800be80:	b40e      	push	{r1, r2, r3}
 800be82:	b503      	push	{r0, r1, lr}
 800be84:	4601      	mov	r1, r0
 800be86:	ab03      	add	r3, sp, #12
 800be88:	4805      	ldr	r0, [pc, #20]	@ (800bea0 <fiprintf+0x20>)
 800be8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8e:	6800      	ldr	r0, [r0, #0]
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	f000 f83f 	bl	800bf14 <_vfiprintf_r>
 800be96:	b002      	add	sp, #8
 800be98:	f85d eb04 	ldr.w	lr, [sp], #4
 800be9c:	b003      	add	sp, #12
 800be9e:	4770      	bx	lr
 800bea0:	20000120 	.word	0x20000120

0800bea4 <abort>:
 800bea4:	b508      	push	{r3, lr}
 800bea6:	2006      	movs	r0, #6
 800bea8:	f000 fa08 	bl	800c2bc <raise>
 800beac:	2001      	movs	r0, #1
 800beae:	f7f6 f89d 	bl	8001fec <_exit>

0800beb2 <_malloc_usable_size_r>:
 800beb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beb6:	1f18      	subs	r0, r3, #4
 800beb8:	2b00      	cmp	r3, #0
 800beba:	bfbc      	itt	lt
 800bebc:	580b      	ldrlt	r3, [r1, r0]
 800bebe:	18c0      	addlt	r0, r0, r3
 800bec0:	4770      	bx	lr

0800bec2 <__sfputc_r>:
 800bec2:	6893      	ldr	r3, [r2, #8]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	b410      	push	{r4}
 800beca:	6093      	str	r3, [r2, #8]
 800becc:	da08      	bge.n	800bee0 <__sfputc_r+0x1e>
 800bece:	6994      	ldr	r4, [r2, #24]
 800bed0:	42a3      	cmp	r3, r4
 800bed2:	db01      	blt.n	800bed8 <__sfputc_r+0x16>
 800bed4:	290a      	cmp	r1, #10
 800bed6:	d103      	bne.n	800bee0 <__sfputc_r+0x1e>
 800bed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bedc:	f000 b932 	b.w	800c144 <__swbuf_r>
 800bee0:	6813      	ldr	r3, [r2, #0]
 800bee2:	1c58      	adds	r0, r3, #1
 800bee4:	6010      	str	r0, [r2, #0]
 800bee6:	7019      	strb	r1, [r3, #0]
 800bee8:	4608      	mov	r0, r1
 800beea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <__sfputs_r>:
 800bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef2:	4606      	mov	r6, r0
 800bef4:	460f      	mov	r7, r1
 800bef6:	4614      	mov	r4, r2
 800bef8:	18d5      	adds	r5, r2, r3
 800befa:	42ac      	cmp	r4, r5
 800befc:	d101      	bne.n	800bf02 <__sfputs_r+0x12>
 800befe:	2000      	movs	r0, #0
 800bf00:	e007      	b.n	800bf12 <__sfputs_r+0x22>
 800bf02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf06:	463a      	mov	r2, r7
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7ff ffda 	bl	800bec2 <__sfputc_r>
 800bf0e:	1c43      	adds	r3, r0, #1
 800bf10:	d1f3      	bne.n	800befa <__sfputs_r+0xa>
 800bf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf14 <_vfiprintf_r>:
 800bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	460d      	mov	r5, r1
 800bf1a:	b09d      	sub	sp, #116	@ 0x74
 800bf1c:	4614      	mov	r4, r2
 800bf1e:	4698      	mov	r8, r3
 800bf20:	4606      	mov	r6, r0
 800bf22:	b118      	cbz	r0, 800bf2c <_vfiprintf_r+0x18>
 800bf24:	6a03      	ldr	r3, [r0, #32]
 800bf26:	b90b      	cbnz	r3, 800bf2c <_vfiprintf_r+0x18>
 800bf28:	f7fe f8de 	bl	800a0e8 <__sinit>
 800bf2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf2e:	07d9      	lsls	r1, r3, #31
 800bf30:	d405      	bmi.n	800bf3e <_vfiprintf_r+0x2a>
 800bf32:	89ab      	ldrh	r3, [r5, #12]
 800bf34:	059a      	lsls	r2, r3, #22
 800bf36:	d402      	bmi.n	800bf3e <_vfiprintf_r+0x2a>
 800bf38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf3a:	f7fe fa12 	bl	800a362 <__retarget_lock_acquire_recursive>
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	071b      	lsls	r3, r3, #28
 800bf42:	d501      	bpl.n	800bf48 <_vfiprintf_r+0x34>
 800bf44:	692b      	ldr	r3, [r5, #16]
 800bf46:	b99b      	cbnz	r3, 800bf70 <_vfiprintf_r+0x5c>
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f000 f938 	bl	800c1c0 <__swsetup_r>
 800bf50:	b170      	cbz	r0, 800bf70 <_vfiprintf_r+0x5c>
 800bf52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf54:	07dc      	lsls	r4, r3, #31
 800bf56:	d504      	bpl.n	800bf62 <_vfiprintf_r+0x4e>
 800bf58:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5c:	b01d      	add	sp, #116	@ 0x74
 800bf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	0598      	lsls	r0, r3, #22
 800bf66:	d4f7      	bmi.n	800bf58 <_vfiprintf_r+0x44>
 800bf68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf6a:	f7fe f9fb 	bl	800a364 <__retarget_lock_release_recursive>
 800bf6e:	e7f3      	b.n	800bf58 <_vfiprintf_r+0x44>
 800bf70:	2300      	movs	r3, #0
 800bf72:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf74:	2320      	movs	r3, #32
 800bf76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf7e:	2330      	movs	r3, #48	@ 0x30
 800bf80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c130 <_vfiprintf_r+0x21c>
 800bf84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf88:	f04f 0901 	mov.w	r9, #1
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	469a      	mov	sl, r3
 800bf90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf94:	b10a      	cbz	r2, 800bf9a <_vfiprintf_r+0x86>
 800bf96:	2a25      	cmp	r2, #37	@ 0x25
 800bf98:	d1f9      	bne.n	800bf8e <_vfiprintf_r+0x7a>
 800bf9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf9e:	d00b      	beq.n	800bfb8 <_vfiprintf_r+0xa4>
 800bfa0:	465b      	mov	r3, fp
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f7ff ffa2 	bl	800bef0 <__sfputs_r>
 800bfac:	3001      	adds	r0, #1
 800bfae:	f000 80a7 	beq.w	800c100 <_vfiprintf_r+0x1ec>
 800bfb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfb4:	445a      	add	r2, fp
 800bfb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 809f 	beq.w	800c100 <_vfiprintf_r+0x1ec>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfcc:	f10a 0a01 	add.w	sl, sl, #1
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	9307      	str	r3, [sp, #28]
 800bfd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfda:	4654      	mov	r4, sl
 800bfdc:	2205      	movs	r2, #5
 800bfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe2:	4853      	ldr	r0, [pc, #332]	@ (800c130 <_vfiprintf_r+0x21c>)
 800bfe4:	f7f4 f8f4 	bl	80001d0 <memchr>
 800bfe8:	9a04      	ldr	r2, [sp, #16]
 800bfea:	b9d8      	cbnz	r0, 800c024 <_vfiprintf_r+0x110>
 800bfec:	06d1      	lsls	r1, r2, #27
 800bfee:	bf44      	itt	mi
 800bff0:	2320      	movmi	r3, #32
 800bff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bff6:	0713      	lsls	r3, r2, #28
 800bff8:	bf44      	itt	mi
 800bffa:	232b      	movmi	r3, #43	@ 0x2b
 800bffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c000:	f89a 3000 	ldrb.w	r3, [sl]
 800c004:	2b2a      	cmp	r3, #42	@ 0x2a
 800c006:	d015      	beq.n	800c034 <_vfiprintf_r+0x120>
 800c008:	9a07      	ldr	r2, [sp, #28]
 800c00a:	4654      	mov	r4, sl
 800c00c:	2000      	movs	r0, #0
 800c00e:	f04f 0c0a 	mov.w	ip, #10
 800c012:	4621      	mov	r1, r4
 800c014:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c018:	3b30      	subs	r3, #48	@ 0x30
 800c01a:	2b09      	cmp	r3, #9
 800c01c:	d94b      	bls.n	800c0b6 <_vfiprintf_r+0x1a2>
 800c01e:	b1b0      	cbz	r0, 800c04e <_vfiprintf_r+0x13a>
 800c020:	9207      	str	r2, [sp, #28]
 800c022:	e014      	b.n	800c04e <_vfiprintf_r+0x13a>
 800c024:	eba0 0308 	sub.w	r3, r0, r8
 800c028:	fa09 f303 	lsl.w	r3, r9, r3
 800c02c:	4313      	orrs	r3, r2
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	46a2      	mov	sl, r4
 800c032:	e7d2      	b.n	800bfda <_vfiprintf_r+0xc6>
 800c034:	9b03      	ldr	r3, [sp, #12]
 800c036:	1d19      	adds	r1, r3, #4
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	9103      	str	r1, [sp, #12]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	bfbb      	ittet	lt
 800c040:	425b      	neglt	r3, r3
 800c042:	f042 0202 	orrlt.w	r2, r2, #2
 800c046:	9307      	strge	r3, [sp, #28]
 800c048:	9307      	strlt	r3, [sp, #28]
 800c04a:	bfb8      	it	lt
 800c04c:	9204      	strlt	r2, [sp, #16]
 800c04e:	7823      	ldrb	r3, [r4, #0]
 800c050:	2b2e      	cmp	r3, #46	@ 0x2e
 800c052:	d10a      	bne.n	800c06a <_vfiprintf_r+0x156>
 800c054:	7863      	ldrb	r3, [r4, #1]
 800c056:	2b2a      	cmp	r3, #42	@ 0x2a
 800c058:	d132      	bne.n	800c0c0 <_vfiprintf_r+0x1ac>
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	1d1a      	adds	r2, r3, #4
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	9203      	str	r2, [sp, #12]
 800c062:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c066:	3402      	adds	r4, #2
 800c068:	9305      	str	r3, [sp, #20]
 800c06a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c140 <_vfiprintf_r+0x22c>
 800c06e:	7821      	ldrb	r1, [r4, #0]
 800c070:	2203      	movs	r2, #3
 800c072:	4650      	mov	r0, sl
 800c074:	f7f4 f8ac 	bl	80001d0 <memchr>
 800c078:	b138      	cbz	r0, 800c08a <_vfiprintf_r+0x176>
 800c07a:	9b04      	ldr	r3, [sp, #16]
 800c07c:	eba0 000a 	sub.w	r0, r0, sl
 800c080:	2240      	movs	r2, #64	@ 0x40
 800c082:	4082      	lsls	r2, r0
 800c084:	4313      	orrs	r3, r2
 800c086:	3401      	adds	r4, #1
 800c088:	9304      	str	r3, [sp, #16]
 800c08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c08e:	4829      	ldr	r0, [pc, #164]	@ (800c134 <_vfiprintf_r+0x220>)
 800c090:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c094:	2206      	movs	r2, #6
 800c096:	f7f4 f89b 	bl	80001d0 <memchr>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d03f      	beq.n	800c11e <_vfiprintf_r+0x20a>
 800c09e:	4b26      	ldr	r3, [pc, #152]	@ (800c138 <_vfiprintf_r+0x224>)
 800c0a0:	bb1b      	cbnz	r3, 800c0ea <_vfiprintf_r+0x1d6>
 800c0a2:	9b03      	ldr	r3, [sp, #12]
 800c0a4:	3307      	adds	r3, #7
 800c0a6:	f023 0307 	bic.w	r3, r3, #7
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	9303      	str	r3, [sp, #12]
 800c0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b0:	443b      	add	r3, r7
 800c0b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0b4:	e76a      	b.n	800bf8c <_vfiprintf_r+0x78>
 800c0b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	2001      	movs	r0, #1
 800c0be:	e7a8      	b.n	800c012 <_vfiprintf_r+0xfe>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	3401      	adds	r4, #1
 800c0c4:	9305      	str	r3, [sp, #20]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	f04f 0c0a 	mov.w	ip, #10
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0d2:	3a30      	subs	r2, #48	@ 0x30
 800c0d4:	2a09      	cmp	r2, #9
 800c0d6:	d903      	bls.n	800c0e0 <_vfiprintf_r+0x1cc>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0c6      	beq.n	800c06a <_vfiprintf_r+0x156>
 800c0dc:	9105      	str	r1, [sp, #20]
 800c0de:	e7c4      	b.n	800c06a <_vfiprintf_r+0x156>
 800c0e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e7f0      	b.n	800c0cc <_vfiprintf_r+0x1b8>
 800c0ea:	ab03      	add	r3, sp, #12
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	462a      	mov	r2, r5
 800c0f0:	4b12      	ldr	r3, [pc, #72]	@ (800c13c <_vfiprintf_r+0x228>)
 800c0f2:	a904      	add	r1, sp, #16
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f7fd fbb3 	bl	8009860 <_printf_float>
 800c0fa:	4607      	mov	r7, r0
 800c0fc:	1c78      	adds	r0, r7, #1
 800c0fe:	d1d6      	bne.n	800c0ae <_vfiprintf_r+0x19a>
 800c100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c102:	07d9      	lsls	r1, r3, #31
 800c104:	d405      	bmi.n	800c112 <_vfiprintf_r+0x1fe>
 800c106:	89ab      	ldrh	r3, [r5, #12]
 800c108:	059a      	lsls	r2, r3, #22
 800c10a:	d402      	bmi.n	800c112 <_vfiprintf_r+0x1fe>
 800c10c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c10e:	f7fe f929 	bl	800a364 <__retarget_lock_release_recursive>
 800c112:	89ab      	ldrh	r3, [r5, #12]
 800c114:	065b      	lsls	r3, r3, #25
 800c116:	f53f af1f 	bmi.w	800bf58 <_vfiprintf_r+0x44>
 800c11a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c11c:	e71e      	b.n	800bf5c <_vfiprintf_r+0x48>
 800c11e:	ab03      	add	r3, sp, #12
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	462a      	mov	r2, r5
 800c124:	4b05      	ldr	r3, [pc, #20]	@ (800c13c <_vfiprintf_r+0x228>)
 800c126:	a904      	add	r1, sp, #16
 800c128:	4630      	mov	r0, r6
 800c12a:	f7fd fe31 	bl	8009d90 <_printf_i>
 800c12e:	e7e4      	b.n	800c0fa <_vfiprintf_r+0x1e6>
 800c130:	0800dc58 	.word	0x0800dc58
 800c134:	0800dc62 	.word	0x0800dc62
 800c138:	08009861 	.word	0x08009861
 800c13c:	0800bef1 	.word	0x0800bef1
 800c140:	0800dc5e 	.word	0x0800dc5e

0800c144 <__swbuf_r>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	460e      	mov	r6, r1
 800c148:	4614      	mov	r4, r2
 800c14a:	4605      	mov	r5, r0
 800c14c:	b118      	cbz	r0, 800c156 <__swbuf_r+0x12>
 800c14e:	6a03      	ldr	r3, [r0, #32]
 800c150:	b90b      	cbnz	r3, 800c156 <__swbuf_r+0x12>
 800c152:	f7fd ffc9 	bl	800a0e8 <__sinit>
 800c156:	69a3      	ldr	r3, [r4, #24]
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	071a      	lsls	r2, r3, #28
 800c15e:	d501      	bpl.n	800c164 <__swbuf_r+0x20>
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	b943      	cbnz	r3, 800c176 <__swbuf_r+0x32>
 800c164:	4621      	mov	r1, r4
 800c166:	4628      	mov	r0, r5
 800c168:	f000 f82a 	bl	800c1c0 <__swsetup_r>
 800c16c:	b118      	cbz	r0, 800c176 <__swbuf_r+0x32>
 800c16e:	f04f 37ff 	mov.w	r7, #4294967295
 800c172:	4638      	mov	r0, r7
 800c174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	6922      	ldr	r2, [r4, #16]
 800c17a:	1a98      	subs	r0, r3, r2
 800c17c:	6963      	ldr	r3, [r4, #20]
 800c17e:	b2f6      	uxtb	r6, r6
 800c180:	4283      	cmp	r3, r0
 800c182:	4637      	mov	r7, r6
 800c184:	dc05      	bgt.n	800c192 <__swbuf_r+0x4e>
 800c186:	4621      	mov	r1, r4
 800c188:	4628      	mov	r0, r5
 800c18a:	f7ff fda7 	bl	800bcdc <_fflush_r>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d1ed      	bne.n	800c16e <__swbuf_r+0x2a>
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	3b01      	subs	r3, #1
 800c196:	60a3      	str	r3, [r4, #8]
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	6022      	str	r2, [r4, #0]
 800c19e:	701e      	strb	r6, [r3, #0]
 800c1a0:	6962      	ldr	r2, [r4, #20]
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d004      	beq.n	800c1b2 <__swbuf_r+0x6e>
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	07db      	lsls	r3, r3, #31
 800c1ac:	d5e1      	bpl.n	800c172 <__swbuf_r+0x2e>
 800c1ae:	2e0a      	cmp	r6, #10
 800c1b0:	d1df      	bne.n	800c172 <__swbuf_r+0x2e>
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f7ff fd91 	bl	800bcdc <_fflush_r>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d0d9      	beq.n	800c172 <__swbuf_r+0x2e>
 800c1be:	e7d6      	b.n	800c16e <__swbuf_r+0x2a>

0800c1c0 <__swsetup_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4b29      	ldr	r3, [pc, #164]	@ (800c268 <__swsetup_r+0xa8>)
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	6818      	ldr	r0, [r3, #0]
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	b118      	cbz	r0, 800c1d4 <__swsetup_r+0x14>
 800c1cc:	6a03      	ldr	r3, [r0, #32]
 800c1ce:	b90b      	cbnz	r3, 800c1d4 <__swsetup_r+0x14>
 800c1d0:	f7fd ff8a 	bl	800a0e8 <__sinit>
 800c1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d8:	0719      	lsls	r1, r3, #28
 800c1da:	d422      	bmi.n	800c222 <__swsetup_r+0x62>
 800c1dc:	06da      	lsls	r2, r3, #27
 800c1de:	d407      	bmi.n	800c1f0 <__swsetup_r+0x30>
 800c1e0:	2209      	movs	r2, #9
 800c1e2:	602a      	str	r2, [r5, #0]
 800c1e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ee:	e033      	b.n	800c258 <__swsetup_r+0x98>
 800c1f0:	0758      	lsls	r0, r3, #29
 800c1f2:	d512      	bpl.n	800c21a <__swsetup_r+0x5a>
 800c1f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1f6:	b141      	cbz	r1, 800c20a <__swsetup_r+0x4a>
 800c1f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	d002      	beq.n	800c206 <__swsetup_r+0x46>
 800c200:	4628      	mov	r0, r5
 800c202:	f7fe ff0d 	bl	800b020 <_free_r>
 800c206:	2300      	movs	r3, #0
 800c208:	6363      	str	r3, [r4, #52]	@ 0x34
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c210:	81a3      	strh	r3, [r4, #12]
 800c212:	2300      	movs	r3, #0
 800c214:	6063      	str	r3, [r4, #4]
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f043 0308 	orr.w	r3, r3, #8
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	b94b      	cbnz	r3, 800c23a <__swsetup_r+0x7a>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c22c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c230:	d003      	beq.n	800c23a <__swsetup_r+0x7a>
 800c232:	4621      	mov	r1, r4
 800c234:	4628      	mov	r0, r5
 800c236:	f000 f883 	bl	800c340 <__smakebuf_r>
 800c23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23e:	f013 0201 	ands.w	r2, r3, #1
 800c242:	d00a      	beq.n	800c25a <__swsetup_r+0x9a>
 800c244:	2200      	movs	r2, #0
 800c246:	60a2      	str	r2, [r4, #8]
 800c248:	6962      	ldr	r2, [r4, #20]
 800c24a:	4252      	negs	r2, r2
 800c24c:	61a2      	str	r2, [r4, #24]
 800c24e:	6922      	ldr	r2, [r4, #16]
 800c250:	b942      	cbnz	r2, 800c264 <__swsetup_r+0xa4>
 800c252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c256:	d1c5      	bne.n	800c1e4 <__swsetup_r+0x24>
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	0799      	lsls	r1, r3, #30
 800c25c:	bf58      	it	pl
 800c25e:	6962      	ldrpl	r2, [r4, #20]
 800c260:	60a2      	str	r2, [r4, #8]
 800c262:	e7f4      	b.n	800c24e <__swsetup_r+0x8e>
 800c264:	2000      	movs	r0, #0
 800c266:	e7f7      	b.n	800c258 <__swsetup_r+0x98>
 800c268:	20000120 	.word	0x20000120

0800c26c <_raise_r>:
 800c26c:	291f      	cmp	r1, #31
 800c26e:	b538      	push	{r3, r4, r5, lr}
 800c270:	4605      	mov	r5, r0
 800c272:	460c      	mov	r4, r1
 800c274:	d904      	bls.n	800c280 <_raise_r+0x14>
 800c276:	2316      	movs	r3, #22
 800c278:	6003      	str	r3, [r0, #0]
 800c27a:	f04f 30ff 	mov.w	r0, #4294967295
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c282:	b112      	cbz	r2, 800c28a <_raise_r+0x1e>
 800c284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c288:	b94b      	cbnz	r3, 800c29e <_raise_r+0x32>
 800c28a:	4628      	mov	r0, r5
 800c28c:	f000 f830 	bl	800c2f0 <_getpid_r>
 800c290:	4622      	mov	r2, r4
 800c292:	4601      	mov	r1, r0
 800c294:	4628      	mov	r0, r5
 800c296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c29a:	f000 b817 	b.w	800c2cc <_kill_r>
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d00a      	beq.n	800c2b8 <_raise_r+0x4c>
 800c2a2:	1c59      	adds	r1, r3, #1
 800c2a4:	d103      	bne.n	800c2ae <_raise_r+0x42>
 800c2a6:	2316      	movs	r3, #22
 800c2a8:	6003      	str	r3, [r0, #0]
 800c2aa:	2001      	movs	r0, #1
 800c2ac:	e7e7      	b.n	800c27e <_raise_r+0x12>
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4798      	blx	r3
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	e7e0      	b.n	800c27e <_raise_r+0x12>

0800c2bc <raise>:
 800c2bc:	4b02      	ldr	r3, [pc, #8]	@ (800c2c8 <raise+0xc>)
 800c2be:	4601      	mov	r1, r0
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	f7ff bfd3 	b.w	800c26c <_raise_r>
 800c2c6:	bf00      	nop
 800c2c8:	20000120 	.word	0x20000120

0800c2cc <_kill_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	@ (800c2ec <_kill_r+0x20>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	f7f5 fe77 	bl	8001fcc <_kill>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	d102      	bne.n	800c2e8 <_kill_r+0x1c>
 800c2e2:	682b      	ldr	r3, [r5, #0]
 800c2e4:	b103      	cbz	r3, 800c2e8 <_kill_r+0x1c>
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ea:	bf00      	nop
 800c2ec:	200021c8 	.word	0x200021c8

0800c2f0 <_getpid_r>:
 800c2f0:	f7f5 be64 	b.w	8001fbc <_getpid>

0800c2f4 <__swhatbuf_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	b096      	sub	sp, #88	@ 0x58
 800c300:	4615      	mov	r5, r2
 800c302:	461e      	mov	r6, r3
 800c304:	da0d      	bge.n	800c322 <__swhatbuf_r+0x2e>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c30c:	f04f 0100 	mov.w	r1, #0
 800c310:	bf14      	ite	ne
 800c312:	2340      	movne	r3, #64	@ 0x40
 800c314:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c318:	2000      	movs	r0, #0
 800c31a:	6031      	str	r1, [r6, #0]
 800c31c:	602b      	str	r3, [r5, #0]
 800c31e:	b016      	add	sp, #88	@ 0x58
 800c320:	bd70      	pop	{r4, r5, r6, pc}
 800c322:	466a      	mov	r2, sp
 800c324:	f000 f848 	bl	800c3b8 <_fstat_r>
 800c328:	2800      	cmp	r0, #0
 800c32a:	dbec      	blt.n	800c306 <__swhatbuf_r+0x12>
 800c32c:	9901      	ldr	r1, [sp, #4]
 800c32e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c332:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c336:	4259      	negs	r1, r3
 800c338:	4159      	adcs	r1, r3
 800c33a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c33e:	e7eb      	b.n	800c318 <__swhatbuf_r+0x24>

0800c340 <__smakebuf_r>:
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c344:	079d      	lsls	r5, r3, #30
 800c346:	4606      	mov	r6, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	d507      	bpl.n	800c35c <__smakebuf_r+0x1c>
 800c34c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	6123      	str	r3, [r4, #16]
 800c354:	2301      	movs	r3, #1
 800c356:	6163      	str	r3, [r4, #20]
 800c358:	b003      	add	sp, #12
 800c35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35c:	ab01      	add	r3, sp, #4
 800c35e:	466a      	mov	r2, sp
 800c360:	f7ff ffc8 	bl	800c2f4 <__swhatbuf_r>
 800c364:	9f00      	ldr	r7, [sp, #0]
 800c366:	4605      	mov	r5, r0
 800c368:	4639      	mov	r1, r7
 800c36a:	4630      	mov	r0, r6
 800c36c:	f7fe fecc 	bl	800b108 <_malloc_r>
 800c370:	b948      	cbnz	r0, 800c386 <__smakebuf_r+0x46>
 800c372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c376:	059a      	lsls	r2, r3, #22
 800c378:	d4ee      	bmi.n	800c358 <__smakebuf_r+0x18>
 800c37a:	f023 0303 	bic.w	r3, r3, #3
 800c37e:	f043 0302 	orr.w	r3, r3, #2
 800c382:	81a3      	strh	r3, [r4, #12]
 800c384:	e7e2      	b.n	800c34c <__smakebuf_r+0xc>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	6020      	str	r0, [r4, #0]
 800c38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	9b01      	ldr	r3, [sp, #4]
 800c392:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c396:	b15b      	cbz	r3, 800c3b0 <__smakebuf_r+0x70>
 800c398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c39c:	4630      	mov	r0, r6
 800c39e:	f000 f81d 	bl	800c3dc <_isatty_r>
 800c3a2:	b128      	cbz	r0, 800c3b0 <__smakebuf_r+0x70>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f023 0303 	bic.w	r3, r3, #3
 800c3aa:	f043 0301 	orr.w	r3, r3, #1
 800c3ae:	81a3      	strh	r3, [r4, #12]
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	431d      	orrs	r5, r3
 800c3b4:	81a5      	strh	r5, [r4, #12]
 800c3b6:	e7cf      	b.n	800c358 <__smakebuf_r+0x18>

0800c3b8 <_fstat_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d07      	ldr	r5, [pc, #28]	@ (800c3d8 <_fstat_r+0x20>)
 800c3bc:	2300      	movs	r3, #0
 800c3be:	4604      	mov	r4, r0
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	602b      	str	r3, [r5, #0]
 800c3c6:	f7f5 fe61 	bl	800208c <_fstat>
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	d102      	bne.n	800c3d4 <_fstat_r+0x1c>
 800c3ce:	682b      	ldr	r3, [r5, #0]
 800c3d0:	b103      	cbz	r3, 800c3d4 <_fstat_r+0x1c>
 800c3d2:	6023      	str	r3, [r4, #0]
 800c3d4:	bd38      	pop	{r3, r4, r5, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200021c8 	.word	0x200021c8

0800c3dc <_isatty_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4d06      	ldr	r5, [pc, #24]	@ (800c3f8 <_isatty_r+0x1c>)
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	4608      	mov	r0, r1
 800c3e6:	602b      	str	r3, [r5, #0]
 800c3e8:	f7f5 fe60 	bl	80020ac <_isatty>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d102      	bne.n	800c3f6 <_isatty_r+0x1a>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	b103      	cbz	r3, 800c3f6 <_isatty_r+0x1a>
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	200021c8 	.word	0x200021c8

0800c3fc <atan2>:
 800c3fc:	f000 b984 	b.w	800c708 <__ieee754_atan2>

0800c400 <pow>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	ed2d 8b02 	vpush	{d8}
 800c406:	eeb0 8a40 	vmov.f32	s16, s0
 800c40a:	eef0 8a60 	vmov.f32	s17, s1
 800c40e:	ec55 4b11 	vmov	r4, r5, d1
 800c412:	f000 fa41 	bl	800c898 <__ieee754_pow>
 800c416:	4622      	mov	r2, r4
 800c418:	462b      	mov	r3, r5
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	ec57 6b10 	vmov	r6, r7, d0
 800c422:	f7f4 fb83 	bl	8000b2c <__aeabi_dcmpun>
 800c426:	2800      	cmp	r0, #0
 800c428:	d13b      	bne.n	800c4a2 <pow+0xa2>
 800c42a:	ec51 0b18 	vmov	r0, r1, d8
 800c42e:	2200      	movs	r2, #0
 800c430:	2300      	movs	r3, #0
 800c432:	f7f4 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 800c436:	b1b8      	cbz	r0, 800c468 <pow+0x68>
 800c438:	2200      	movs	r2, #0
 800c43a:	2300      	movs	r3, #0
 800c43c:	4620      	mov	r0, r4
 800c43e:	4629      	mov	r1, r5
 800c440:	f7f4 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 800c444:	2800      	cmp	r0, #0
 800c446:	d146      	bne.n	800c4d6 <pow+0xd6>
 800c448:	ec45 4b10 	vmov	d0, r4, r5
 800c44c:	f000 f874 	bl	800c538 <finite>
 800c450:	b338      	cbz	r0, 800c4a2 <pow+0xa2>
 800c452:	2200      	movs	r2, #0
 800c454:	2300      	movs	r3, #0
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f4 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800c45e:	b300      	cbz	r0, 800c4a2 <pow+0xa2>
 800c460:	f7fd ff54 	bl	800a30c <__errno>
 800c464:	2322      	movs	r3, #34	@ 0x22
 800c466:	e01b      	b.n	800c4a0 <pow+0xa0>
 800c468:	ec47 6b10 	vmov	d0, r6, r7
 800c46c:	f000 f864 	bl	800c538 <finite>
 800c470:	b9e0      	cbnz	r0, 800c4ac <pow+0xac>
 800c472:	eeb0 0a48 	vmov.f32	s0, s16
 800c476:	eef0 0a68 	vmov.f32	s1, s17
 800c47a:	f000 f85d 	bl	800c538 <finite>
 800c47e:	b1a8      	cbz	r0, 800c4ac <pow+0xac>
 800c480:	ec45 4b10 	vmov	d0, r4, r5
 800c484:	f000 f858 	bl	800c538 <finite>
 800c488:	b180      	cbz	r0, 800c4ac <pow+0xac>
 800c48a:	4632      	mov	r2, r6
 800c48c:	463b      	mov	r3, r7
 800c48e:	4630      	mov	r0, r6
 800c490:	4639      	mov	r1, r7
 800c492:	f7f4 fb4b 	bl	8000b2c <__aeabi_dcmpun>
 800c496:	2800      	cmp	r0, #0
 800c498:	d0e2      	beq.n	800c460 <pow+0x60>
 800c49a:	f7fd ff37 	bl	800a30c <__errno>
 800c49e:	2321      	movs	r3, #33	@ 0x21
 800c4a0:	6003      	str	r3, [r0, #0]
 800c4a2:	ecbd 8b02 	vpop	{d8}
 800c4a6:	ec47 6b10 	vmov	d0, r6, r7
 800c4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	f7f4 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d0f2      	beq.n	800c4a2 <pow+0xa2>
 800c4bc:	eeb0 0a48 	vmov.f32	s0, s16
 800c4c0:	eef0 0a68 	vmov.f32	s1, s17
 800c4c4:	f000 f838 	bl	800c538 <finite>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d0ea      	beq.n	800c4a2 <pow+0xa2>
 800c4cc:	ec45 4b10 	vmov	d0, r4, r5
 800c4d0:	f000 f832 	bl	800c538 <finite>
 800c4d4:	e7c3      	b.n	800c45e <pow+0x5e>
 800c4d6:	4f01      	ldr	r7, [pc, #4]	@ (800c4dc <pow+0xdc>)
 800c4d8:	2600      	movs	r6, #0
 800c4da:	e7e2      	b.n	800c4a2 <pow+0xa2>
 800c4dc:	3ff00000 	.word	0x3ff00000

0800c4e0 <sqrt>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	ed2d 8b02 	vpush	{d8}
 800c4e6:	ec55 4b10 	vmov	r4, r5, d0
 800c4ea:	f000 f831 	bl	800c550 <__ieee754_sqrt>
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	462b      	mov	r3, r5
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	eeb0 8a40 	vmov.f32	s16, s0
 800c4fa:	eef0 8a60 	vmov.f32	s17, s1
 800c4fe:	f7f4 fb15 	bl	8000b2c <__aeabi_dcmpun>
 800c502:	b990      	cbnz	r0, 800c52a <sqrt+0x4a>
 800c504:	2200      	movs	r2, #0
 800c506:	2300      	movs	r3, #0
 800c508:	4620      	mov	r0, r4
 800c50a:	4629      	mov	r1, r5
 800c50c:	f7f4 fae6 	bl	8000adc <__aeabi_dcmplt>
 800c510:	b158      	cbz	r0, 800c52a <sqrt+0x4a>
 800c512:	f7fd fefb 	bl	800a30c <__errno>
 800c516:	2321      	movs	r3, #33	@ 0x21
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	2200      	movs	r2, #0
 800c51c:	2300      	movs	r3, #0
 800c51e:	4610      	mov	r0, r2
 800c520:	4619      	mov	r1, r3
 800c522:	f7f4 f993 	bl	800084c <__aeabi_ddiv>
 800c526:	ec41 0b18 	vmov	d8, r0, r1
 800c52a:	eeb0 0a48 	vmov.f32	s0, s16
 800c52e:	eef0 0a68 	vmov.f32	s1, s17
 800c532:	ecbd 8b02 	vpop	{d8}
 800c536:	bd38      	pop	{r3, r4, r5, pc}

0800c538 <finite>:
 800c538:	b082      	sub	sp, #8
 800c53a:	ed8d 0b00 	vstr	d0, [sp]
 800c53e:	9801      	ldr	r0, [sp, #4]
 800c540:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c544:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c548:	0fc0      	lsrs	r0, r0, #31
 800c54a:	b002      	add	sp, #8
 800c54c:	4770      	bx	lr
	...

0800c550 <__ieee754_sqrt>:
 800c550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	4a68      	ldr	r2, [pc, #416]	@ (800c6f8 <__ieee754_sqrt+0x1a8>)
 800c556:	ec55 4b10 	vmov	r4, r5, d0
 800c55a:	43aa      	bics	r2, r5
 800c55c:	462b      	mov	r3, r5
 800c55e:	4621      	mov	r1, r4
 800c560:	d110      	bne.n	800c584 <__ieee754_sqrt+0x34>
 800c562:	4622      	mov	r2, r4
 800c564:	4620      	mov	r0, r4
 800c566:	4629      	mov	r1, r5
 800c568:	f7f4 f846 	bl	80005f8 <__aeabi_dmul>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	4620      	mov	r0, r4
 800c572:	4629      	mov	r1, r5
 800c574:	f7f3 fe8a 	bl	800028c <__adddf3>
 800c578:	4604      	mov	r4, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	ec45 4b10 	vmov	d0, r4, r5
 800c580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c584:	2d00      	cmp	r5, #0
 800c586:	dc0e      	bgt.n	800c5a6 <__ieee754_sqrt+0x56>
 800c588:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c58c:	4322      	orrs	r2, r4
 800c58e:	d0f5      	beq.n	800c57c <__ieee754_sqrt+0x2c>
 800c590:	b19d      	cbz	r5, 800c5ba <__ieee754_sqrt+0x6a>
 800c592:	4622      	mov	r2, r4
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f7f3 fe76 	bl	8000288 <__aeabi_dsub>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	f7f4 f954 	bl	800084c <__aeabi_ddiv>
 800c5a4:	e7e8      	b.n	800c578 <__ieee754_sqrt+0x28>
 800c5a6:	152a      	asrs	r2, r5, #20
 800c5a8:	d115      	bne.n	800c5d6 <__ieee754_sqrt+0x86>
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	e009      	b.n	800c5c2 <__ieee754_sqrt+0x72>
 800c5ae:	0acb      	lsrs	r3, r1, #11
 800c5b0:	3a15      	subs	r2, #21
 800c5b2:	0549      	lsls	r1, r1, #21
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d0fa      	beq.n	800c5ae <__ieee754_sqrt+0x5e>
 800c5b8:	e7f7      	b.n	800c5aa <__ieee754_sqrt+0x5a>
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	e7fa      	b.n	800c5b4 <__ieee754_sqrt+0x64>
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	02dc      	lsls	r4, r3, #11
 800c5c4:	d5fb      	bpl.n	800c5be <__ieee754_sqrt+0x6e>
 800c5c6:	1e44      	subs	r4, r0, #1
 800c5c8:	1b12      	subs	r2, r2, r4
 800c5ca:	f1c0 0420 	rsb	r4, r0, #32
 800c5ce:	fa21 f404 	lsr.w	r4, r1, r4
 800c5d2:	4323      	orrs	r3, r4
 800c5d4:	4081      	lsls	r1, r0
 800c5d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c5de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5e2:	07d2      	lsls	r2, r2, #31
 800c5e4:	bf5c      	itt	pl
 800c5e6:	005b      	lslpl	r3, r3, #1
 800c5e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c5ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c5f0:	bf58      	it	pl
 800c5f2:	0049      	lslpl	r1, r1, #1
 800c5f4:	2600      	movs	r6, #0
 800c5f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c5fa:	106d      	asrs	r5, r5, #1
 800c5fc:	0049      	lsls	r1, r1, #1
 800c5fe:	2016      	movs	r0, #22
 800c600:	4632      	mov	r2, r6
 800c602:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c606:	1917      	adds	r7, r2, r4
 800c608:	429f      	cmp	r7, r3
 800c60a:	bfde      	ittt	le
 800c60c:	193a      	addle	r2, r7, r4
 800c60e:	1bdb      	suble	r3, r3, r7
 800c610:	1936      	addle	r6, r6, r4
 800c612:	0fcf      	lsrs	r7, r1, #31
 800c614:	3801      	subs	r0, #1
 800c616:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c61a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c61e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c622:	d1f0      	bne.n	800c606 <__ieee754_sqrt+0xb6>
 800c624:	4604      	mov	r4, r0
 800c626:	2720      	movs	r7, #32
 800c628:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c62c:	429a      	cmp	r2, r3
 800c62e:	eb00 0e0c 	add.w	lr, r0, ip
 800c632:	db02      	blt.n	800c63a <__ieee754_sqrt+0xea>
 800c634:	d113      	bne.n	800c65e <__ieee754_sqrt+0x10e>
 800c636:	458e      	cmp	lr, r1
 800c638:	d811      	bhi.n	800c65e <__ieee754_sqrt+0x10e>
 800c63a:	f1be 0f00 	cmp.w	lr, #0
 800c63e:	eb0e 000c 	add.w	r0, lr, ip
 800c642:	da42      	bge.n	800c6ca <__ieee754_sqrt+0x17a>
 800c644:	2800      	cmp	r0, #0
 800c646:	db40      	blt.n	800c6ca <__ieee754_sqrt+0x17a>
 800c648:	f102 0801 	add.w	r8, r2, #1
 800c64c:	1a9b      	subs	r3, r3, r2
 800c64e:	458e      	cmp	lr, r1
 800c650:	bf88      	it	hi
 800c652:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c656:	eba1 010e 	sub.w	r1, r1, lr
 800c65a:	4464      	add	r4, ip
 800c65c:	4642      	mov	r2, r8
 800c65e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c662:	3f01      	subs	r7, #1
 800c664:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c668:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c66c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c670:	d1dc      	bne.n	800c62c <__ieee754_sqrt+0xdc>
 800c672:	4319      	orrs	r1, r3
 800c674:	d01b      	beq.n	800c6ae <__ieee754_sqrt+0x15e>
 800c676:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c6fc <__ieee754_sqrt+0x1ac>
 800c67a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c700 <__ieee754_sqrt+0x1b0>
 800c67e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c682:	e9db 2300 	ldrd	r2, r3, [fp]
 800c686:	f7f3 fdff 	bl	8000288 <__aeabi_dsub>
 800c68a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4640      	mov	r0, r8
 800c694:	4649      	mov	r1, r9
 800c696:	f7f4 fa2b 	bl	8000af0 <__aeabi_dcmple>
 800c69a:	b140      	cbz	r0, 800c6ae <__ieee754_sqrt+0x15e>
 800c69c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c6a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800c6a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c6a8:	d111      	bne.n	800c6ce <__ieee754_sqrt+0x17e>
 800c6aa:	3601      	adds	r6, #1
 800c6ac:	463c      	mov	r4, r7
 800c6ae:	1072      	asrs	r2, r6, #1
 800c6b0:	0863      	lsrs	r3, r4, #1
 800c6b2:	07f1      	lsls	r1, r6, #31
 800c6b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c6b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c6bc:	bf48      	it	mi
 800c6be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c6c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	e756      	b.n	800c578 <__ieee754_sqrt+0x28>
 800c6ca:	4690      	mov	r8, r2
 800c6cc:	e7be      	b.n	800c64c <__ieee754_sqrt+0xfc>
 800c6ce:	f7f3 fddd 	bl	800028c <__adddf3>
 800c6d2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4640      	mov	r0, r8
 800c6dc:	4649      	mov	r1, r9
 800c6de:	f7f4 f9fd 	bl	8000adc <__aeabi_dcmplt>
 800c6e2:	b120      	cbz	r0, 800c6ee <__ieee754_sqrt+0x19e>
 800c6e4:	1ca0      	adds	r0, r4, #2
 800c6e6:	bf08      	it	eq
 800c6e8:	3601      	addeq	r6, #1
 800c6ea:	3402      	adds	r4, #2
 800c6ec:	e7df      	b.n	800c6ae <__ieee754_sqrt+0x15e>
 800c6ee:	1c63      	adds	r3, r4, #1
 800c6f0:	f023 0401 	bic.w	r4, r3, #1
 800c6f4:	e7db      	b.n	800c6ae <__ieee754_sqrt+0x15e>
 800c6f6:	bf00      	nop
 800c6f8:	7ff00000 	.word	0x7ff00000
 800c6fc:	200002e8 	.word	0x200002e8
 800c700:	200002e0 	.word	0x200002e0
 800c704:	00000000 	.word	0x00000000

0800c708 <__ieee754_atan2>:
 800c708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c70c:	ec57 6b11 	vmov	r6, r7, d1
 800c710:	4273      	negs	r3, r6
 800c712:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c890 <__ieee754_atan2+0x188>
 800c716:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c71a:	4333      	orrs	r3, r6
 800c71c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c720:	4543      	cmp	r3, r8
 800c722:	ec51 0b10 	vmov	r0, r1, d0
 800c726:	4635      	mov	r5, r6
 800c728:	d809      	bhi.n	800c73e <__ieee754_atan2+0x36>
 800c72a:	4244      	negs	r4, r0
 800c72c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c730:	4304      	orrs	r4, r0
 800c732:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c736:	4544      	cmp	r4, r8
 800c738:	468e      	mov	lr, r1
 800c73a:	4681      	mov	r9, r0
 800c73c:	d907      	bls.n	800c74e <__ieee754_atan2+0x46>
 800c73e:	4632      	mov	r2, r6
 800c740:	463b      	mov	r3, r7
 800c742:	f7f3 fda3 	bl	800028c <__adddf3>
 800c746:	ec41 0b10 	vmov	d0, r0, r1
 800c74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c74e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c752:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c756:	4334      	orrs	r4, r6
 800c758:	d103      	bne.n	800c762 <__ieee754_atan2+0x5a>
 800c75a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c75e:	f000 bddf 	b.w	800d320 <atan>
 800c762:	17bc      	asrs	r4, r7, #30
 800c764:	f004 0402 	and.w	r4, r4, #2
 800c768:	ea53 0909 	orrs.w	r9, r3, r9
 800c76c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c770:	d107      	bne.n	800c782 <__ieee754_atan2+0x7a>
 800c772:	2c02      	cmp	r4, #2
 800c774:	d05f      	beq.n	800c836 <__ieee754_atan2+0x12e>
 800c776:	2c03      	cmp	r4, #3
 800c778:	d1e5      	bne.n	800c746 <__ieee754_atan2+0x3e>
 800c77a:	a141      	add	r1, pc, #260	@ (adr r1, 800c880 <__ieee754_atan2+0x178>)
 800c77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c780:	e7e1      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c782:	4315      	orrs	r5, r2
 800c784:	d106      	bne.n	800c794 <__ieee754_atan2+0x8c>
 800c786:	f1be 0f00 	cmp.w	lr, #0
 800c78a:	da5f      	bge.n	800c84c <__ieee754_atan2+0x144>
 800c78c:	a13e      	add	r1, pc, #248	@ (adr r1, 800c888 <__ieee754_atan2+0x180>)
 800c78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c792:	e7d8      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c794:	4542      	cmp	r2, r8
 800c796:	d10f      	bne.n	800c7b8 <__ieee754_atan2+0xb0>
 800c798:	4293      	cmp	r3, r2
 800c79a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c79e:	d107      	bne.n	800c7b0 <__ieee754_atan2+0xa8>
 800c7a0:	2c02      	cmp	r4, #2
 800c7a2:	d84c      	bhi.n	800c83e <__ieee754_atan2+0x136>
 800c7a4:	4b34      	ldr	r3, [pc, #208]	@ (800c878 <__ieee754_atan2+0x170>)
 800c7a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7ae:	e7ca      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c7b0:	2c02      	cmp	r4, #2
 800c7b2:	d848      	bhi.n	800c846 <__ieee754_atan2+0x13e>
 800c7b4:	4b31      	ldr	r3, [pc, #196]	@ (800c87c <__ieee754_atan2+0x174>)
 800c7b6:	e7f6      	b.n	800c7a6 <__ieee754_atan2+0x9e>
 800c7b8:	4543      	cmp	r3, r8
 800c7ba:	d0e4      	beq.n	800c786 <__ieee754_atan2+0x7e>
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c7c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7c6:	da1e      	bge.n	800c806 <__ieee754_atan2+0xfe>
 800c7c8:	2f00      	cmp	r7, #0
 800c7ca:	da01      	bge.n	800c7d0 <__ieee754_atan2+0xc8>
 800c7cc:	323c      	adds	r2, #60	@ 0x3c
 800c7ce:	db1e      	blt.n	800c80e <__ieee754_atan2+0x106>
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	463b      	mov	r3, r7
 800c7d4:	f7f4 f83a 	bl	800084c <__aeabi_ddiv>
 800c7d8:	ec41 0b10 	vmov	d0, r0, r1
 800c7dc:	f000 ff38 	bl	800d650 <fabs>
 800c7e0:	f000 fd9e 	bl	800d320 <atan>
 800c7e4:	ec51 0b10 	vmov	r0, r1, d0
 800c7e8:	2c01      	cmp	r4, #1
 800c7ea:	d013      	beq.n	800c814 <__ieee754_atan2+0x10c>
 800c7ec:	2c02      	cmp	r4, #2
 800c7ee:	d015      	beq.n	800c81c <__ieee754_atan2+0x114>
 800c7f0:	2c00      	cmp	r4, #0
 800c7f2:	d0a8      	beq.n	800c746 <__ieee754_atan2+0x3e>
 800c7f4:	a318      	add	r3, pc, #96	@ (adr r3, 800c858 <__ieee754_atan2+0x150>)
 800c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fa:	f7f3 fd45 	bl	8000288 <__aeabi_dsub>
 800c7fe:	a318      	add	r3, pc, #96	@ (adr r3, 800c860 <__ieee754_atan2+0x158>)
 800c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c804:	e014      	b.n	800c830 <__ieee754_atan2+0x128>
 800c806:	a118      	add	r1, pc, #96	@ (adr r1, 800c868 <__ieee754_atan2+0x160>)
 800c808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c80c:	e7ec      	b.n	800c7e8 <__ieee754_atan2+0xe0>
 800c80e:	2000      	movs	r0, #0
 800c810:	2100      	movs	r1, #0
 800c812:	e7e9      	b.n	800c7e8 <__ieee754_atan2+0xe0>
 800c814:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c818:	4619      	mov	r1, r3
 800c81a:	e794      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c81c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c858 <__ieee754_atan2+0x150>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fd31 	bl	8000288 <__aeabi_dsub>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	a10d      	add	r1, pc, #52	@ (adr r1, 800c860 <__ieee754_atan2+0x158>)
 800c82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c830:	f7f3 fd2a 	bl	8000288 <__aeabi_dsub>
 800c834:	e787      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c836:	a10a      	add	r1, pc, #40	@ (adr r1, 800c860 <__ieee754_atan2+0x158>)
 800c838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c83c:	e783      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c83e:	a10c      	add	r1, pc, #48	@ (adr r1, 800c870 <__ieee754_atan2+0x168>)
 800c840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c844:	e77f      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c846:	2000      	movs	r0, #0
 800c848:	2100      	movs	r1, #0
 800c84a:	e77c      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c84c:	a106      	add	r1, pc, #24	@ (adr r1, 800c868 <__ieee754_atan2+0x160>)
 800c84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c852:	e778      	b.n	800c746 <__ieee754_atan2+0x3e>
 800c854:	f3af 8000 	nop.w
 800c858:	33145c07 	.word	0x33145c07
 800c85c:	3ca1a626 	.word	0x3ca1a626
 800c860:	54442d18 	.word	0x54442d18
 800c864:	400921fb 	.word	0x400921fb
 800c868:	54442d18 	.word	0x54442d18
 800c86c:	3ff921fb 	.word	0x3ff921fb
 800c870:	54442d18 	.word	0x54442d18
 800c874:	3fe921fb 	.word	0x3fe921fb
 800c878:	0800ddc8 	.word	0x0800ddc8
 800c87c:	0800ddb0 	.word	0x0800ddb0
 800c880:	54442d18 	.word	0x54442d18
 800c884:	c00921fb 	.word	0xc00921fb
 800c888:	54442d18 	.word	0x54442d18
 800c88c:	bff921fb 	.word	0xbff921fb
 800c890:	7ff00000 	.word	0x7ff00000
 800c894:	00000000 	.word	0x00000000

0800c898 <__ieee754_pow>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	b091      	sub	sp, #68	@ 0x44
 800c89e:	ed8d 1b00 	vstr	d1, [sp]
 800c8a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c8a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c8aa:	ea5a 0001 	orrs.w	r0, sl, r1
 800c8ae:	ec57 6b10 	vmov	r6, r7, d0
 800c8b2:	d113      	bne.n	800c8dc <__ieee754_pow+0x44>
 800c8b4:	19b3      	adds	r3, r6, r6
 800c8b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c8ba:	4152      	adcs	r2, r2
 800c8bc:	4298      	cmp	r0, r3
 800c8be:	4b98      	ldr	r3, [pc, #608]	@ (800cb20 <__ieee754_pow+0x288>)
 800c8c0:	4193      	sbcs	r3, r2
 800c8c2:	f080 84ea 	bcs.w	800d29a <__ieee754_pow+0xa02>
 800c8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	f7f3 fcdd 	bl	800028c <__adddf3>
 800c8d2:	ec41 0b10 	vmov	d0, r0, r1
 800c8d6:	b011      	add	sp, #68	@ 0x44
 800c8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8dc:	4a91      	ldr	r2, [pc, #580]	@ (800cb24 <__ieee754_pow+0x28c>)
 800c8de:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c8e2:	4590      	cmp	r8, r2
 800c8e4:	463d      	mov	r5, r7
 800c8e6:	4633      	mov	r3, r6
 800c8e8:	d806      	bhi.n	800c8f8 <__ieee754_pow+0x60>
 800c8ea:	d101      	bne.n	800c8f0 <__ieee754_pow+0x58>
 800c8ec:	2e00      	cmp	r6, #0
 800c8ee:	d1ea      	bne.n	800c8c6 <__ieee754_pow+0x2e>
 800c8f0:	4592      	cmp	sl, r2
 800c8f2:	d801      	bhi.n	800c8f8 <__ieee754_pow+0x60>
 800c8f4:	d10e      	bne.n	800c914 <__ieee754_pow+0x7c>
 800c8f6:	b169      	cbz	r1, 800c914 <__ieee754_pow+0x7c>
 800c8f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c8fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c900:	431d      	orrs	r5, r3
 800c902:	d1e0      	bne.n	800c8c6 <__ieee754_pow+0x2e>
 800c904:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c908:	18db      	adds	r3, r3, r3
 800c90a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c90e:	4152      	adcs	r2, r2
 800c910:	429d      	cmp	r5, r3
 800c912:	e7d4      	b.n	800c8be <__ieee754_pow+0x26>
 800c914:	2d00      	cmp	r5, #0
 800c916:	46c3      	mov	fp, r8
 800c918:	da3a      	bge.n	800c990 <__ieee754_pow+0xf8>
 800c91a:	4a83      	ldr	r2, [pc, #524]	@ (800cb28 <__ieee754_pow+0x290>)
 800c91c:	4592      	cmp	sl, r2
 800c91e:	d84d      	bhi.n	800c9bc <__ieee754_pow+0x124>
 800c920:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c924:	4592      	cmp	sl, r2
 800c926:	f240 84c7 	bls.w	800d2b8 <__ieee754_pow+0xa20>
 800c92a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c92e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c932:	2a14      	cmp	r2, #20
 800c934:	dd0f      	ble.n	800c956 <__ieee754_pow+0xbe>
 800c936:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c93a:	fa21 f402 	lsr.w	r4, r1, r2
 800c93e:	fa04 f202 	lsl.w	r2, r4, r2
 800c942:	428a      	cmp	r2, r1
 800c944:	f040 84b8 	bne.w	800d2b8 <__ieee754_pow+0xa20>
 800c948:	f004 0401 	and.w	r4, r4, #1
 800c94c:	f1c4 0402 	rsb	r4, r4, #2
 800c950:	2900      	cmp	r1, #0
 800c952:	d158      	bne.n	800ca06 <__ieee754_pow+0x16e>
 800c954:	e00e      	b.n	800c974 <__ieee754_pow+0xdc>
 800c956:	2900      	cmp	r1, #0
 800c958:	d154      	bne.n	800ca04 <__ieee754_pow+0x16c>
 800c95a:	f1c2 0214 	rsb	r2, r2, #20
 800c95e:	fa4a f402 	asr.w	r4, sl, r2
 800c962:	fa04 f202 	lsl.w	r2, r4, r2
 800c966:	4552      	cmp	r2, sl
 800c968:	f040 84a3 	bne.w	800d2b2 <__ieee754_pow+0xa1a>
 800c96c:	f004 0401 	and.w	r4, r4, #1
 800c970:	f1c4 0402 	rsb	r4, r4, #2
 800c974:	4a6d      	ldr	r2, [pc, #436]	@ (800cb2c <__ieee754_pow+0x294>)
 800c976:	4592      	cmp	sl, r2
 800c978:	d12e      	bne.n	800c9d8 <__ieee754_pow+0x140>
 800c97a:	f1b9 0f00 	cmp.w	r9, #0
 800c97e:	f280 8494 	bge.w	800d2aa <__ieee754_pow+0xa12>
 800c982:	496a      	ldr	r1, [pc, #424]	@ (800cb2c <__ieee754_pow+0x294>)
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	2000      	movs	r0, #0
 800c98a:	f7f3 ff5f 	bl	800084c <__aeabi_ddiv>
 800c98e:	e7a0      	b.n	800c8d2 <__ieee754_pow+0x3a>
 800c990:	2400      	movs	r4, #0
 800c992:	bbc1      	cbnz	r1, 800ca06 <__ieee754_pow+0x16e>
 800c994:	4a63      	ldr	r2, [pc, #396]	@ (800cb24 <__ieee754_pow+0x28c>)
 800c996:	4592      	cmp	sl, r2
 800c998:	d1ec      	bne.n	800c974 <__ieee754_pow+0xdc>
 800c99a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c99e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	f000 8479 	beq.w	800d29a <__ieee754_pow+0xa02>
 800c9a8:	4b61      	ldr	r3, [pc, #388]	@ (800cb30 <__ieee754_pow+0x298>)
 800c9aa:	4598      	cmp	r8, r3
 800c9ac:	d908      	bls.n	800c9c0 <__ieee754_pow+0x128>
 800c9ae:	f1b9 0f00 	cmp.w	r9, #0
 800c9b2:	f2c0 8476 	blt.w	800d2a2 <__ieee754_pow+0xa0a>
 800c9b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9ba:	e78a      	b.n	800c8d2 <__ieee754_pow+0x3a>
 800c9bc:	2402      	movs	r4, #2
 800c9be:	e7e8      	b.n	800c992 <__ieee754_pow+0xfa>
 800c9c0:	f1b9 0f00 	cmp.w	r9, #0
 800c9c4:	f04f 0000 	mov.w	r0, #0
 800c9c8:	f04f 0100 	mov.w	r1, #0
 800c9cc:	da81      	bge.n	800c8d2 <__ieee754_pow+0x3a>
 800c9ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c9d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c9d6:	e77c      	b.n	800c8d2 <__ieee754_pow+0x3a>
 800c9d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c9dc:	d106      	bne.n	800c9ec <__ieee754_pow+0x154>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7f3 fe07 	bl	80005f8 <__aeabi_dmul>
 800c9ea:	e772      	b.n	800c8d2 <__ieee754_pow+0x3a>
 800c9ec:	4a51      	ldr	r2, [pc, #324]	@ (800cb34 <__ieee754_pow+0x29c>)
 800c9ee:	4591      	cmp	r9, r2
 800c9f0:	d109      	bne.n	800ca06 <__ieee754_pow+0x16e>
 800c9f2:	2d00      	cmp	r5, #0
 800c9f4:	db07      	blt.n	800ca06 <__ieee754_pow+0x16e>
 800c9f6:	ec47 6b10 	vmov	d0, r6, r7
 800c9fa:	b011      	add	sp, #68	@ 0x44
 800c9fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	f7ff bda6 	b.w	800c550 <__ieee754_sqrt>
 800ca04:	2400      	movs	r4, #0
 800ca06:	ec47 6b10 	vmov	d0, r6, r7
 800ca0a:	9302      	str	r3, [sp, #8]
 800ca0c:	f000 fe20 	bl	800d650 <fabs>
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	ec51 0b10 	vmov	r0, r1, d0
 800ca16:	bb53      	cbnz	r3, 800ca6e <__ieee754_pow+0x1d6>
 800ca18:	4b44      	ldr	r3, [pc, #272]	@ (800cb2c <__ieee754_pow+0x294>)
 800ca1a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d002      	beq.n	800ca28 <__ieee754_pow+0x190>
 800ca22:	f1b8 0f00 	cmp.w	r8, #0
 800ca26:	d122      	bne.n	800ca6e <__ieee754_pow+0x1d6>
 800ca28:	f1b9 0f00 	cmp.w	r9, #0
 800ca2c:	da05      	bge.n	800ca3a <__ieee754_pow+0x1a2>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	2000      	movs	r0, #0
 800ca34:	493d      	ldr	r1, [pc, #244]	@ (800cb2c <__ieee754_pow+0x294>)
 800ca36:	f7f3 ff09 	bl	800084c <__aeabi_ddiv>
 800ca3a:	2d00      	cmp	r5, #0
 800ca3c:	f6bf af49 	bge.w	800c8d2 <__ieee754_pow+0x3a>
 800ca40:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ca44:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ca48:	ea58 0804 	orrs.w	r8, r8, r4
 800ca4c:	d108      	bne.n	800ca60 <__ieee754_pow+0x1c8>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4610      	mov	r0, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	f7f3 fc17 	bl	8000288 <__aeabi_dsub>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	e794      	b.n	800c98a <__ieee754_pow+0xf2>
 800ca60:	2c01      	cmp	r4, #1
 800ca62:	f47f af36 	bne.w	800c8d2 <__ieee754_pow+0x3a>
 800ca66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	e731      	b.n	800c8d2 <__ieee754_pow+0x3a>
 800ca6e:	0feb      	lsrs	r3, r5, #31
 800ca70:	3b01      	subs	r3, #1
 800ca72:	ea53 0204 	orrs.w	r2, r3, r4
 800ca76:	d102      	bne.n	800ca7e <__ieee754_pow+0x1e6>
 800ca78:	4632      	mov	r2, r6
 800ca7a:	463b      	mov	r3, r7
 800ca7c:	e7e9      	b.n	800ca52 <__ieee754_pow+0x1ba>
 800ca7e:	3c01      	subs	r4, #1
 800ca80:	431c      	orrs	r4, r3
 800ca82:	d016      	beq.n	800cab2 <__ieee754_pow+0x21a>
 800ca84:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800cb10 <__ieee754_pow+0x278>
 800ca88:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ca8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca90:	f240 8112 	bls.w	800ccb8 <__ieee754_pow+0x420>
 800ca94:	4b28      	ldr	r3, [pc, #160]	@ (800cb38 <__ieee754_pow+0x2a0>)
 800ca96:	459a      	cmp	sl, r3
 800ca98:	4b25      	ldr	r3, [pc, #148]	@ (800cb30 <__ieee754_pow+0x298>)
 800ca9a:	d916      	bls.n	800caca <__ieee754_pow+0x232>
 800ca9c:	4598      	cmp	r8, r3
 800ca9e:	d80b      	bhi.n	800cab8 <__ieee754_pow+0x220>
 800caa0:	f1b9 0f00 	cmp.w	r9, #0
 800caa4:	da0b      	bge.n	800cabe <__ieee754_pow+0x226>
 800caa6:	2000      	movs	r0, #0
 800caa8:	b011      	add	sp, #68	@ 0x44
 800caaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caae:	f000 be8b 	b.w	800d7c8 <__math_oflow>
 800cab2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800cb18 <__ieee754_pow+0x280>
 800cab6:	e7e7      	b.n	800ca88 <__ieee754_pow+0x1f0>
 800cab8:	f1b9 0f00 	cmp.w	r9, #0
 800cabc:	dcf3      	bgt.n	800caa6 <__ieee754_pow+0x20e>
 800cabe:	2000      	movs	r0, #0
 800cac0:	b011      	add	sp, #68	@ 0x44
 800cac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac6:	f000 be77 	b.w	800d7b8 <__math_uflow>
 800caca:	4598      	cmp	r8, r3
 800cacc:	d20c      	bcs.n	800cae8 <__ieee754_pow+0x250>
 800cace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cad2:	2200      	movs	r2, #0
 800cad4:	2300      	movs	r3, #0
 800cad6:	f7f4 f801 	bl	8000adc <__aeabi_dcmplt>
 800cada:	3800      	subs	r0, #0
 800cadc:	bf18      	it	ne
 800cade:	2001      	movne	r0, #1
 800cae0:	f1b9 0f00 	cmp.w	r9, #0
 800cae4:	daec      	bge.n	800cac0 <__ieee754_pow+0x228>
 800cae6:	e7df      	b.n	800caa8 <__ieee754_pow+0x210>
 800cae8:	4b10      	ldr	r3, [pc, #64]	@ (800cb2c <__ieee754_pow+0x294>)
 800caea:	4598      	cmp	r8, r3
 800caec:	f04f 0200 	mov.w	r2, #0
 800caf0:	d924      	bls.n	800cb3c <__ieee754_pow+0x2a4>
 800caf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf6:	2300      	movs	r3, #0
 800caf8:	f7f3 fff0 	bl	8000adc <__aeabi_dcmplt>
 800cafc:	3800      	subs	r0, #0
 800cafe:	bf18      	it	ne
 800cb00:	2001      	movne	r0, #1
 800cb02:	f1b9 0f00 	cmp.w	r9, #0
 800cb06:	dccf      	bgt.n	800caa8 <__ieee754_pow+0x210>
 800cb08:	e7da      	b.n	800cac0 <__ieee754_pow+0x228>
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w
 800cb10:	00000000 	.word	0x00000000
 800cb14:	3ff00000 	.word	0x3ff00000
 800cb18:	00000000 	.word	0x00000000
 800cb1c:	bff00000 	.word	0xbff00000
 800cb20:	fff00000 	.word	0xfff00000
 800cb24:	7ff00000 	.word	0x7ff00000
 800cb28:	433fffff 	.word	0x433fffff
 800cb2c:	3ff00000 	.word	0x3ff00000
 800cb30:	3fefffff 	.word	0x3fefffff
 800cb34:	3fe00000 	.word	0x3fe00000
 800cb38:	43f00000 	.word	0x43f00000
 800cb3c:	4b5a      	ldr	r3, [pc, #360]	@ (800cca8 <__ieee754_pow+0x410>)
 800cb3e:	f7f3 fba3 	bl	8000288 <__aeabi_dsub>
 800cb42:	a351      	add	r3, pc, #324	@ (adr r3, 800cc88 <__ieee754_pow+0x3f0>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	4604      	mov	r4, r0
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	f7f3 fd54 	bl	80005f8 <__aeabi_dmul>
 800cb50:	a34f      	add	r3, pc, #316	@ (adr r3, 800cc90 <__ieee754_pow+0x3f8>)
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	4606      	mov	r6, r0
 800cb58:	460f      	mov	r7, r1
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	f7f3 fd4b 	bl	80005f8 <__aeabi_dmul>
 800cb62:	4b52      	ldr	r3, [pc, #328]	@ (800ccac <__ieee754_pow+0x414>)
 800cb64:	4682      	mov	sl, r0
 800cb66:	468b      	mov	fp, r1
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	f7f3 fd43 	bl	80005f8 <__aeabi_dmul>
 800cb72:	4602      	mov	r2, r0
 800cb74:	460b      	mov	r3, r1
 800cb76:	a148      	add	r1, pc, #288	@ (adr r1, 800cc98 <__ieee754_pow+0x400>)
 800cb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb7c:	f7f3 fb84 	bl	8000288 <__aeabi_dsub>
 800cb80:	4622      	mov	r2, r4
 800cb82:	462b      	mov	r3, r5
 800cb84:	f7f3 fd38 	bl	80005f8 <__aeabi_dmul>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	4948      	ldr	r1, [pc, #288]	@ (800ccb0 <__ieee754_pow+0x418>)
 800cb90:	f7f3 fb7a 	bl	8000288 <__aeabi_dsub>
 800cb94:	4622      	mov	r2, r4
 800cb96:	4680      	mov	r8, r0
 800cb98:	4689      	mov	r9, r1
 800cb9a:	462b      	mov	r3, r5
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	4629      	mov	r1, r5
 800cba0:	f7f3 fd2a 	bl	80005f8 <__aeabi_dmul>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	4640      	mov	r0, r8
 800cbaa:	4649      	mov	r1, r9
 800cbac:	f7f3 fd24 	bl	80005f8 <__aeabi_dmul>
 800cbb0:	a33b      	add	r3, pc, #236	@ (adr r3, 800cca0 <__ieee754_pow+0x408>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f7f3 fd1f 	bl	80005f8 <__aeabi_dmul>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4650      	mov	r0, sl
 800cbc0:	4659      	mov	r1, fp
 800cbc2:	f7f3 fb61 	bl	8000288 <__aeabi_dsub>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4680      	mov	r8, r0
 800cbcc:	4689      	mov	r9, r1
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	f7f3 fb5b 	bl	800028c <__adddf3>
 800cbd6:	2400      	movs	r4, #0
 800cbd8:	4632      	mov	r2, r6
 800cbda:	463b      	mov	r3, r7
 800cbdc:	4620      	mov	r0, r4
 800cbde:	460d      	mov	r5, r1
 800cbe0:	f7f3 fb52 	bl	8000288 <__aeabi_dsub>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4640      	mov	r0, r8
 800cbea:	4649      	mov	r1, r9
 800cbec:	f7f3 fb4c 	bl	8000288 <__aeabi_dsub>
 800cbf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cc00:	4606      	mov	r6, r0
 800cc02:	460f      	mov	r7, r1
 800cc04:	4652      	mov	r2, sl
 800cc06:	465b      	mov	r3, fp
 800cc08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc0c:	f7f3 fb3c 	bl	8000288 <__aeabi_dsub>
 800cc10:	4622      	mov	r2, r4
 800cc12:	462b      	mov	r3, r5
 800cc14:	f7f3 fcf0 	bl	80005f8 <__aeabi_dmul>
 800cc18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	4689      	mov	r9, r1
 800cc20:	4630      	mov	r0, r6
 800cc22:	4639      	mov	r1, r7
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	4649      	mov	r1, r9
 800cc30:	f7f3 fb2c 	bl	800028c <__adddf3>
 800cc34:	4652      	mov	r2, sl
 800cc36:	465b      	mov	r3, fp
 800cc38:	4606      	mov	r6, r0
 800cc3a:	460f      	mov	r7, r1
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	4629      	mov	r1, r5
 800cc40:	f7f3 fcda 	bl	80005f8 <__aeabi_dmul>
 800cc44:	460b      	mov	r3, r1
 800cc46:	4602      	mov	r2, r0
 800cc48:	4680      	mov	r8, r0
 800cc4a:	4689      	mov	r9, r1
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4639      	mov	r1, r7
 800cc50:	f7f3 fb1c 	bl	800028c <__adddf3>
 800cc54:	4b17      	ldr	r3, [pc, #92]	@ (800ccb4 <__ieee754_pow+0x41c>)
 800cc56:	4299      	cmp	r1, r3
 800cc58:	4604      	mov	r4, r0
 800cc5a:	460d      	mov	r5, r1
 800cc5c:	468a      	mov	sl, r1
 800cc5e:	468b      	mov	fp, r1
 800cc60:	f340 82ef 	ble.w	800d242 <__ieee754_pow+0x9aa>
 800cc64:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800cc68:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800cc6c:	4303      	orrs	r3, r0
 800cc6e:	f000 81e8 	beq.w	800d042 <__ieee754_pow+0x7aa>
 800cc72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc76:	2200      	movs	r2, #0
 800cc78:	2300      	movs	r3, #0
 800cc7a:	f7f3 ff2f 	bl	8000adc <__aeabi_dcmplt>
 800cc7e:	3800      	subs	r0, #0
 800cc80:	bf18      	it	ne
 800cc82:	2001      	movne	r0, #1
 800cc84:	e710      	b.n	800caa8 <__ieee754_pow+0x210>
 800cc86:	bf00      	nop
 800cc88:	60000000 	.word	0x60000000
 800cc8c:	3ff71547 	.word	0x3ff71547
 800cc90:	f85ddf44 	.word	0xf85ddf44
 800cc94:	3e54ae0b 	.word	0x3e54ae0b
 800cc98:	55555555 	.word	0x55555555
 800cc9c:	3fd55555 	.word	0x3fd55555
 800cca0:	652b82fe 	.word	0x652b82fe
 800cca4:	3ff71547 	.word	0x3ff71547
 800cca8:	3ff00000 	.word	0x3ff00000
 800ccac:	3fd00000 	.word	0x3fd00000
 800ccb0:	3fe00000 	.word	0x3fe00000
 800ccb4:	408fffff 	.word	0x408fffff
 800ccb8:	4bd5      	ldr	r3, [pc, #852]	@ (800d010 <__ieee754_pow+0x778>)
 800ccba:	402b      	ands	r3, r5
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	b92b      	cbnz	r3, 800cccc <__ieee754_pow+0x434>
 800ccc0:	4bd4      	ldr	r3, [pc, #848]	@ (800d014 <__ieee754_pow+0x77c>)
 800ccc2:	f7f3 fc99 	bl	80005f8 <__aeabi_dmul>
 800ccc6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ccca:	468b      	mov	fp, r1
 800cccc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ccd0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ccd4:	4413      	add	r3, r2
 800ccd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccd8:	4bcf      	ldr	r3, [pc, #828]	@ (800d018 <__ieee754_pow+0x780>)
 800ccda:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ccde:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800cce2:	459b      	cmp	fp, r3
 800cce4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cce8:	dd08      	ble.n	800ccfc <__ieee754_pow+0x464>
 800ccea:	4bcc      	ldr	r3, [pc, #816]	@ (800d01c <__ieee754_pow+0x784>)
 800ccec:	459b      	cmp	fp, r3
 800ccee:	f340 81a5 	ble.w	800d03c <__ieee754_pow+0x7a4>
 800ccf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccf8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ccfc:	f04f 0a00 	mov.w	sl, #0
 800cd00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cd04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd06:	4bc6      	ldr	r3, [pc, #792]	@ (800d020 <__ieee754_pow+0x788>)
 800cd08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd0c:	ed93 7b00 	vldr	d7, [r3]
 800cd10:	4629      	mov	r1, r5
 800cd12:	ec53 2b17 	vmov	r2, r3, d7
 800cd16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd1e:	f7f3 fab3 	bl	8000288 <__aeabi_dsub>
 800cd22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd26:	4606      	mov	r6, r0
 800cd28:	460f      	mov	r7, r1
 800cd2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd2e:	f7f3 faad 	bl	800028c <__adddf3>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	2000      	movs	r0, #0
 800cd38:	49ba      	ldr	r1, [pc, #744]	@ (800d024 <__ieee754_pow+0x78c>)
 800cd3a:	f7f3 fd87 	bl	800084c <__aeabi_ddiv>
 800cd3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	4630      	mov	r0, r6
 800cd48:	4639      	mov	r1, r7
 800cd4a:	f7f3 fc55 	bl	80005f8 <__aeabi_dmul>
 800cd4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd52:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800cd56:	106d      	asrs	r5, r5, #1
 800cd58:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800cd5c:	f04f 0b00 	mov.w	fp, #0
 800cd60:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800cd64:	4661      	mov	r1, ip
 800cd66:	2200      	movs	r2, #0
 800cd68:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cd6c:	4658      	mov	r0, fp
 800cd6e:	46e1      	mov	r9, ip
 800cd70:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800cd74:	4614      	mov	r4, r2
 800cd76:	461d      	mov	r5, r3
 800cd78:	f7f3 fc3e 	bl	80005f8 <__aeabi_dmul>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	4630      	mov	r0, r6
 800cd82:	4639      	mov	r1, r7
 800cd84:	f7f3 fa80 	bl	8000288 <__aeabi_dsub>
 800cd88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	460f      	mov	r7, r1
 800cd90:	4620      	mov	r0, r4
 800cd92:	4629      	mov	r1, r5
 800cd94:	f7f3 fa78 	bl	8000288 <__aeabi_dsub>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cda0:	f7f3 fa72 	bl	8000288 <__aeabi_dsub>
 800cda4:	465a      	mov	r2, fp
 800cda6:	464b      	mov	r3, r9
 800cda8:	f7f3 fc26 	bl	80005f8 <__aeabi_dmul>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	4639      	mov	r1, r7
 800cdb4:	f7f3 fa68 	bl	8000288 <__aeabi_dsub>
 800cdb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f7f3 fc14 	bl	80005f8 <__aeabi_dmul>
 800cdd0:	a37d      	add	r3, pc, #500	@ (adr r3, 800cfc8 <__ieee754_pow+0x730>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	f7f3 fc0d 	bl	80005f8 <__aeabi_dmul>
 800cdde:	a37c      	add	r3, pc, #496	@ (adr r3, 800cfd0 <__ieee754_pow+0x738>)
 800cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde4:	f7f3 fa52 	bl	800028c <__adddf3>
 800cde8:	4622      	mov	r2, r4
 800cdea:	462b      	mov	r3, r5
 800cdec:	f7f3 fc04 	bl	80005f8 <__aeabi_dmul>
 800cdf0:	a379      	add	r3, pc, #484	@ (adr r3, 800cfd8 <__ieee754_pow+0x740>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	f7f3 fa49 	bl	800028c <__adddf3>
 800cdfa:	4622      	mov	r2, r4
 800cdfc:	462b      	mov	r3, r5
 800cdfe:	f7f3 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ce02:	a377      	add	r3, pc, #476	@ (adr r3, 800cfe0 <__ieee754_pow+0x748>)
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	f7f3 fa40 	bl	800028c <__adddf3>
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f7f3 fbf2 	bl	80005f8 <__aeabi_dmul>
 800ce14:	a374      	add	r3, pc, #464	@ (adr r3, 800cfe8 <__ieee754_pow+0x750>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	f7f3 fa37 	bl	800028c <__adddf3>
 800ce1e:	4622      	mov	r2, r4
 800ce20:	462b      	mov	r3, r5
 800ce22:	f7f3 fbe9 	bl	80005f8 <__aeabi_dmul>
 800ce26:	a372      	add	r3, pc, #456	@ (adr r3, 800cff0 <__ieee754_pow+0x758>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	f7f3 fa2e 	bl	800028c <__adddf3>
 800ce30:	4622      	mov	r2, r4
 800ce32:	4606      	mov	r6, r0
 800ce34:	460f      	mov	r7, r1
 800ce36:	462b      	mov	r3, r5
 800ce38:	4620      	mov	r0, r4
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	f7f3 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	4630      	mov	r0, r6
 800ce46:	4639      	mov	r1, r7
 800ce48:	f7f3 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ce4c:	465a      	mov	r2, fp
 800ce4e:	4604      	mov	r4, r0
 800ce50:	460d      	mov	r5, r1
 800ce52:	464b      	mov	r3, r9
 800ce54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce58:	f7f3 fa18 	bl	800028c <__adddf3>
 800ce5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce60:	f7f3 fbca 	bl	80005f8 <__aeabi_dmul>
 800ce64:	4622      	mov	r2, r4
 800ce66:	462b      	mov	r3, r5
 800ce68:	f7f3 fa10 	bl	800028c <__adddf3>
 800ce6c:	465a      	mov	r2, fp
 800ce6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce72:	464b      	mov	r3, r9
 800ce74:	4658      	mov	r0, fp
 800ce76:	4649      	mov	r1, r9
 800ce78:	f7f3 fbbe 	bl	80005f8 <__aeabi_dmul>
 800ce7c:	4b6a      	ldr	r3, [pc, #424]	@ (800d028 <__ieee754_pow+0x790>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4606      	mov	r6, r0
 800ce82:	460f      	mov	r7, r1
 800ce84:	f7f3 fa02 	bl	800028c <__adddf3>
 800ce88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ce8c:	f7f3 f9fe 	bl	800028c <__adddf3>
 800ce90:	46d8      	mov	r8, fp
 800ce92:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ce96:	460d      	mov	r5, r1
 800ce98:	465a      	mov	r2, fp
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4640      	mov	r0, r8
 800ce9e:	4649      	mov	r1, r9
 800cea0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800cea4:	f7f3 fba8 	bl	80005f8 <__aeabi_dmul>
 800cea8:	465c      	mov	r4, fp
 800ceaa:	4680      	mov	r8, r0
 800ceac:	4689      	mov	r9, r1
 800ceae:	4b5e      	ldr	r3, [pc, #376]	@ (800d028 <__ieee754_pow+0x790>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	4629      	mov	r1, r5
 800ceb6:	f7f3 f9e7 	bl	8000288 <__aeabi_dsub>
 800ceba:	4632      	mov	r2, r6
 800cebc:	463b      	mov	r3, r7
 800cebe:	f7f3 f9e3 	bl	8000288 <__aeabi_dsub>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ceca:	f7f3 f9dd 	bl	8000288 <__aeabi_dsub>
 800cece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ced2:	f7f3 fb91 	bl	80005f8 <__aeabi_dmul>
 800ced6:	4622      	mov	r2, r4
 800ced8:	4606      	mov	r6, r0
 800ceda:	460f      	mov	r7, r1
 800cedc:	462b      	mov	r3, r5
 800cede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cee2:	f7f3 fb89 	bl	80005f8 <__aeabi_dmul>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	4630      	mov	r0, r6
 800ceec:	4639      	mov	r1, r7
 800ceee:	f7f3 f9cd 	bl	800028c <__adddf3>
 800cef2:	4606      	mov	r6, r0
 800cef4:	460f      	mov	r7, r1
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	4640      	mov	r0, r8
 800cefc:	4649      	mov	r1, r9
 800cefe:	f7f3 f9c5 	bl	800028c <__adddf3>
 800cf02:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800cf06:	a33c      	add	r3, pc, #240	@ (adr r3, 800cff8 <__ieee754_pow+0x760>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	4658      	mov	r0, fp
 800cf0e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800cf12:	460d      	mov	r5, r1
 800cf14:	f7f3 fb70 	bl	80005f8 <__aeabi_dmul>
 800cf18:	465c      	mov	r4, fp
 800cf1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf1e:	4642      	mov	r2, r8
 800cf20:	464b      	mov	r3, r9
 800cf22:	4620      	mov	r0, r4
 800cf24:	4629      	mov	r1, r5
 800cf26:	f7f3 f9af 	bl	8000288 <__aeabi_dsub>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4630      	mov	r0, r6
 800cf30:	4639      	mov	r1, r7
 800cf32:	f7f3 f9a9 	bl	8000288 <__aeabi_dsub>
 800cf36:	a332      	add	r3, pc, #200	@ (adr r3, 800d000 <__ieee754_pow+0x768>)
 800cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3c:	f7f3 fb5c 	bl	80005f8 <__aeabi_dmul>
 800cf40:	a331      	add	r3, pc, #196	@ (adr r3, 800d008 <__ieee754_pow+0x770>)
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	4606      	mov	r6, r0
 800cf48:	460f      	mov	r7, r1
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7f3 fb53 	bl	80005f8 <__aeabi_dmul>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4630      	mov	r0, r6
 800cf58:	4639      	mov	r1, r7
 800cf5a:	f7f3 f997 	bl	800028c <__adddf3>
 800cf5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf60:	4b32      	ldr	r3, [pc, #200]	@ (800d02c <__ieee754_pow+0x794>)
 800cf62:	4413      	add	r3, r2
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	f7f3 f990 	bl	800028c <__adddf3>
 800cf6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf72:	f7f3 fad7 	bl	8000524 <__aeabi_i2d>
 800cf76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf78:	4b2d      	ldr	r3, [pc, #180]	@ (800d030 <__ieee754_pow+0x798>)
 800cf7a:	4413      	add	r3, r2
 800cf7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf80:	4606      	mov	r6, r0
 800cf82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf86:	460f      	mov	r7, r1
 800cf88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf8c:	f7f3 f97e 	bl	800028c <__adddf3>
 800cf90:	4642      	mov	r2, r8
 800cf92:	464b      	mov	r3, r9
 800cf94:	f7f3 f97a 	bl	800028c <__adddf3>
 800cf98:	4632      	mov	r2, r6
 800cf9a:	463b      	mov	r3, r7
 800cf9c:	f7f3 f976 	bl	800028c <__adddf3>
 800cfa0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	463b      	mov	r3, r7
 800cfa8:	4658      	mov	r0, fp
 800cfaa:	460d      	mov	r5, r1
 800cfac:	f7f3 f96c 	bl	8000288 <__aeabi_dsub>
 800cfb0:	4642      	mov	r2, r8
 800cfb2:	464b      	mov	r3, r9
 800cfb4:	f7f3 f968 	bl	8000288 <__aeabi_dsub>
 800cfb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfbc:	f7f3 f964 	bl	8000288 <__aeabi_dsub>
 800cfc0:	465c      	mov	r4, fp
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	e036      	b.n	800d034 <__ieee754_pow+0x79c>
 800cfc6:	bf00      	nop
 800cfc8:	4a454eef 	.word	0x4a454eef
 800cfcc:	3fca7e28 	.word	0x3fca7e28
 800cfd0:	93c9db65 	.word	0x93c9db65
 800cfd4:	3fcd864a 	.word	0x3fcd864a
 800cfd8:	a91d4101 	.word	0xa91d4101
 800cfdc:	3fd17460 	.word	0x3fd17460
 800cfe0:	518f264d 	.word	0x518f264d
 800cfe4:	3fd55555 	.word	0x3fd55555
 800cfe8:	db6fabff 	.word	0xdb6fabff
 800cfec:	3fdb6db6 	.word	0x3fdb6db6
 800cff0:	33333303 	.word	0x33333303
 800cff4:	3fe33333 	.word	0x3fe33333
 800cff8:	e0000000 	.word	0xe0000000
 800cffc:	3feec709 	.word	0x3feec709
 800d000:	dc3a03fd 	.word	0xdc3a03fd
 800d004:	3feec709 	.word	0x3feec709
 800d008:	145b01f5 	.word	0x145b01f5
 800d00c:	be3e2fe0 	.word	0xbe3e2fe0
 800d010:	7ff00000 	.word	0x7ff00000
 800d014:	43400000 	.word	0x43400000
 800d018:	0003988e 	.word	0x0003988e
 800d01c:	000bb679 	.word	0x000bb679
 800d020:	0800de00 	.word	0x0800de00
 800d024:	3ff00000 	.word	0x3ff00000
 800d028:	40080000 	.word	0x40080000
 800d02c:	0800dde0 	.word	0x0800dde0
 800d030:	0800ddf0 	.word	0x0800ddf0
 800d034:	460b      	mov	r3, r1
 800d036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03a:	e5d7      	b.n	800cbec <__ieee754_pow+0x354>
 800d03c:	f04f 0a01 	mov.w	sl, #1
 800d040:	e65e      	b.n	800cd00 <__ieee754_pow+0x468>
 800d042:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d314 <__ieee754_pow+0xa7c>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	4630      	mov	r0, r6
 800d04a:	4639      	mov	r1, r7
 800d04c:	f7f3 f91e 	bl	800028c <__adddf3>
 800d050:	4642      	mov	r2, r8
 800d052:	e9cd 0100 	strd	r0, r1, [sp]
 800d056:	464b      	mov	r3, r9
 800d058:	4620      	mov	r0, r4
 800d05a:	4629      	mov	r1, r5
 800d05c:	f7f3 f914 	bl	8000288 <__aeabi_dsub>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d068:	f7f3 fd56 	bl	8000b18 <__aeabi_dcmpgt>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f47f ae00 	bne.w	800cc72 <__ieee754_pow+0x3da>
 800d072:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d076:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d07a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d07e:	fa43 fa0a 	asr.w	sl, r3, sl
 800d082:	44da      	add	sl, fp
 800d084:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d088:	489d      	ldr	r0, [pc, #628]	@ (800d300 <__ieee754_pow+0xa68>)
 800d08a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d08e:	4108      	asrs	r0, r1
 800d090:	ea00 030a 	and.w	r3, r0, sl
 800d094:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d098:	f1c1 0114 	rsb	r1, r1, #20
 800d09c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d0a0:	fa4a fa01 	asr.w	sl, sl, r1
 800d0a4:	f1bb 0f00 	cmp.w	fp, #0
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	4649      	mov	r1, r9
 800d0ac:	f04f 0200 	mov.w	r2, #0
 800d0b0:	bfb8      	it	lt
 800d0b2:	f1ca 0a00 	rsblt	sl, sl, #0
 800d0b6:	f7f3 f8e7 	bl	8000288 <__aeabi_dsub>
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	4689      	mov	r9, r1
 800d0be:	4632      	mov	r2, r6
 800d0c0:	463b      	mov	r3, r7
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	f7f3 f8e1 	bl	800028c <__adddf3>
 800d0ca:	2400      	movs	r4, #0
 800d0cc:	a37c      	add	r3, pc, #496	@ (adr r3, 800d2c0 <__ieee754_pow+0xa28>)
 800d0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	460d      	mov	r5, r1
 800d0d6:	f7f3 fa8f 	bl	80005f8 <__aeabi_dmul>
 800d0da:	4642      	mov	r2, r8
 800d0dc:	e9cd 0100 	strd	r0, r1, [sp]
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	f7f3 f8cf 	bl	8000288 <__aeabi_dsub>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	f7f3 f8c9 	bl	8000288 <__aeabi_dsub>
 800d0f6:	a374      	add	r3, pc, #464	@ (adr r3, 800d2c8 <__ieee754_pow+0xa30>)
 800d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	a373      	add	r3, pc, #460	@ (adr r3, 800d2d0 <__ieee754_pow+0xa38>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	4680      	mov	r8, r0
 800d108:	4689      	mov	r9, r1
 800d10a:	4620      	mov	r0, r4
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7f3 fa73 	bl	80005f8 <__aeabi_dmul>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	4640      	mov	r0, r8
 800d118:	4649      	mov	r1, r9
 800d11a:	f7f3 f8b7 	bl	800028c <__adddf3>
 800d11e:	4604      	mov	r4, r0
 800d120:	460d      	mov	r5, r1
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d12a:	f7f3 f8af 	bl	800028c <__adddf3>
 800d12e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d132:	4680      	mov	r8, r0
 800d134:	4689      	mov	r9, r1
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4620      	mov	r0, r4
 800d140:	4629      	mov	r1, r5
 800d142:	f7f3 f8a1 	bl	8000288 <__aeabi_dsub>
 800d146:	4642      	mov	r2, r8
 800d148:	4606      	mov	r6, r0
 800d14a:	460f      	mov	r7, r1
 800d14c:	464b      	mov	r3, r9
 800d14e:	4640      	mov	r0, r8
 800d150:	4649      	mov	r1, r9
 800d152:	f7f3 fa51 	bl	80005f8 <__aeabi_dmul>
 800d156:	a360      	add	r3, pc, #384	@ (adr r3, 800d2d8 <__ieee754_pow+0xa40>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	4604      	mov	r4, r0
 800d15e:	460d      	mov	r5, r1
 800d160:	f7f3 fa4a 	bl	80005f8 <__aeabi_dmul>
 800d164:	a35e      	add	r3, pc, #376	@ (adr r3, 800d2e0 <__ieee754_pow+0xa48>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 f88d 	bl	8000288 <__aeabi_dsub>
 800d16e:	4622      	mov	r2, r4
 800d170:	462b      	mov	r3, r5
 800d172:	f7f3 fa41 	bl	80005f8 <__aeabi_dmul>
 800d176:	a35c      	add	r3, pc, #368	@ (adr r3, 800d2e8 <__ieee754_pow+0xa50>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	f7f3 f886 	bl	800028c <__adddf3>
 800d180:	4622      	mov	r2, r4
 800d182:	462b      	mov	r3, r5
 800d184:	f7f3 fa38 	bl	80005f8 <__aeabi_dmul>
 800d188:	a359      	add	r3, pc, #356	@ (adr r3, 800d2f0 <__ieee754_pow+0xa58>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f3 f87b 	bl	8000288 <__aeabi_dsub>
 800d192:	4622      	mov	r2, r4
 800d194:	462b      	mov	r3, r5
 800d196:	f7f3 fa2f 	bl	80005f8 <__aeabi_dmul>
 800d19a:	a357      	add	r3, pc, #348	@ (adr r3, 800d2f8 <__ieee754_pow+0xa60>)
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	f7f3 f874 	bl	800028c <__adddf3>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	f7f3 fa26 	bl	80005f8 <__aeabi_dmul>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	4649      	mov	r1, r9
 800d1b4:	f7f3 f868 	bl	8000288 <__aeabi_dsub>
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	460d      	mov	r5, r1
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4640      	mov	r0, r8
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	f7f3 fa18 	bl	80005f8 <__aeabi_dmul>
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	e9cd 0100 	strd	r0, r1, [sp]
 800d1ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f7f3 f857 	bl	8000288 <__aeabi_dsub>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1e2:	f7f3 fb33 	bl	800084c <__aeabi_ddiv>
 800d1e6:	4632      	mov	r2, r6
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	463b      	mov	r3, r7
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	f7f3 fa01 	bl	80005f8 <__aeabi_dmul>
 800d1f6:	4632      	mov	r2, r6
 800d1f8:	463b      	mov	r3, r7
 800d1fa:	f7f3 f847 	bl	800028c <__adddf3>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4620      	mov	r0, r4
 800d204:	4629      	mov	r1, r5
 800d206:	f7f3 f83f 	bl	8000288 <__aeabi_dsub>
 800d20a:	4642      	mov	r2, r8
 800d20c:	464b      	mov	r3, r9
 800d20e:	f7f3 f83b 	bl	8000288 <__aeabi_dsub>
 800d212:	460b      	mov	r3, r1
 800d214:	4602      	mov	r2, r0
 800d216:	493b      	ldr	r1, [pc, #236]	@ (800d304 <__ieee754_pow+0xa6c>)
 800d218:	2000      	movs	r0, #0
 800d21a:	f7f3 f835 	bl	8000288 <__aeabi_dsub>
 800d21e:	ec41 0b10 	vmov	d0, r0, r1
 800d222:	ee10 3a90 	vmov	r3, s1
 800d226:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d22a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d22e:	da30      	bge.n	800d292 <__ieee754_pow+0x9fa>
 800d230:	4650      	mov	r0, sl
 800d232:	f000 fa15 	bl	800d660 <scalbn>
 800d236:	ec51 0b10 	vmov	r0, r1, d0
 800d23a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d23e:	f7ff bbd2 	b.w	800c9e6 <__ieee754_pow+0x14e>
 800d242:	4c31      	ldr	r4, [pc, #196]	@ (800d308 <__ieee754_pow+0xa70>)
 800d244:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d248:	42a3      	cmp	r3, r4
 800d24a:	d91a      	bls.n	800d282 <__ieee754_pow+0x9ea>
 800d24c:	4b2f      	ldr	r3, [pc, #188]	@ (800d30c <__ieee754_pow+0xa74>)
 800d24e:	440b      	add	r3, r1
 800d250:	4303      	orrs	r3, r0
 800d252:	d009      	beq.n	800d268 <__ieee754_pow+0x9d0>
 800d254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d258:	2200      	movs	r2, #0
 800d25a:	2300      	movs	r3, #0
 800d25c:	f7f3 fc3e 	bl	8000adc <__aeabi_dcmplt>
 800d260:	3800      	subs	r0, #0
 800d262:	bf18      	it	ne
 800d264:	2001      	movne	r0, #1
 800d266:	e42b      	b.n	800cac0 <__ieee754_pow+0x228>
 800d268:	4642      	mov	r2, r8
 800d26a:	464b      	mov	r3, r9
 800d26c:	f7f3 f80c 	bl	8000288 <__aeabi_dsub>
 800d270:	4632      	mov	r2, r6
 800d272:	463b      	mov	r3, r7
 800d274:	f7f3 fc46 	bl	8000b04 <__aeabi_dcmpge>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d1eb      	bne.n	800d254 <__ieee754_pow+0x9bc>
 800d27c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d31c <__ieee754_pow+0xa84>
 800d280:	e6f7      	b.n	800d072 <__ieee754_pow+0x7da>
 800d282:	469a      	mov	sl, r3
 800d284:	4b22      	ldr	r3, [pc, #136]	@ (800d310 <__ieee754_pow+0xa78>)
 800d286:	459a      	cmp	sl, r3
 800d288:	f63f aef3 	bhi.w	800d072 <__ieee754_pow+0x7da>
 800d28c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d290:	e715      	b.n	800d0be <__ieee754_pow+0x826>
 800d292:	ec51 0b10 	vmov	r0, r1, d0
 800d296:	4619      	mov	r1, r3
 800d298:	e7cf      	b.n	800d23a <__ieee754_pow+0x9a2>
 800d29a:	491a      	ldr	r1, [pc, #104]	@ (800d304 <__ieee754_pow+0xa6c>)
 800d29c:	2000      	movs	r0, #0
 800d29e:	f7ff bb18 	b.w	800c8d2 <__ieee754_pow+0x3a>
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	f7ff bb14 	b.w	800c8d2 <__ieee754_pow+0x3a>
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	f7ff bb10 	b.w	800c8d2 <__ieee754_pow+0x3a>
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	f7ff bb5e 	b.w	800c974 <__ieee754_pow+0xdc>
 800d2b8:	2400      	movs	r4, #0
 800d2ba:	f7ff bb49 	b.w	800c950 <__ieee754_pow+0xb8>
 800d2be:	bf00      	nop
 800d2c0:	00000000 	.word	0x00000000
 800d2c4:	3fe62e43 	.word	0x3fe62e43
 800d2c8:	fefa39ef 	.word	0xfefa39ef
 800d2cc:	3fe62e42 	.word	0x3fe62e42
 800d2d0:	0ca86c39 	.word	0x0ca86c39
 800d2d4:	be205c61 	.word	0xbe205c61
 800d2d8:	72bea4d0 	.word	0x72bea4d0
 800d2dc:	3e663769 	.word	0x3e663769
 800d2e0:	c5d26bf1 	.word	0xc5d26bf1
 800d2e4:	3ebbbd41 	.word	0x3ebbbd41
 800d2e8:	af25de2c 	.word	0xaf25de2c
 800d2ec:	3f11566a 	.word	0x3f11566a
 800d2f0:	16bebd93 	.word	0x16bebd93
 800d2f4:	3f66c16c 	.word	0x3f66c16c
 800d2f8:	5555553e 	.word	0x5555553e
 800d2fc:	3fc55555 	.word	0x3fc55555
 800d300:	fff00000 	.word	0xfff00000
 800d304:	3ff00000 	.word	0x3ff00000
 800d308:	4090cbff 	.word	0x4090cbff
 800d30c:	3f6f3400 	.word	0x3f6f3400
 800d310:	3fe00000 	.word	0x3fe00000
 800d314:	652b82fe 	.word	0x652b82fe
 800d318:	3c971547 	.word	0x3c971547
 800d31c:	4090cc00 	.word	0x4090cc00

0800d320 <atan>:
 800d320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	ec55 4b10 	vmov	r4, r5, d0
 800d328:	4bbf      	ldr	r3, [pc, #764]	@ (800d628 <atan+0x308>)
 800d32a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d32e:	429e      	cmp	r6, r3
 800d330:	46ab      	mov	fp, r5
 800d332:	d918      	bls.n	800d366 <atan+0x46>
 800d334:	4bbd      	ldr	r3, [pc, #756]	@ (800d62c <atan+0x30c>)
 800d336:	429e      	cmp	r6, r3
 800d338:	d801      	bhi.n	800d33e <atan+0x1e>
 800d33a:	d109      	bne.n	800d350 <atan+0x30>
 800d33c:	b144      	cbz	r4, 800d350 <atan+0x30>
 800d33e:	4622      	mov	r2, r4
 800d340:	462b      	mov	r3, r5
 800d342:	4620      	mov	r0, r4
 800d344:	4629      	mov	r1, r5
 800d346:	f7f2 ffa1 	bl	800028c <__adddf3>
 800d34a:	4604      	mov	r4, r0
 800d34c:	460d      	mov	r5, r1
 800d34e:	e006      	b.n	800d35e <atan+0x3e>
 800d350:	f1bb 0f00 	cmp.w	fp, #0
 800d354:	f340 812b 	ble.w	800d5ae <atan+0x28e>
 800d358:	a597      	add	r5, pc, #604	@ (adr r5, 800d5b8 <atan+0x298>)
 800d35a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d35e:	ec45 4b10 	vmov	d0, r4, r5
 800d362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	4bb2      	ldr	r3, [pc, #712]	@ (800d630 <atan+0x310>)
 800d368:	429e      	cmp	r6, r3
 800d36a:	d813      	bhi.n	800d394 <atan+0x74>
 800d36c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d370:	429e      	cmp	r6, r3
 800d372:	d80c      	bhi.n	800d38e <atan+0x6e>
 800d374:	a392      	add	r3, pc, #584	@ (adr r3, 800d5c0 <atan+0x2a0>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	4620      	mov	r0, r4
 800d37c:	4629      	mov	r1, r5
 800d37e:	f7f2 ff85 	bl	800028c <__adddf3>
 800d382:	4bac      	ldr	r3, [pc, #688]	@ (800d634 <atan+0x314>)
 800d384:	2200      	movs	r2, #0
 800d386:	f7f3 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d1e7      	bne.n	800d35e <atan+0x3e>
 800d38e:	f04f 3aff 	mov.w	sl, #4294967295
 800d392:	e029      	b.n	800d3e8 <atan+0xc8>
 800d394:	f000 f95c 	bl	800d650 <fabs>
 800d398:	4ba7      	ldr	r3, [pc, #668]	@ (800d638 <atan+0x318>)
 800d39a:	429e      	cmp	r6, r3
 800d39c:	ec55 4b10 	vmov	r4, r5, d0
 800d3a0:	f200 80bc 	bhi.w	800d51c <atan+0x1fc>
 800d3a4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d3a8:	429e      	cmp	r6, r3
 800d3aa:	f200 809e 	bhi.w	800d4ea <atan+0x1ca>
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	f7f2 ff69 	bl	800028c <__adddf3>
 800d3ba:	4b9e      	ldr	r3, [pc, #632]	@ (800d634 <atan+0x314>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f7f2 ff63 	bl	8000288 <__aeabi_dsub>
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	460f      	mov	r7, r1
 800d3c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	f7f2 ff5c 	bl	800028c <__adddf3>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4630      	mov	r0, r6
 800d3da:	4639      	mov	r1, r7
 800d3dc:	f7f3 fa36 	bl	800084c <__aeabi_ddiv>
 800d3e0:	f04f 0a00 	mov.w	sl, #0
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	460d      	mov	r5, r1
 800d3e8:	4622      	mov	r2, r4
 800d3ea:	462b      	mov	r3, r5
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	f7f3 f902 	bl	80005f8 <__aeabi_dmul>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4680      	mov	r8, r0
 800d3fa:	4689      	mov	r9, r1
 800d3fc:	f7f3 f8fc 	bl	80005f8 <__aeabi_dmul>
 800d400:	a371      	add	r3, pc, #452	@ (adr r3, 800d5c8 <atan+0x2a8>)
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	4606      	mov	r6, r0
 800d408:	460f      	mov	r7, r1
 800d40a:	f7f3 f8f5 	bl	80005f8 <__aeabi_dmul>
 800d40e:	a370      	add	r3, pc, #448	@ (adr r3, 800d5d0 <atan+0x2b0>)
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	f7f2 ff3a 	bl	800028c <__adddf3>
 800d418:	4632      	mov	r2, r6
 800d41a:	463b      	mov	r3, r7
 800d41c:	f7f3 f8ec 	bl	80005f8 <__aeabi_dmul>
 800d420:	a36d      	add	r3, pc, #436	@ (adr r3, 800d5d8 <atan+0x2b8>)
 800d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d426:	f7f2 ff31 	bl	800028c <__adddf3>
 800d42a:	4632      	mov	r2, r6
 800d42c:	463b      	mov	r3, r7
 800d42e:	f7f3 f8e3 	bl	80005f8 <__aeabi_dmul>
 800d432:	a36b      	add	r3, pc, #428	@ (adr r3, 800d5e0 <atan+0x2c0>)
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	f7f2 ff28 	bl	800028c <__adddf3>
 800d43c:	4632      	mov	r2, r6
 800d43e:	463b      	mov	r3, r7
 800d440:	f7f3 f8da 	bl	80005f8 <__aeabi_dmul>
 800d444:	a368      	add	r3, pc, #416	@ (adr r3, 800d5e8 <atan+0x2c8>)
 800d446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44a:	f7f2 ff1f 	bl	800028c <__adddf3>
 800d44e:	4632      	mov	r2, r6
 800d450:	463b      	mov	r3, r7
 800d452:	f7f3 f8d1 	bl	80005f8 <__aeabi_dmul>
 800d456:	a366      	add	r3, pc, #408	@ (adr r3, 800d5f0 <atan+0x2d0>)
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	f7f2 ff16 	bl	800028c <__adddf3>
 800d460:	4642      	mov	r2, r8
 800d462:	464b      	mov	r3, r9
 800d464:	f7f3 f8c8 	bl	80005f8 <__aeabi_dmul>
 800d468:	a363      	add	r3, pc, #396	@ (adr r3, 800d5f8 <atan+0x2d8>)
 800d46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46e:	4680      	mov	r8, r0
 800d470:	4689      	mov	r9, r1
 800d472:	4630      	mov	r0, r6
 800d474:	4639      	mov	r1, r7
 800d476:	f7f3 f8bf 	bl	80005f8 <__aeabi_dmul>
 800d47a:	a361      	add	r3, pc, #388	@ (adr r3, 800d600 <atan+0x2e0>)
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	f7f2 ff02 	bl	8000288 <__aeabi_dsub>
 800d484:	4632      	mov	r2, r6
 800d486:	463b      	mov	r3, r7
 800d488:	f7f3 f8b6 	bl	80005f8 <__aeabi_dmul>
 800d48c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d608 <atan+0x2e8>)
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	f7f2 fef9 	bl	8000288 <__aeabi_dsub>
 800d496:	4632      	mov	r2, r6
 800d498:	463b      	mov	r3, r7
 800d49a:	f7f3 f8ad 	bl	80005f8 <__aeabi_dmul>
 800d49e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d610 <atan+0x2f0>)
 800d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a4:	f7f2 fef0 	bl	8000288 <__aeabi_dsub>
 800d4a8:	4632      	mov	r2, r6
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	f7f3 f8a4 	bl	80005f8 <__aeabi_dmul>
 800d4b0:	a359      	add	r3, pc, #356	@ (adr r3, 800d618 <atan+0x2f8>)
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f2 fee7 	bl	8000288 <__aeabi_dsub>
 800d4ba:	4632      	mov	r2, r6
 800d4bc:	463b      	mov	r3, r7
 800d4be:	f7f3 f89b 	bl	80005f8 <__aeabi_dmul>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	f7f2 fedf 	bl	800028c <__adddf3>
 800d4ce:	4622      	mov	r2, r4
 800d4d0:	462b      	mov	r3, r5
 800d4d2:	f7f3 f891 	bl	80005f8 <__aeabi_dmul>
 800d4d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	d148      	bne.n	800d572 <atan+0x252>
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	f7f2 fed0 	bl	8000288 <__aeabi_dsub>
 800d4e8:	e72f      	b.n	800d34a <atan+0x2a>
 800d4ea:	4b52      	ldr	r3, [pc, #328]	@ (800d634 <atan+0x314>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	f7f2 fec9 	bl	8000288 <__aeabi_dsub>
 800d4f6:	4b4f      	ldr	r3, [pc, #316]	@ (800d634 <atan+0x314>)
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	460f      	mov	r7, r1
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	4620      	mov	r0, r4
 800d500:	4629      	mov	r1, r5
 800d502:	f7f2 fec3 	bl	800028c <__adddf3>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	4630      	mov	r0, r6
 800d50c:	4639      	mov	r1, r7
 800d50e:	f7f3 f99d 	bl	800084c <__aeabi_ddiv>
 800d512:	f04f 0a01 	mov.w	sl, #1
 800d516:	4604      	mov	r4, r0
 800d518:	460d      	mov	r5, r1
 800d51a:	e765      	b.n	800d3e8 <atan+0xc8>
 800d51c:	4b47      	ldr	r3, [pc, #284]	@ (800d63c <atan+0x31c>)
 800d51e:	429e      	cmp	r6, r3
 800d520:	d21c      	bcs.n	800d55c <atan+0x23c>
 800d522:	4b47      	ldr	r3, [pc, #284]	@ (800d640 <atan+0x320>)
 800d524:	2200      	movs	r2, #0
 800d526:	4620      	mov	r0, r4
 800d528:	4629      	mov	r1, r5
 800d52a:	f7f2 fead 	bl	8000288 <__aeabi_dsub>
 800d52e:	4b44      	ldr	r3, [pc, #272]	@ (800d640 <atan+0x320>)
 800d530:	4606      	mov	r6, r0
 800d532:	460f      	mov	r7, r1
 800d534:	2200      	movs	r2, #0
 800d536:	4620      	mov	r0, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	f7f3 f85d 	bl	80005f8 <__aeabi_dmul>
 800d53e:	4b3d      	ldr	r3, [pc, #244]	@ (800d634 <atan+0x314>)
 800d540:	2200      	movs	r2, #0
 800d542:	f7f2 fea3 	bl	800028c <__adddf3>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4630      	mov	r0, r6
 800d54c:	4639      	mov	r1, r7
 800d54e:	f7f3 f97d 	bl	800084c <__aeabi_ddiv>
 800d552:	f04f 0a02 	mov.w	sl, #2
 800d556:	4604      	mov	r4, r0
 800d558:	460d      	mov	r5, r1
 800d55a:	e745      	b.n	800d3e8 <atan+0xc8>
 800d55c:	4622      	mov	r2, r4
 800d55e:	462b      	mov	r3, r5
 800d560:	4938      	ldr	r1, [pc, #224]	@ (800d644 <atan+0x324>)
 800d562:	2000      	movs	r0, #0
 800d564:	f7f3 f972 	bl	800084c <__aeabi_ddiv>
 800d568:	f04f 0a03 	mov.w	sl, #3
 800d56c:	4604      	mov	r4, r0
 800d56e:	460d      	mov	r5, r1
 800d570:	e73a      	b.n	800d3e8 <atan+0xc8>
 800d572:	4b35      	ldr	r3, [pc, #212]	@ (800d648 <atan+0x328>)
 800d574:	4e35      	ldr	r6, [pc, #212]	@ (800d64c <atan+0x32c>)
 800d576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f2 fe83 	bl	8000288 <__aeabi_dsub>
 800d582:	4622      	mov	r2, r4
 800d584:	462b      	mov	r3, r5
 800d586:	f7f2 fe7f 	bl	8000288 <__aeabi_dsub>
 800d58a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d596:	f7f2 fe77 	bl	8000288 <__aeabi_dsub>
 800d59a:	f1bb 0f00 	cmp.w	fp, #0
 800d59e:	4604      	mov	r4, r0
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	f6bf aedc 	bge.w	800d35e <atan+0x3e>
 800d5a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5aa:	461d      	mov	r5, r3
 800d5ac:	e6d7      	b.n	800d35e <atan+0x3e>
 800d5ae:	a51c      	add	r5, pc, #112	@ (adr r5, 800d620 <atan+0x300>)
 800d5b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d5b4:	e6d3      	b.n	800d35e <atan+0x3e>
 800d5b6:	bf00      	nop
 800d5b8:	54442d18 	.word	0x54442d18
 800d5bc:	3ff921fb 	.word	0x3ff921fb
 800d5c0:	8800759c 	.word	0x8800759c
 800d5c4:	7e37e43c 	.word	0x7e37e43c
 800d5c8:	e322da11 	.word	0xe322da11
 800d5cc:	3f90ad3a 	.word	0x3f90ad3a
 800d5d0:	24760deb 	.word	0x24760deb
 800d5d4:	3fa97b4b 	.word	0x3fa97b4b
 800d5d8:	a0d03d51 	.word	0xa0d03d51
 800d5dc:	3fb10d66 	.word	0x3fb10d66
 800d5e0:	c54c206e 	.word	0xc54c206e
 800d5e4:	3fb745cd 	.word	0x3fb745cd
 800d5e8:	920083ff 	.word	0x920083ff
 800d5ec:	3fc24924 	.word	0x3fc24924
 800d5f0:	5555550d 	.word	0x5555550d
 800d5f4:	3fd55555 	.word	0x3fd55555
 800d5f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d5fc:	bfa2b444 	.word	0xbfa2b444
 800d600:	52defd9a 	.word	0x52defd9a
 800d604:	3fadde2d 	.word	0x3fadde2d
 800d608:	af749a6d 	.word	0xaf749a6d
 800d60c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d610:	fe231671 	.word	0xfe231671
 800d614:	3fbc71c6 	.word	0x3fbc71c6
 800d618:	9998ebc4 	.word	0x9998ebc4
 800d61c:	3fc99999 	.word	0x3fc99999
 800d620:	54442d18 	.word	0x54442d18
 800d624:	bff921fb 	.word	0xbff921fb
 800d628:	440fffff 	.word	0x440fffff
 800d62c:	7ff00000 	.word	0x7ff00000
 800d630:	3fdbffff 	.word	0x3fdbffff
 800d634:	3ff00000 	.word	0x3ff00000
 800d638:	3ff2ffff 	.word	0x3ff2ffff
 800d63c:	40038000 	.word	0x40038000
 800d640:	3ff80000 	.word	0x3ff80000
 800d644:	bff00000 	.word	0xbff00000
 800d648:	0800de10 	.word	0x0800de10
 800d64c:	0800de30 	.word	0x0800de30

0800d650 <fabs>:
 800d650:	ec51 0b10 	vmov	r0, r1, d0
 800d654:	4602      	mov	r2, r0
 800d656:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d65a:	ec43 2b10 	vmov	d0, r2, r3
 800d65e:	4770      	bx	lr

0800d660 <scalbn>:
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	ec55 4b10 	vmov	r4, r5, d0
 800d666:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d66a:	4606      	mov	r6, r0
 800d66c:	462b      	mov	r3, r5
 800d66e:	b991      	cbnz	r1, 800d696 <scalbn+0x36>
 800d670:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d674:	4323      	orrs	r3, r4
 800d676:	d03d      	beq.n	800d6f4 <scalbn+0x94>
 800d678:	4b35      	ldr	r3, [pc, #212]	@ (800d750 <scalbn+0xf0>)
 800d67a:	4620      	mov	r0, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	2200      	movs	r2, #0
 800d680:	f7f2 ffba 	bl	80005f8 <__aeabi_dmul>
 800d684:	4b33      	ldr	r3, [pc, #204]	@ (800d754 <scalbn+0xf4>)
 800d686:	429e      	cmp	r6, r3
 800d688:	4604      	mov	r4, r0
 800d68a:	460d      	mov	r5, r1
 800d68c:	da0f      	bge.n	800d6ae <scalbn+0x4e>
 800d68e:	a328      	add	r3, pc, #160	@ (adr r3, 800d730 <scalbn+0xd0>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	e01e      	b.n	800d6d4 <scalbn+0x74>
 800d696:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d69a:	4291      	cmp	r1, r2
 800d69c:	d10b      	bne.n	800d6b6 <scalbn+0x56>
 800d69e:	4622      	mov	r2, r4
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	f7f2 fdf2 	bl	800028c <__adddf3>
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	e022      	b.n	800d6f4 <scalbn+0x94>
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6b4:	3936      	subs	r1, #54	@ 0x36
 800d6b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d6ba:	4296      	cmp	r6, r2
 800d6bc:	dd0d      	ble.n	800d6da <scalbn+0x7a>
 800d6be:	2d00      	cmp	r5, #0
 800d6c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800d738 <scalbn+0xd8>)
 800d6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6c6:	da02      	bge.n	800d6ce <scalbn+0x6e>
 800d6c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800d740 <scalbn+0xe0>)
 800d6ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ce:	a31a      	add	r3, pc, #104	@ (adr r3, 800d738 <scalbn+0xd8>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	f7f2 ff90 	bl	80005f8 <__aeabi_dmul>
 800d6d8:	e7e6      	b.n	800d6a8 <scalbn+0x48>
 800d6da:	1872      	adds	r2, r6, r1
 800d6dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d6e0:	428a      	cmp	r2, r1
 800d6e2:	dcec      	bgt.n	800d6be <scalbn+0x5e>
 800d6e4:	2a00      	cmp	r2, #0
 800d6e6:	dd08      	ble.n	800d6fa <scalbn+0x9a>
 800d6e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d6ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d6f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6f4:	ec45 4b10 	vmov	d0, r4, r5
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d6fe:	da08      	bge.n	800d712 <scalbn+0xb2>
 800d700:	2d00      	cmp	r5, #0
 800d702:	a10b      	add	r1, pc, #44	@ (adr r1, 800d730 <scalbn+0xd0>)
 800d704:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d708:	dac1      	bge.n	800d68e <scalbn+0x2e>
 800d70a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d748 <scalbn+0xe8>)
 800d70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d710:	e7bd      	b.n	800d68e <scalbn+0x2e>
 800d712:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d716:	3236      	adds	r2, #54	@ 0x36
 800d718:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d71c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d720:	4620      	mov	r0, r4
 800d722:	4b0d      	ldr	r3, [pc, #52]	@ (800d758 <scalbn+0xf8>)
 800d724:	4629      	mov	r1, r5
 800d726:	2200      	movs	r2, #0
 800d728:	e7d4      	b.n	800d6d4 <scalbn+0x74>
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w
 800d730:	c2f8f359 	.word	0xc2f8f359
 800d734:	01a56e1f 	.word	0x01a56e1f
 800d738:	8800759c 	.word	0x8800759c
 800d73c:	7e37e43c 	.word	0x7e37e43c
 800d740:	8800759c 	.word	0x8800759c
 800d744:	fe37e43c 	.word	0xfe37e43c
 800d748:	c2f8f359 	.word	0xc2f8f359
 800d74c:	81a56e1f 	.word	0x81a56e1f
 800d750:	43500000 	.word	0x43500000
 800d754:	ffff3cb0 	.word	0xffff3cb0
 800d758:	3c900000 	.word	0x3c900000

0800d75c <with_errno>:
 800d75c:	b510      	push	{r4, lr}
 800d75e:	ed2d 8b02 	vpush	{d8}
 800d762:	eeb0 8a40 	vmov.f32	s16, s0
 800d766:	eef0 8a60 	vmov.f32	s17, s1
 800d76a:	4604      	mov	r4, r0
 800d76c:	f7fc fdce 	bl	800a30c <__errno>
 800d770:	eeb0 0a48 	vmov.f32	s0, s16
 800d774:	eef0 0a68 	vmov.f32	s1, s17
 800d778:	ecbd 8b02 	vpop	{d8}
 800d77c:	6004      	str	r4, [r0, #0]
 800d77e:	bd10      	pop	{r4, pc}

0800d780 <xflow>:
 800d780:	4603      	mov	r3, r0
 800d782:	b507      	push	{r0, r1, r2, lr}
 800d784:	ec51 0b10 	vmov	r0, r1, d0
 800d788:	b183      	cbz	r3, 800d7ac <xflow+0x2c>
 800d78a:	4602      	mov	r2, r0
 800d78c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d790:	e9cd 2300 	strd	r2, r3, [sp]
 800d794:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d798:	f7f2 ff2e 	bl	80005f8 <__aeabi_dmul>
 800d79c:	ec41 0b10 	vmov	d0, r0, r1
 800d7a0:	2022      	movs	r0, #34	@ 0x22
 800d7a2:	b003      	add	sp, #12
 800d7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7a8:	f7ff bfd8 	b.w	800d75c <with_errno>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	e7ee      	b.n	800d790 <xflow+0x10>
 800d7b2:	0000      	movs	r0, r0
 800d7b4:	0000      	movs	r0, r0
	...

0800d7b8 <__math_uflow>:
 800d7b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7c0 <__math_uflow+0x8>
 800d7bc:	f7ff bfe0 	b.w	800d780 <xflow>
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	10000000 	.word	0x10000000

0800d7c8 <__math_oflow>:
 800d7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7d0 <__math_oflow+0x8>
 800d7cc:	f7ff bfd8 	b.w	800d780 <xflow>
 800d7d0:	00000000 	.word	0x00000000
 800d7d4:	70000000 	.word	0x70000000

0800d7d8 <_init>:
 800d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7da:	bf00      	nop
 800d7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7de:	bc08      	pop	{r3}
 800d7e0:	469e      	mov	lr, r3
 800d7e2:	4770      	bx	lr

0800d7e4 <_fini>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	bf00      	nop
 800d7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ea:	bc08      	pop	{r3}
 800d7ec:	469e      	mov	lr, r3
 800d7ee:	4770      	bx	lr
